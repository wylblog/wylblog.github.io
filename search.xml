<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ClickHouse单机部署配置使用(21.9.4.35)</title>
      <link href="/2024/11/13/clickhouse-dan-ji-bu-shu-pei-zhi-shi-yong-21-9-4-35/"/>
      <url>/2024/11/13/clickhouse-dan-ji-bu-shu-pei-zhi-shi-yong-21-9-4-35/</url>
      
        <content type="html"><![CDATA[<h1 id="ClickHouse"><a href="#ClickHouse" class="headerlink" title="ClickHouse"></a>ClickHouse</h1><p>官网：<a href="https://clickhouse.com/">https://clickhouse.com/</a></p><p>官方文档：<a href="https://clickhouse.com/docs/en/intro">https://clickhouse.com/docs/en/intro</a></p><p>tgz包下载：<a href="https://packages.clickhouse.com/tgz/stable/">https://packages.clickhouse.com/tgz/stable/</a></p><h2 id="1-ClickHouse简介："><a href="#1-ClickHouse简介：" class="headerlink" title="1. ClickHouse简介："></a>1. ClickHouse简介：</h2><p>ClickHouse 是俄罗斯的 Yandex 于2016年开源的<code>列式存储数据库</code>（DBMS)，主要用于<code>在线分析处理查询（OLAP）</code>，能够使用SQL 查询实时生成分析数据报告。</p><h3 id="1-1-什么是-OLAP-？"><a href="#1-1-什么是-OLAP-？" class="headerlink" title="1.1 什么是 OLAP ？"></a>1.1 什么是 OLAP ？</h3><p>OLAP 场景需要在大型数据集之上实时响应复杂的分析查询，具有以下特征：</p><ul><li>数据集可能非常庞大 - 数十亿或数万亿行</li><li>数据组织在包含许多列的表中</li><li>仅选择几列来回答任何特定查询</li><li>结果必须以毫秒或秒为单位返回</li></ul><h3 id="1-2-面向列与面向行的数据库"><a href="#1-2-面向列与面向行的数据库" class="headerlink" title="1.2 面向列与面向行的数据库"></a>1.2 面向列与面向行的数据库</h3><p>在面向行的 DBMS 中，数据存储在行中，与行相关的所有值物理上彼此相邻存储。</p><p>在面向列的 DBMS 中，数据存储在列中，同一列中的值存储在一起。</p><h3 id="1-3-ClickHouse-的特点"><a href="#1-3-ClickHouse-的特点" class="headerlink" title="1.3  ClickHouse 的特点"></a>1.3  ClickHouse 的特点</h3><h4 id="1-3-1-列式存储"><a href="#1-3-1-列式存储" class="headerlink" title="1.3.1 列式存储"></a>1.3.1 列式存储</h4><p>以下面的表为例：</p><table><thead><tr><th>id</th><th>name</th><th>age</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>18</td></tr><tr><td>2</td><td>李四</td><td>22</td></tr><tr><td>3</td><td>王五</td><td>34</td></tr></tbody></table><blockquote><p>1）采用行式存储时，数据在磁盘上的组织结构为:</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291505667.png" alt="image-20240129150508584"></p><p>​好处是想查某个人所有的属性时，可以通过一次磁盘查找加顺序读取就可以。但是当想 查所有人的年龄时，需要不停的查找，或者全表扫描才行，遍历的很多数据都是不需要的。</p><blockquote><p>2）采用列式存储时，数据在磁盘上的组织结构为：</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291505409.png" alt="image-20240129150559349"></p><p>​这时想查所有人的年龄只需把年龄那一列拿出来就可以了</p><blockquote><p>3）列式储存的好处：</p></blockquote><ul><li>对于列的聚合，计数，求和等统计操作原因优于行式存储。 </li><li>由于某一列的数据类型都是相同的，针对于数据存储更容易进行数据压缩，每一列 选择更优的数据压缩算法，大大提高了数据的压缩比重。 </li><li>由于数据压缩比更好，一方面节省了磁盘空间，另一方面对于 cache 也有了更大的 发挥空间。</li></ul><h4 id="1-3-2-DBMS-的功能"><a href="#1-3-2-DBMS-的功能" class="headerlink" title="1.3.2  DBMS 的功能"></a>1.3.2  DBMS 的功能</h4><p>​几乎覆盖了标准 SQL 的大部分语法，包括 DDL 和 DML，以及配套的各种函数，用户管 理及权限管理，数据的备份与恢复</p><h4 id="1-3-3-多样化引擎"><a href="#1-3-3-多样化引擎" class="headerlink" title="1.3.3 多样化引擎"></a>1.3.3 多样化引擎</h4><p>​ClickHouse 和 MySQL 类似，把表级的存储引擎插件化，根据表的不同需求可以设定不同 的存储引擎。目前包括合并树、日志、接口和其他四大类 20 多种引擎。</p><h4 id="1-3-4-高吞吐写入能力"><a href="#1-3-4-高吞吐写入能力" class="headerlink" title="1.3.4 高吞吐写入能力"></a>1.3.4 高吞吐写入能力</h4><p>​ClickHouse 采用类<code>LSM Tree</code>的结构，数据写入后定期在后台 Compaction。通过类 LSM tree 的结构，ClickHouse 在数据导入时全部是顺序 append 写，写入后数据段不可更改，在后台 compaction 时也是多个段 merge sort 后顺序写回磁盘。顺序写的特性，充分利用了磁盘的吞 吐能力，即便在 HDD 上也有着优异的写入性能。 </p><p>​官方公开 benchmark 测试显示能够达到 50MB-200MB&#x2F;s 的写入吞吐能力，按照每行 100Byte 估算，大约相当于 50W-200W 条&#x2F;s 的写入速度。</p><h4 id="1-3-5-数据分区与线程级并行"><a href="#1-3-5-数据分区与线程级并行" class="headerlink" title="1.3.5 数据分区与线程级并行"></a>1.3.5 数据分区与线程级并行</h4><p>​ClickHouse 将数据划分为多个 partition，每个 partition 再进一步划分为多个 index  granularity(索引粒度)，然后通过多个 CPU核心分别处理其中的一部分来实现并行数据处理。 在这种设计下，<code>单条 Query 就能利用整机所有 CPU</code>。极致的并行处理能力，极大的降低了查 询延时。 </p><p>​所以，ClickHouse 即使对于大量数据的查询也能够化整为零平行处理。但是有一个弊端 就是对于单条查询使用多 cpu，就不利于同时并发多条查询。所以对于高 qps 的查询业务， ClickHouse 并不是强项。</p><h3 id="1-4-Clickhouse安装包："><a href="#1-4-Clickhouse安装包：" class="headerlink" title="1.4 Clickhouse安装包："></a>1.4 Clickhouse安装包：</h3><table><thead><tr><th>包名</th><th>作用</th></tr></thead><tbody><tr><td>clickhouse-client</td><td>包含 clickhouse 客户端交互工具</td></tr><tr><td>clickhouse-common</td><td>包含 clickhouse 服务端执行脚本</td></tr><tr><td>clickhouse-server</td><td>包含 clickhouse 服务端配置文件</td></tr></tbody></table><h3 id="1-5-安装后主要分布目录："><a href="#1-5-安装后主要分布目录：" class="headerlink" title="1.5 安装后主要分布目录："></a>1.5 安装后主要分布目录：</h3><table><thead><tr><th>路径</th><th>说明</th></tr></thead><tbody><tr><td>&#x2F;etc&#x2F;clickhouse-server</td><td>clickhouse 服务端配置文件目录</td></tr><tr><td>&#x2F;etc&#x2F;clickhouse-client</td><td>clickhouse 客户端配置文件目录</td></tr><tr><td>&#x2F;var&#x2F;lib&#x2F;clickhouse</td><td>clickhouse 默认数据目录</td></tr><tr><td>&#x2F;var&#x2F;log&#x2F;clickhouse-server</td><td>clickhouse 默认日志目录</td></tr><tr><td>&#x2F;etc&#x2F;init.d&#x2F;clickhouse-server</td><td>clickhouse 服务端启动脚本</td></tr></tbody></table><pre><code>     关于tgz包安装部署方法，官网也写有安装脚本（个人感觉脚本拉取tgz包太慢，于是直接下载到了本地，再上传到linux服务器）</code></pre><p>&#x3D;&#x3D;官网tgz包安装Clickhouse脚本&#x3D;&#x3D;：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">LATEST_VERSION</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://packages.clickhouse.com/tgz/stable/ <span class="token operator">|</span> <span class="token punctuation">\</span>    <span class="token function">grep</span> <span class="token parameter variable">-Eo</span> <span class="token string">'[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+'</span> <span class="token operator">|</span> <span class="token function">sort</span> <span class="token parameter variable">-V</span> <span class="token parameter variable">-r</span> <span class="token operator">|</span> <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">1</span><span class="token variable">)</span></span><span class="token builtin class-name">export</span> LATEST_VERSION<span class="token keyword">case</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span> <span class="token keyword">in</span>  x86_64<span class="token punctuation">)</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>amd64 <span class="token punctuation">;</span><span class="token punctuation">;</span>  aarch64<span class="token punctuation">)</span> <span class="token assign-left variable">ARCH</span><span class="token operator">=</span>arm64 <span class="token punctuation">;</span><span class="token punctuation">;</span>  *<span class="token punctuation">)</span> <span class="token builtin class-name">echo</span> <span class="token string">"Unknown architecture <span class="token variable"><span class="token variable">$(</span><span class="token function">uname</span> <span class="token parameter variable">-m</span><span class="token variable">)</span></span>"</span><span class="token punctuation">;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span class="token keyword">for</span> <span class="token for-or-select variable">PKG</span> <span class="token keyword">in</span> clickhouse-common-static clickhouse-common-static-dbg clickhouse-server clickhouse-client clickhouse-keeper<span class="token keyword">do</span>  <span class="token function">curl</span> <span class="token parameter variable">-fO</span> <span class="token string">"https://packages.clickhouse.com/tgz/stable/<span class="token variable">$PKG</span>-<span class="token variable">$LATEST_VERSION</span>-<span class="token variable">$&#123;ARCH&#125;</span>.tgz"</span> <span class="token punctuation">\</span>    <span class="token operator">||</span> <span class="token function">curl</span> <span class="token parameter variable">-fO</span> <span class="token string">"https://packages.clickhouse.com/tgz/stable/<span class="token variable">$PKG</span>-<span class="token variable">$LATEST_VERSION</span>.tgz"</span><span class="token keyword">done</span><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token string">"clickhouse-common-static-<span class="token variable">$LATEST_VERSION</span>-<span class="token variable">$&#123;ARCH&#125;</span>.tgz"</span> <span class="token punctuation">\</span>  <span class="token operator">||</span> <span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token string">"clickhouse-common-static-<span class="token variable">$LATEST_VERSION</span>.tgz"</span><span class="token function">sudo</span> <span class="token string">"clickhouse-common-static-<span class="token variable">$LATEST_VERSION</span>/install/doinst.sh"</span><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token string">"clickhouse-common-static-dbg-<span class="token variable">$LATEST_VERSION</span>-<span class="token variable">$&#123;ARCH&#125;</span>.tgz"</span> <span class="token punctuation">\</span>  <span class="token operator">||</span> <span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token string">"clickhouse-common-static-dbg-<span class="token variable">$LATEST_VERSION</span>.tgz"</span><span class="token function">sudo</span> <span class="token string">"clickhouse-common-static-dbg-<span class="token variable">$LATEST_VERSION</span>/install/doinst.sh"</span><span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token string">"clickhouse-server-<span class="token variable">$LATEST_VERSION</span>-<span class="token variable">$&#123;ARCH&#125;</span>.tgz"</span> <span class="token punctuation">\</span>  <span class="token operator">||</span> <span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token string">"clickhouse-server-<span class="token variable">$LATEST_VERSION</span>.tgz"</span><span class="token function">sudo</span> <span class="token string">"clickhouse-server-<span class="token variable">$LATEST_VERSION</span>/install/doinst.sh"</span> configure<span class="token function">sudo</span> /etc/init.d/clickhouse-server start<span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token string">"clickhouse-client-<span class="token variable">$LATEST_VERSION</span>-<span class="token variable">$&#123;ARCH&#125;</span>.tgz"</span> <span class="token punctuation">\</span>  <span class="token operator">||</span> <span class="token function">tar</span> <span class="token parameter variable">-xzvf</span> <span class="token string">"clickhouse-client-<span class="token variable">$LATEST_VERSION</span>.tgz"</span><span class="token function">sudo</span> <span class="token string">"clickhouse-client-<span class="token variable">$LATEST_VERSION</span>/install/doinst.sh"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-手动部署clickhouse"><a href="#2-手动部署clickhouse" class="headerlink" title="2. 手动部署clickhouse"></a>2. 手动部署clickhouse</h2><h3 id="2-1-解压安装包"><a href="#2-1-解压安装包" class="headerlink" title="2.1 解压安装包"></a>2.1 解压安装包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master opt<span class="token punctuation">]</span><span class="token comment"># mkdir /opt/module/clickhouse</span><span class="token punctuation">[</span>root@master opt<span class="token punctuation">]</span><span class="token comment"># tar -zxf clickhouse-common-static-21.9.4.35.tgz -C /opt/module/clickhouse</span><span class="token punctuation">[</span>root@master opt<span class="token punctuation">]</span><span class="token comment"># tar -zxf clickhouse-common-static-dbg-21.9.4.35.tgz -C /opt/module/clickhouse</span><span class="token punctuation">[</span>root@master opt<span class="token punctuation">]</span><span class="token comment"># tar -zxf clickhouse-server-21.9.4.35.tgz -C /opt/module/clickhouse</span><span class="token punctuation">[</span>root@master opt<span class="token punctuation">]</span><span class="token comment"># tar -zxf clickhouse-client-21.9.4.35.tgz -C /opt/module/clickhouse</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-解压后依照顺序执行每个clickhouse-install下的doinst-sh命令"><a href="#2-2-解压后依照顺序执行每个clickhouse-install下的doinst-sh命令" class="headerlink" title="2.2 解压后依照顺序执行每个clickhouse&#x2F;install下的doinst.sh命令"></a>2.2 解压后依照顺序执行每个clickhouse&#x2F;install下的doinst.sh命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master clickhouse-common-static-21.9.4.35<span class="token punctuation">]</span><span class="token comment"># install/doinst.sh</span><span class="token punctuation">[</span>root@master clickhouse-common-static-dbg-21.9.4.35<span class="token punctuation">]</span><span class="token comment"># install/doinst.sh</span><span class="token punctuation">[</span>root@master clickhouse-server-21.9.4.35<span class="token punctuation">]</span><span class="token comment"># install/doinst.sh</span><span class="token punctuation">[</span>root@bigdata1 clickhouse<span class="token punctuation">]</span><span class="token comment"># sh clickhouse-common-static-21.9.4.35/install/doinst.sh</span><span class="token punctuation">[</span>root@bigdata1 clickhouse<span class="token punctuation">]</span><span class="token comment"># sh clickhouse-common-static-dbg-21.9.4.35/install/doinst.sh </span><span class="token punctuation">[</span>root@bigdata1 clickhouse<span class="token punctuation">]</span><span class="token comment"># sh clickhouse-server-21.9.4.35/install/doinst.sh </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>执行 clickhouse-server 会创建一个用户 default 并<code>让你设置密码</code>，直接回车密码设置为空</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309536.png" alt="image-20230825134747331"></p><blockquote><p>是否设置ClickHouse服务器的网络连接权限(选择y)</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309876.png"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bigdata1 clickhouse<span class="token punctuation">]</span><span class="token comment"># sh clickhouse-client-21.9.4.35/install/doinst.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置<a href="https://so.csdn.net/so/search?q=%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE&spm=1001.2101.3001.7020">远程访问</a>并移除默认监听文件（listen.xml），同时由于9000端口被hadoop占用，需要将clickhouse的端口更改为9001</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>没有就不理<span class="token punctuation">)</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># rm -rf /etc/clickhouse-server/listen.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>修改前先备份</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cp /etc/clickhouse-server/config.xml /etc/clickhouse-server/config.xml.bak</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给config.xml加权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># chmod 777 /etc/clickhouse-server/config.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编辑config.xml 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/clickhouse-server/config.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>取消掉<!-- <listen_host>0.0.0.0</listen_host> -->的注释变为：<listen_host>0.0.0.0</listen_host><br>将里面所有的9000变成9001</p></blockquote><p>快速修改指令:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/9000/9001/g"</span> /etc/clickhouse-server/config.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-clickhouse启动"><a href="#2-3-clickhouse启动" class="headerlink" title="2.3 clickhouse启动"></a>2.3 clickhouse启动</h3><blockquote><p>方式1:</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master clickhouse-server-21.9.4.35<span class="token punctuation">]</span><span class="token comment"># clickhouse start</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309305.jpeg" alt="img"></p><blockquote><p>方式2(推荐):</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">启动:<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># systemctl start clickhouse-server</span>查看服务状态:<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># systemctl status clickhouse-server</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401141240461.png" alt="image-20240114124027390"></p><h3 id="2-4-连接clickhouse-client"><a href="#2-4-连接clickhouse-client" class="headerlink" title="2.4 连接clickhouse-client"></a>2.4 连接clickhouse-client</h3><p>语法：</p><p>clickhouse-client –host&#x3D;主机地址 –port 端口 –user&#x3D;用户 –password&#x3D;密码 </p><p>参数：</p><ul><li>–host：指定要连接的ClickHouse服务器的主机名或IP地址。</li><li>–port：指定要连接的ClickHouse服务器的端口号，默认为9000。</li><li>–user：指定要使用的用户名进行身份验证，默认为”default”。</li><li>–password：指定要使用的密码进行身份验证。</li><li>–database：指定要使用的默认数据库。</li><li>–query：指定要在连接后立即执行的查询。</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clickhouse-client <span class="token parameter variable">--host</span><span class="token operator">=</span>localhost <span class="token parameter variable">--port</span> <span class="token number">9001</span> <span class="token parameter variable">--user</span><span class="token operator">=</span>default <span class="token parameter variable">--password</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-5-执行SQL语句验证"><a href="#2-5-执行SQL语句验证" class="headerlink" title="2.5 执行SQL语句验证"></a>2.5 执行SQL语句验证</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">show</span> <span class="token keyword">databases</span><span class="token punctuation">;</span><span class="token keyword">SHOW</span> <span class="token keyword">DATABASES</span>Query id: <span class="token number">6</span>d54b636<span class="token operator">-</span>f017<span class="token operator">-</span><span class="token number">441</span>a<span class="token operator">-</span>adfc<span class="token operator">-</span><span class="token number">1</span>eb6e60e4676┌─name────┐│ <span class="token keyword">default</span> ││ system  │└─────────┘<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">.</span> Elapsed: <span class="token number">0.002</span> sec<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309860.png" alt="image-20230825134052335"></p><h3 id="2-6-修改default用户密码"><a href="#2-6-修改default用户密码" class="headerlink" title="2.6 修改default用户密码"></a>2.6 修改default用户密码</h3><blockquote><p>源文件只读文件,添加可写(w)权限再进行修改</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">755</span> /etc/clickhouse-server/users.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改配置后重启服务</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># vi /etc/clickhouse-server/users.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改第68行参数(安装时回车已经设置密码为空,现在进行添加密码)</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401092245691.png" alt="image-20240109224506535"></p><p>例子参考:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401092245864.png" alt="image-20240109224556801"></p><blockquote><p>重启服务</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.关闭服务clickhouse stopsystemctl stop clickhouse-server.service<span class="token number">2</span>.启动服务clickhouse startsystemctl start clickhouse-server.service<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>再次登录:</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># clickhouse-client --host=localhost --port 9001 --user=default --password 123456</span>ClickHouse client version <span class="token number">21.9</span>.4.35 <span class="token punctuation">(</span>official build<span class="token punctuation">)</span>.Connecting to localhost:9001 as user default.Connected to ClickHouse server version <span class="token number">21.9</span>.4 revision <span class="token number">54449</span>.master <span class="token builtin class-name">:</span><span class="token punctuation">)</span> show databases<span class="token punctuation">;</span>SHOW DATABASESQuery id: 6ad41603-b367-4021-956a-c024b1af5175┌─name────┐│ default ││ system  │└─────────┘<span class="token number">2</span> rows <span class="token keyword">in</span> set. Elapsed: <span class="token number">0.003</span> sec. master <span class="token builtin class-name">:</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>登录成功,密码设置成功</p><h3 id="2-7-开启远程连接"><a href="#2-7-开启远程连接" class="headerlink" title="2.7 开启远程连接"></a>2.7 开启远程连接</h3><p>修改配置文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># vim /etc/clickhouse-server/config.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将以下注释打开(大概156行左右):</p><p>(<code>这里会出现问题,直接跳到下面的问题解决</code>)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listen_host</span><span class="token punctuation">></span></span>::<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listen_host</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改后如下:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401262048414.png" alt="image-20240126204844344"></p><p> :warning: 修改后重启服务报错</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401262147649.png" alt="image-20240126214736560"></p><p>查看日志发现关键报错信息:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># tailf /var/log/clickhouse-server/clickhouse-server.log</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401262148148.png" alt="image-20240126214815077"></p><p>OS禁用IPv6后配置：<listen_host>::</listen_host>，该配置支持了IPv4和IPv6，而OS又禁用了IPv6会导致报错如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>Error<span class="token operator">></span> Application: DB::Exception: Listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:8123 failed: Poco::Exception. Code: <span class="token number">1000</span>, e.code<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span>, DNS error: EAI: Address family <span class="token keyword">for</span> <span class="token function">hostname</span> not supported <span class="token punctuation">(</span>version <span class="token number">21.9</span>.4.35 <span class="token punctuation">(</span>official build<span class="token punctuation">))</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">尖叫提示（1）：在禁用了ipv6时，如果使用<span class="token operator">&lt;</span>listen_host<span class="token operator">></span>::<span class="token operator">&lt;</span>/listen_host<span class="token operator">></span>配置，会报如下错误Application: DB::Exception: Listen <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:8123 failed: Poco::Exception. Code: <span class="token number">1000</span>, e.code<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">0</span>, e.displayText<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> DNS error: EAI: <span class="token parameter variable">-9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>-- 如果禁用了ipv6，使用下面配置--<span class="token operator">></span><span class="token operator">&lt;</span>listen_host<span class="token operator">></span><span class="token number">0.0</span>.0.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/listen_host<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span>-- 如果没有禁用ipv6，使用下面配置<span class="token operator">&lt;</span>listen_host<span class="token operator">></span>::<span class="token operator">&lt;</span>/listen_host<span class="token operator">></span>--<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:star:问题解决:</p><blockquote><p>将<listen_host>::</listen_host>改成<listen_host>0.0.0.0</listen_host></p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401262200833.png" alt="image-20240126220044758"></p><h3 id="2-8-安装脚本-参考"><a href="#2-8-安装脚本-参考" class="headerlink" title="2.8 安装脚本(参考)"></a>2.8 安装脚本(参考)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#脚本放再tgz包目录执行</span><span class="token function">mkdir</span> /opt/clickhouse<span class="token assign-left variable">client_tgz</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"client"</span><span class="token variable">`</span></span><span class="token assign-left variable">commondbg_tgz</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'common'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">"NR==2&#123;print <span class="token variable">$1</span>&#125;"</span><span class="token variable">`</span></span><span class="token assign-left variable">common_tgz</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'common'</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">"NR==1&#123;print <span class="token variable">$1</span>&#125;"</span><span class="token variable">`</span></span><span class="token assign-left variable">server_tgz</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"server"</span><span class="token variable">`</span></span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF************************** 开始安装clickhouse **************************EOF</span><span class="token builtin class-name">echo</span> <span class="token string">">>开始解压client"</span><span class="token function">tar</span> <span class="token parameter variable">-zxf</span> <span class="token variable">$client_tgz</span> <span class="token parameter variable">-C</span> /opt/clickhouse<span class="token builtin class-name">echo</span> <span class="token string">">>开始解压common-dbg"</span><span class="token function">tar</span> <span class="token parameter variable">-zxf</span> <span class="token variable">$commondbg_tgz</span> <span class="token parameter variable">-C</span> /opt/clickhouse<span class="token builtin class-name">echo</span> <span class="token string">">>开始解压common"</span><span class="token function">tar</span> <span class="token parameter variable">-zxf</span> <span class="token variable">$common_tgz</span> <span class="token parameter variable">-C</span> /opt/clickhouse<span class="token builtin class-name">echo</span> <span class="token string">">>开始解压server"</span><span class="token function">tar</span> <span class="token parameter variable">-zxf</span> <span class="token variable">$server_tgz</span> <span class="token parameter variable">-C</span> /opt/clickhouse<span class="token assign-left variable">client</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> /opt/clickhouse<span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"client"</span><span class="token variable">`</span></span><span class="token assign-left variable">commondbg</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> /opt/clickhouse <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"common-static-dbg"</span><span class="token variable">`</span></span><span class="token assign-left variable">common</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> /opt/clickhouse <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"common"</span> <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">"NR==1&#123;print <span class="token variable">$1</span>&#125;"</span><span class="token variable">`</span></span><span class="token assign-left variable">server</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> /opt/clickhouse <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"server"</span><span class="token variable">`</span></span><span class="token function">sh</span> /opt/clickhouse/<span class="token variable">$common</span>/install/doinst.sh<span class="token function">sh</span> /opt/clickhouse/<span class="token variable">$commondbg</span>/install/doinst.sh<span class="token comment"># 执行 clickhouse-server 会创建一个用户 default 并让你设置密码，直接回车密码设置为空</span><span class="token builtin class-name">echo</span>  <span class="token string">"=====设置default用户密码(回车设置密码为空)======"</span> <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF********************************************* 设置default用户密码(回车设置密码为空) **** 是否设置ClickHouse服务器的网络连接权限*********************************************EOF</span><span class="token function">sh</span> /opt/clickhouse/<span class="token variable">$server</span>/install/doinst.sh <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token number">1</span> /dev/null<span class="token function">sh</span> /opt/clickhouse/<span class="token variable">$client</span>/install/doinst.sh<span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"是否修改clickhouse默认端口(y/n):"</span> yn<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$yn</span> <span class="token operator">==</span> <span class="token string">'y'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"修改的端口为:"</span> port  <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">"s/9000/<span class="token variable">$port</span>/g"</span> /etc/clickhouse-server/config.xml  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>   <span class="token builtin class-name">echo</span> <span class="token string">">clickhouse端口已更改成:<span class="token variable">$port</span>"</span>  <span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"修改失败！！"</span>  <span class="token keyword">fi</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">">clickhouse默认端口为: 9000 "</span><span class="token keyword">fi</span><span class="token comment">#启动</span><span class="token builtin class-name">echo</span> <span class="token string">"=====启动====="</span>clickhouse start<span class="token builtin class-name">echo</span> <span class="token string">"=====状态====="</span>clickhouse status<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>  <span class="token builtin class-name">read</span> <span class="token parameter variable">-p</span> <span class="token string">"是否查看登录帮助(y/n)"</span> <span class="token builtin class-name">help</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$help</span> <span class="token operator">==</span> <span class="token string">'y'</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF语法：clickhouse-client --host=主机地址 --port 端口 --user=用户 --password=密码 参数:--host：指定要连接的ClickHouse服务器的主机名或IP地址。--port：指定要连接的ClickHouse服务器的端口号，默认为9000。--user：指定要使用的用户名进行身份验证，默认为"default"。--password：指定要使用的密码进行身份验证。--database：指定要使用的默认数据库。--query：指定要在连接后立即执行的查询。EOF</span><span class="token keyword">fi</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF************************** clickhouse安装完成 **************************EOF</span><span class="token keyword">else</span><span class="token function">cat</span> <span class="token operator">&lt;&lt;</span><span class="token string">EOF**************************************** clickhouse安装失败（请检查配置） ****************************************EOF</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-数据类型"><a href="#3-数据类型" class="headerlink" title="3. 数据类型"></a>3. 数据类型</h2><h3 id="3-1-整型"><a href="#3-1-整型" class="headerlink" title="3.1 整型"></a>3.1 整型</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">固定长度的整型，包括有符号整型或无符号整型。整型范围（<span class="token operator">-</span><span class="token number">2</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">~</span><span class="token number">2</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span>）：Int8 <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">128</span> : <span class="token number">127</span><span class="token punctuation">]</span>Int16 <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">32768</span> : <span class="token number">32767</span><span class="token punctuation">]</span>Int32 <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2147483648</span> : <span class="token number">2147483647</span><span class="token punctuation">]</span>Int64 <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">9223372036854775808</span> : <span class="token number">9223372036854775807</span><span class="token punctuation">]</span>无符号整型范围（<span class="token number">0</span><span class="token operator">~</span><span class="token number">2</span>n<span class="token operator">-</span><span class="token number">1</span>）：UInt8 <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">0</span> : <span class="token number">255</span><span class="token punctuation">]</span>UInt16 <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">0</span> : <span class="token number">65535</span><span class="token punctuation">]</span>UInt32 <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">0</span> : <span class="token number">4294967295</span><span class="token punctuation">]</span>UInt64 <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">0</span> : <span class="token number">18446744073709551615</span><span class="token punctuation">]</span>使用场景： 个数、数量、也可以存储型 id。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-浮点型"><a href="#3-2-浮点型" class="headerlink" title="3.2 浮点型"></a>3.2 浮点型</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">Float32 <span class="token operator">-</span> <span class="token keyword">float</span>Float64 – <span class="token keyword">double</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>建议尽可能以整数形式存储数据。例如，将固定精度的数字转换为整数值，如时间用毫秒为单位表示，因为浮点型进行计算时可能引起四舍五入的误差。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291531147.png" alt="image-20240129153115084"></p><p><code>使用场景：一般数据值比较小，不涉及大量的统计计算，精度要求不高的时候。比如 保存商品的重量。</code></p><h3 id="3-3-布尔型"><a href="#3-3-布尔型" class="headerlink" title="3.3 布尔型"></a>3.3 布尔型</h3><p>没有单独的类型来存储布尔值。可以使用 UInt8 类型，取值限制为 0 或 1。</p><h3 id="3-4-Decimal-型"><a href="#3-4-Decimal-型" class="headerlink" title="3.4 Decimal 型"></a>3.4 Decimal 型</h3><p>有符号的浮点数，可在加、减和乘法运算过程中保持精度。对于除法，最低有效数字会 被丢弃（不舍入）。</p><p>有三种声明：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">➢ Decimal32<span class="token punctuation">(</span>s<span class="token punctuation">)</span>，相当于 Decimal<span class="token punctuation">(</span><span class="token number">9</span>-s,s<span class="token punctuation">)</span>，有效位数为 <span class="token number">1</span>~9➢ Decimal64<span class="token punctuation">(</span>s<span class="token punctuation">)</span>，相当于 Decimal<span class="token punctuation">(</span><span class="token number">18</span>-s,s<span class="token punctuation">)</span>，有效位数为 <span class="token number">1</span>~18➢ Decimal128<span class="token punctuation">(</span>s<span class="token punctuation">)</span>，相当于 Decimal<span class="token punctuation">(</span><span class="token number">38</span>-s,s<span class="token punctuation">)</span>，有效位数为 <span class="token number">1</span>~38<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>s 标识小数位</code></p><blockquote><p>使用场景： </p></blockquote><p>一般金额字段、汇率、利率等字段为了保证小数点精度，都使用 Decimal 进行存储。</p><h3 id="3-5-字符串"><a href="#3-5-字符串" class="headerlink" title="3.5 字符串"></a>3.5 字符串</h3><blockquote><p>1）String :star:</p></blockquote><p>字符串可以任意长度的。它可以包含任意的字节集，包含空字节。</p><blockquote><p>2）FixedString(N)</p></blockquote><p>​固定长度 N 的字符串，N 必须是严格的正自然数。当服务端读取长度小于 N 的字符 串时候，通过在字符串末尾添加空字节来达到 N 字节长度。 当服务端读取长度大于 N 的 字符串时候，将返回错误消息。 </p><p>​与 String 相比，极少会使用 FixedString，因为使用起来不是很方便。</p><blockquote><p>使用场景：</p></blockquote><p>​名称、文字描述、字符型编码。 固定长度的可以保存一些定长的内容，比 如一些编码，性别等但是考虑到一定的变化风险，带来收益不够明显，所以定长字符串使用 意义有限。</p><h3 id="3-6-枚举类型"><a href="#3-6-枚举类型" class="headerlink" title="3.6 枚举类型"></a>3.6 枚举类型</h3><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">包括 Enum8 和 Enum16 类型。Enum 保存 <span class="token string">'string'</span>= integer 的对应关系。Enum8 用 <span class="token string">'String'</span>= Int8 对描述。Enum16 用 <span class="token string">'String'</span>= Int16 对描述。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>1）用法演示</p></blockquote><p>创建一个带有一个枚举 Enum8(‘hello’ &#x3D; 1, ‘world’ &#x3D; 2) 类型的列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_enum<span class="token punctuation">(</span> x Enum8<span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'world'</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> TinyLog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>2）这个 x 列只能存储类型定义中列出的值：’hello’或’world’</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> t_enum <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291536163.png" alt="image-20240129153658091"></p><blockquote><p>3）如果尝试保存任何其他值，ClickHouse 抛出异常</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span>  <span class="token keyword">insert</span> <span class="token keyword">into</span> t_enum <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291537974.png" alt="image-20240129153754911"></p><blockquote><p>4）如果需要看到对应行的数值，则必须将 Enum 值转换为整数类型</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> CAST<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token string">'Int8'</span><span class="token punctuation">)</span> <span class="token keyword">FROM</span> t_enum<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291539305.png" alt="image-20240129153917241"></p><blockquote><p>使用场景：</p></blockquote><p>​对一些状态、类型的字段算是一种空间优化，也算是一种数据约束。但是实 际使用中往往因为一些数据内容的变化增加一定的维护成本，甚至是数据丢失问题。所以谨 慎使用。</p><h3 id="3-7-时间类型"><a href="#3-7-时间类型" class="headerlink" title="3.7 时间类型"></a>3.7 时间类型</h3><p>目前 ClickHouse 有三种时间类型:</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➢ Date 接受年<span class="token operator">-</span>月<span class="token operator">-</span>日的字符串比如 ‘2019-12-16’➢ Datetime 接受年<span class="token operator">-</span>月<span class="token operator">-</span>日 时:分:秒的字符串比如 ‘2019-12-16 20:50:10’➢ Datetime64 接受年<span class="token operator">-</span>月<span class="token operator">-</span>日 时:分:秒<span class="token punctuation">.</span>亚秒的字符串比如‘2019-12-16 20:50:10<span class="token punctuation">.</span>66’<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>日期类型，用两个字节存储，表示从 1970-01-01 (无符号) 到当前的日期值。 还有很多数据结构，可以参考官方文档：<a href="https://clickhouse.yandex/docs/zh/data_types/">https://clickhouse.yandex/docs/zh/data_types/</a></p><h3 id="3-8-数组"><a href="#3-8-数组" class="headerlink" title="3.8 数组"></a>3.8 数组</h3><p>Array(T)：由 T 类型元素组成的数组。 </p><p>​T 可以是任意类型，包含数组类型。 但不推荐使用多维数组，ClickHouse 对多维数组 的支持有限。例如，不能在 MergeTree 表中存储多维数组。</p><blockquote><p>（1）创建数组方式 1，使用 array 函数</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">array<span class="token punctuation">(</span>T<span class="token punctuation">)</span>master :<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> array<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> x<span class="token punctuation">,</span> toTypeName<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291542838.png" alt="image-20240129154216776"></p><blockquote><p>（2）创建数组方式 2：使用方括号</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token punctuation">[</span><span class="token punctuation">]</span>master :<span class="token punctuation">)</span> <span class="token keyword">SELECT</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">AS</span> x<span class="token punctuation">,</span> toTypeName<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291543281.png" alt="image-20240129154312218"></p><h2 id="4-表引擎"><a href="#4-表引擎" class="headerlink" title="4. 表引擎"></a>4. 表引擎</h2><h3 id="4-1-表引擎的使用"><a href="#4-1-表引擎的使用" class="headerlink" title="4.1 表引擎的使用"></a>4.1 表引擎的使用</h3><p>表引擎是 ClickHouse 的一大特色。可以说， 表引擎决定了如何存储表的数据。包括：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➢ 数据的存储方式和位置，写到哪里以及从哪里读取数据。➢ 支持哪些查询以及如何支持。➢ 并发数据访问。➢ 索引的使用（如果存在）。➢ 是否可以执行多线程请求。➢ 数据复制参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表引擎的使用方式就是必须显式在创建表时定义该表使用的引擎，以及引擎使用的相关 参数。</p><p>:warning: 特别注意：引擎的名称大小写敏感</p><h3 id="4-2-TinyLog"><a href="#4-2-TinyLog" class="headerlink" title="4.2 TinyLog"></a>4.2 TinyLog</h3><p>​以列文件的形式保存在磁盘上，<code>不支持索引</code>，<code>没有并发控制</code>。一般保存少量数据的小表， 生产环境上作用有限。可以用于平时练习测试用。</p><p>如:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_tinylog <span class="token punctuation">(</span> id String<span class="token punctuation">,</span> name String<span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span>TinyLog<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291545458.png" alt="image-20240129154558392"></p><h3 id="4-3-Memory"><a href="#4-3-Memory" class="headerlink" title="4.3 Memory"></a>4.3 Memory</h3><p>​内存引擎，数据以未压缩的原始形式直接<code>保存在内存当中</code>，服务器重启数据就会消失。 读写操作不会相互阻塞，<code>不支持索引</code>。简单查询下有非常非常高的性能表现（超过 10G&#x2F;s）。</p><p>​一般用到它的地方不多，除了用来测试，就是在需要非常高的性能，同时数据量又不太 大（上限大概 1 亿行）的场景。</p><h3 id="4-4-MergeTree"><a href="#4-4-MergeTree" class="headerlink" title="4.4 MergeTree"></a>4.4 MergeTree</h3><p>​ClickHouse 中最<code>强大的表引擎当属</code> MergeTree（合并树）引擎及该系列（*MergeTree） 中的其他引擎，<code>支持索引和分区</code>，地位可以相当于 innodb 之于 Mysql。而且基于 MergeTree， 还衍生除了很多小弟，也是非常有特色的引擎。</p><blockquote><p>1）建表语句</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_order_mt<span class="token punctuation">(</span> id UInt32<span class="token punctuation">,</span> sku_id String<span class="token punctuation">,</span> total_amount <span class="token keyword">Decimal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> create_time <span class="token keyword">Datetime</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span>MergeTree <span class="token keyword">partition</span> <span class="token keyword">by</span> toYYYYMMDD<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>sku_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291548219.png" alt="image-20240129154852133"></p><blockquote><p>2）插入数据</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_order_mt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'sku_001'</span><span class="token punctuation">,</span><span class="token number">1000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 12:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 11:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_004'</span><span class="token punctuation">,</span><span class="token number">2500.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">12000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">600.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-02 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291550807.png" alt="image-20240129155022732"></p><p>查询:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_order_mt<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> t_order_mtQuery id: c1c4210f<span class="token operator">-</span><span class="token number">596</span>c<span class="token operator">-</span><span class="token number">4165</span><span class="token operator">-</span><span class="token number">8057</span><span class="token operator">-</span><span class="token number">8</span>c41072a865b┌──id─┬─sku_id──┬─total_amount─┬─────────create_time─┐│ <span class="token number">101</span> │ sku_001 │         <span class="token number">1000</span> │ <span class="token number">2023</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">12</span>:<span class="token number">00</span>:<span class="token number">00</span> ││ <span class="token number">102</span> │ sku_002 │         <span class="token number">2000</span> │ <span class="token number">2023</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">11</span>:<span class="token number">00</span>:<span class="token number">00</span> ││ <span class="token number">102</span> │ sku_002 │         <span class="token number">2000</span> │ <span class="token number">2023</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">13</span>:<span class="token number">00</span>:<span class="token number">00</span> ││ <span class="token number">102</span> │ sku_002 │        <span class="token number">12000</span> │ <span class="token number">2023</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">13</span>:<span class="token number">00</span>:<span class="token number">00</span> ││ <span class="token number">102</span> │ sku_004 │         <span class="token number">2500</span> │ <span class="token number">2023</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">01</span> <span class="token number">12</span>:<span class="token number">00</span>:<span class="token number">00</span> │└─────┴─────────┴──────────────┴─────────────────────┘┌──id─┬─sku_id──┬─total_amount─┬─────────create_time─┐│ <span class="token number">102</span> │ sku_002 │          <span class="token number">600</span> │ <span class="token number">2023</span><span class="token operator">-</span><span class="token number">06</span><span class="token operator">-</span><span class="token number">02</span> <span class="token number">12</span>:<span class="token number">00</span>:<span class="token number">00</span> │└─────┴─────────┴──────────────┴─────────────────────┘<span class="token number">6</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">.</span> Elapsed: <span class="token number">0.003</span> sec<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​MergeTree 其实还有很多参数(绝大多数用默认值即可)，但是三个参数是更加重要的， 也涉及了关于 MergeTree 的很多概念。</p><h4 id="4-4-1-partition-by-分区-可选"><a href="#4-4-1-partition-by-分区-可选" class="headerlink" title="4.4.1 partition by 分区(可选)"></a>4.4.1 partition by 分区(可选)</h4><blockquote><p>1）作用</p></blockquote><p>学过 hive 的应该都不陌生，分区的目的主要是降低扫描的范围，优化查询速度</p><blockquote><p>2）如果不填</p></blockquote><p>只会使用一个分区。</p><blockquote><p>3）分区目录</p></blockquote><p>​MergeTree 是以列文件+索引文件+表定义文件组成的，但是如果设定了分区那么这些文 件就会保存到不同的分区目录中。</p><blockquote><p>4）并行</p></blockquote><p>分区后，面对涉及跨分区的查询统计，ClickHouse 会以分区为单位并行处理。</p><blockquote><p>5）数据写入与分区合并</p></blockquote><p>​任何一个批次的数据写入都会产生一个临时分区，不会纳入任何一个已有的分区。写入 后的某个时刻（大概 10-15 分钟后），ClickHouse 会自动执行合并操作（等不及也可以手动 通过 optimize 执行），把临时分区的数据，合并到已有分区中。</p><p>​在 ClickHouse 中，<code>OPTIMIZE TABLE</code> 的目的是优化表的性能和磁盘使用。<code>FINAL</code> 关键字表示执行最终的优化，以便尽可能地减小表的体积和提高查询性能。</p><p>​需要注意的是，<code>OPTIMIZE TABLE</code> 可能是一项消耗资源的操作，它可能会导致表在执行期间被锁定。因此，在执行这类操作之前，建议在系统低峰期进行，以避免对正在进行的其他操作造成干扰。</p><p>​执行完这个命令后，ClickHouse 将尝试对表 <code>t_order_rmt</code> 进行最终优化，包括合并分区、清理无效数据等。这可以帮助提高查询性能，并释放不再需要的磁盘空间。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">optimize</span> <span class="token keyword">table</span> xxxx final<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>6）例如</p></blockquote><p>再次执行上面的插入操作:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_order_mt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'sku_001'</span><span class="token punctuation">,</span><span class="token number">1000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 12:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 11:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_004'</span><span class="token punctuation">,</span><span class="token number">2500.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">12000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">600.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-02 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看数据并没有纳入任何分区:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291555032.png" alt="image-20240129155530953"></p><p>手动 optimize 之后:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">optimize</span> <span class="token keyword">table</span> t_order_mt final<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>再次查询:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_order_mt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291557458.png" alt="image-20240129155726376"></p><h4 id="4-4-2-primary-key-主键-可选"><a href="#4-4-2-primary-key-主键-可选" class="headerlink" title="4.4.2 primary key 主键(可选)"></a>4.4.2 primary key 主键(可选)</h4><p>​ClickHouse 中的主键，和其他数据库不太一样，<strong>它只提供了数据的一级索引，但是却不 是唯一约束</strong>。这就意味着是可以存在相同 primary key 的数据的。</p><p>​主键的设定主要依据是查询语句中的 where 条件。</p><p>​根据条件通过对主键进行某种形式的二分查找，能够定位到对应的 index granularity,避 免了全表扫描。</p><p>​index granularity： 直接翻译的话就是索引粒度，指在<code>稀疏索引</code>中两个相邻索引对应数 据的间隔。ClickHouse 中的 MergeTree 默认是 8192。官方不建议修改这个值，除非该列存在 大量重复值，比如在一个分区中几万行才有一个不同数据。</p><blockquote><p>稀疏索引：</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291559545.png" alt="image-20240129155928459"></p><p>​稀疏索引的好处就是可以用很少的索引数据，定位更多的数据，代价就是只能定位到索 引粒度的第一行，然后再进行进行一点扫描。</p><h4 id="4-4-3-order-by（必选）"><a href="#4-4-3-order-by（必选）" class="headerlink" title="4.4.3 order by（必选）"></a>4.4.3 order by（必选）</h4><p>​order by 设定了<code>分区内</code>的数据按照哪些字段顺序进行有序保存。<br>​order by 是 MergeTree 中唯一一个必填项，甚至比 primary key 还重要，因为当用户不<br>设置主键的情况，很多处理会依照 order by 的字段进行处理（比如后面会讲的去重和汇总）。<br>​<code>要求：主键必须是 order by 字段的前缀字段。</code><br>​比如 order by 字段是 (id,sku_id) 那么主键必须是 id 或者(id,sku_id)</p><h4 id="4-4-4-二级索引"><a href="#4-4-4-二级索引" class="headerlink" title="4.4.4 二级索引"></a>4.4.4 二级索引</h4><p>​目前在 ClickHouse 的官网上二级索引的功能在<code> v20.1.2.4 之前</code>是被标注为实验性的，在 这个版本之后默认是开启的。</p><blockquote><p>1）老版本使用二级索引前需要增加设置</p></blockquote><p>是否允许使用实验性的二级索引&#96;&#96;（v20.1.2.4 开始，这个参数已被删除，默认开启）&#96;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> allow_experimental_data_skipping_indices<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>2）创建测试表</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_order_mt2<span class="token punctuation">(</span> id UInt32<span class="token punctuation">,</span> sku_id String<span class="token punctuation">,</span> total_amount <span class="token keyword">Decimal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> create_time <span class="token keyword">Datetime</span><span class="token punctuation">,</span><span class="token keyword">INDEX</span> a total_amount <span class="token keyword">TYPE</span> minmax GRANULARITY <span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span>MergeTree <span class="token keyword">partition</span> <span class="token keyword">by</span> toYYYYMMDD<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> sku_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291606358.png" alt="image-20240129160609251"></p><p>其中 GRANULARITY N 是设定二级索引对于一级索引粒度的粒度。</p><blockquote><p>3）插入数据</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_order_mt2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'sku_001'</span><span class="token punctuation">,</span><span class="token number">1000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 12:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 11:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_004'</span><span class="token punctuation">,</span><span class="token number">2500.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">12000.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-01 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">600.00</span><span class="token punctuation">,</span><span class="token string">'2023-06-02 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4）对比效果</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># clickhouse-client --host master --user default --port 9001 --password 123456 --send_logs_level=trace &lt;&lt;&lt; 'select * from t_order_mt2 where total_amount > toDecimal32(900., 2)';</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291645111.png" alt="image-20240129164539979"></p><h4 id="4-4-5-数据-TTL"><a href="#4-4-5-数据-TTL" class="headerlink" title="4.4.5 数据 TTL"></a>4.4.5 数据 TTL</h4><p>TTL 即 Time To Live，MergeTree 提供了可以管理数据表或者列的<code>生命周期</code>的功能。</p><blockquote><p>1）列级别 TTL</p></blockquote><p>（1）创建测试表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_order_mt3<span class="token punctuation">(</span> id UInt32<span class="token punctuation">,</span> sku_id String<span class="token punctuation">,</span> total_amount <span class="token keyword">Decimal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> TTL create_time<span class="token operator">+</span><span class="token keyword">interval</span> <span class="token number">10</span> <span class="token keyword">SECOND</span><span class="token punctuation">,</span> create_time <span class="token keyword">Datetime</span> <span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span>MergeTree<span class="token keyword">partition</span> <span class="token keyword">by</span> toYYYYMMDD<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> sku_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要的修改是将 <code>TTL</code> 设置应用到 <code>total_amount</code> 字段，并使用 <code>create_time</code> 加上 10 秒作为过期时间。这样，一旦数据的 <code>create_time</code> 字段的值超过了当前时间加上 10 秒，相关的数据行就会被自动删除。</p><p>（2）插入数据（注意：根据实际时间改变）</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_order_mt3 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token string">'sku_001'</span><span class="token punctuation">,</span><span class="token number">1000.00</span><span class="token punctuation">,</span><span class="token string">'2024-01-29 17:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2024-01-29 17:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token string">'sku_003'</span><span class="token punctuation">,</span><span class="token number">600.00</span><span class="token punctuation">,</span><span class="token string">'2024-01-29 17:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>（3）手动合并，查看效果 到期后，指定的字段数据归 0</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">optimize</span> <span class="token keyword">table</span> t_order_mt3 final<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291703160.png" alt="image-20240129170300068"></p><blockquote><p>2）表级 TTL</p></blockquote><p>下面的这条语句是数据会在 create_time 之后 10 秒丢失 </p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_order_mt3 <span class="token keyword">MODIFY</span> TTL create_time <span class="token operator">+</span> <span class="token keyword">INTERVAL</span> <span class="token number">10</span> <span class="token keyword">SECOND</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 涉及判断的字段必须是 Date 或者 Datetime 类型，推荐使用分区的日期字段。</p><p>能够使用的时间周期：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell"><span class="token operator">-</span> SECOND<span class="token operator">-</span> MINUTE<span class="token operator">-</span> HOUR<span class="token operator">-</span> DAY<span class="token operator">-</span> WEEK<span class="token operator">-</span> MONTH<span class="token operator">-</span> QUARTER<span class="token operator">-</span> YEAR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-ReplacingMergeTree"><a href="#4-5-ReplacingMergeTree" class="headerlink" title="4.5 ReplacingMergeTree"></a>4.5 ReplacingMergeTree</h3><p>​ReplacingMergeTree 是 MergeTree 的一个变种，它存储特性完全&#96;&#96;继承 MergeTree<code>，只是 </code>多了一个去重的功能&#96;。 尽管 MergeTree 可以设置主键，但是 primary key 其实没有唯一约束 的功能。如果你想处理掉重复的数据，可以借助这个 ReplacingMergeTree。</p><blockquote><p>1）去重时机</p></blockquote><p>​<code>数据的去重只会在合并的过程中出现</code>。合并会在未知的时间在后台进行，所以你无法预 先作出计划。有一些数据可能仍未被处理。</p><blockquote><p>2）去重范围</p></blockquote><p>​<code>如果表经过了分区，去重只会在分区内部进行去重，不能执行跨分区的去重。</code></p><p>​所以 ReplacingMergeTree 能力有限， ReplacingMergeTree 适用于在后台清除重复的数 据以节省空间，但是它<code>不保证没有重复的数据出现。</code></p><blockquote><p>3）案例演示</p></blockquote><p>（1）创建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_order_rmt<span class="token punctuation">(</span> id UInt32<span class="token punctuation">,</span> sku_id String<span class="token punctuation">,</span> total_amount <span class="token keyword">Decimal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> create_time <span class="token keyword">Datetime</span> <span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span>ReplacingMergeTree<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">partition</span> <span class="token keyword">by</span> toYYYYMMDD<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> sku_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:warning:注意:</p><p>​ReplacingMergeTree() 填入的参数为版本字段，重复数据保留版本字段值最大的。 如果不填版本字段，默认按照插入顺序保留最后一条。 </p><p>（2）向表中插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_order_rmt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'sku_001'</span><span class="token punctuation">,</span><span class="token number">1000.00</span><span class="token punctuation">,</span><span class="token string">'2024-01-29 12:00:00'</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2024-01-29 11:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_004'</span><span class="token punctuation">,</span><span class="token number">2500.00</span><span class="token punctuation">,</span><span class="token string">'2024-01-29 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2024-01-29 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">12000.00</span><span class="token punctuation">,</span><span class="token string">'2024-01-29 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">600.00</span><span class="token punctuation">,</span><span class="token string">'2024-01-29 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）执行第一次查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_order_rmt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291731850.png" alt="image-20240129173118745"></p><p>（4）手动合并</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">OPTIMIZE</span> <span class="token keyword">TABLE</span> t_order_rmt FINAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）再执行一次查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_order_rmt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291731132.png" alt="image-20240129173127038"></p><blockquote><p>4）通过测试得到结论</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➢ 实际上是使用 order by 字段作为唯一键➢ 去重不能跨分区➢ 只有同一批插入（新版本）或合并分区时才会进行去重➢ 认定重复的数据保留，版本字段值最大的➢ 如果版本字段相同则按插入顺序保留最后一笔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-SummingMergeTree"><a href="#4-6-SummingMergeTree" class="headerlink" title="4.6 SummingMergeTree"></a>4.6 SummingMergeTree</h3><p>​对于不查询明细，只关心以维度进行汇总聚合结果的场景。如果只使用普通的MergeTree 的话，无论是存储空间的开销，还是查询时临时聚合的开销都比较大。</p><p>​ClickHouse 为了这种场景，提供了一种能够“预聚合”的引擎 SummingMergeTree</p><blockquote><p>1）案例演示</p></blockquote><p>（1）创建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> t_order_smt<span class="token punctuation">(</span> id UInt32<span class="token punctuation">,</span> sku_id String<span class="token punctuation">,</span> total_amount <span class="token keyword">Decimal</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> create_time <span class="token keyword">Datetime</span> <span class="token punctuation">)</span> <span class="token keyword">engine</span> <span class="token operator">=</span>SummingMergeTree<span class="token punctuation">(</span>total_amount<span class="token punctuation">)</span> <span class="token keyword">partition</span> <span class="token keyword">by</span> toYYYYMMDD<span class="token punctuation">(</span>create_time<span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span>sku_id <span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> t_order_smt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'sku_001'</span><span class="token punctuation">,</span><span class="token number">1000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 11:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_004'</span><span class="token punctuation">,</span><span class="token number">2500.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">12000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 13:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">600.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-02 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（3）执行第一次查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_order_smt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291759598.png" alt="image-20240129175941509"></p><p>（4）手动合并</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">OPTIMIZE</span> <span class="token keyword">TABLE</span> t_order_smt FINAL<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）再执行一次查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_order_smt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291759310.png" alt="image-20240129175953202"></p><blockquote><p>2）通过结果可以得到以下结论</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➢ 以 SummingMergeTree（）中指定的列作为汇总数据列➢ 可以填写多列必须数字列，如果不填，以所有非维度列且为数字列的字段为汇总数据列➢ 以 order by 的列为准，作为维度列➢ 其他的列按插入顺序保留第一行➢ 不在一个分区的数据不会被聚合➢ 只有在同一批次插入<span class="token punctuation">(</span>新版本<span class="token punctuation">)</span>或分片合并时才会进行聚合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>3）开发建议</p></blockquote><p>设计聚合表的话，唯一键值、流水号可以去掉，所有字段全部是维度、度量或者时间戳。</p><blockquote><p>4）问题</p></blockquote><p>能不能直接执行以下 SQL 得到汇总值:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> total_amount <span class="token keyword">from</span> XXX <span class="token keyword">where</span> province_name<span class="token operator">=</span>’’ <span class="token operator">and</span> create_date<span class="token operator">=</span>’xxx’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不行，<code>可能会包含一些还没来得及聚合的临时明细</code></p><p>​如果要是获取汇总值，还是需要使用 sum 进行聚合，这样效率会有一定的提高，但本 身 ClickHouse 是列式存储的，效率提升有限，不会特别明显。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">sum</span><span class="token punctuation">(</span>total_amount<span class="token punctuation">)</span> <span class="token keyword">from</span> province_name<span class="token operator">=</span>’’ <span class="token operator">and</span> create_date<span class="token operator">=</span>‘xxx’<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-SQL-操作"><a href="#5-SQL-操作" class="headerlink" title="5. SQL 操作"></a>5. SQL 操作</h2><p>​基本上来说传统关系型数据库（以 MySQL 为例）的 SQL 语句，ClickHouse 基本都支持， 这里不会从头讲解 SQL 语法只介绍 ClickHouse 与标准 SQL（MySQL）不一致的地方。</p><h3 id="5-1-Insert"><a href="#5-1-Insert" class="headerlink" title="5.1 Insert"></a>5.1 Insert</h3><p>基本与标准 SQL（MySQL）基本一致:</p><p>（1）标准</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>table_name<span class="token punctuation">]</span> <span class="token keyword">values</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>…<span class="token punctuation">.</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）从表到表的插入</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token punctuation">[</span>table_name<span class="token punctuation">]</span> <span class="token keyword">select</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c <span class="token keyword">from</span> <span class="token punctuation">[</span>table_name_2<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-Update-和-Delete"><a href="#5-2-Update-和-Delete" class="headerlink" title="5.2 Update 和 Delete"></a>5.2 Update 和 Delete</h3><p>​ClickHouse 提供了 Delete 和 Update 的能力，这类操作被称为 Mutation 查询，它可以看 做 Alter 的一种。</p><p>​虽然可以实现修改和删除，但是和一般的 OLTP 数据库不一样，<strong>Mutation 语句是一种很 “重”的操作，而且不支持事务。</strong></p><p>​“重”的原因主要是每次修改或者删除都会导致放弃目标数据的原有分区，重建新分区。 所以尽量做批量的变更，不要进行频繁小数据的操作。</p><p>（1）删除操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_order_smt <span class="token keyword">delete</span> <span class="token keyword">where</span> sku_id <span class="token operator">=</span><span class="token string">'sku_001'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）修改操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> t_order_smt <span class="token keyword">update</span> total_amount<span class="token operator">=</span>toDecimal32<span class="token punctuation">(</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">102</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​由于操作比较“重”，所以 Mutation 语句分两步执行，同步执行的部分其实只是进行 新增数据新增分区和并把旧分区打上逻辑上的失效标记。<code>直到触发分区合并的时候</code>，<code>才会删 除旧数据释放磁盘空间</code>，一般不会开放这样的功能给用户，由管理员完成。</p><h3 id="5-3-查询操作"><a href="#5-3-查询操作" class="headerlink" title="5.3 查询操作"></a>5.3 查询操作</h3><p>ClickHouse 基本上与标准 SQL 差别不大:</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">➢ 支持子查询➢ 支持 CTE<span class="token punctuation">(</span>Common Table Expression 公用表表达式 with 子句<span class="token punctuation">)</span>➢ 支持各种 JOIN，但是 JOIN 操作无法使用缓存，所以即使是两次相同的 JOIN 语句，ClickHouse 也会视为两条新 SQL➢ 窗口函数<span class="token punctuation">(</span>官方正在测试中<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>➢ 不支持自定义函数➢ <span class="token function">GROUP</span> BY 操作增加了 with rollup\with cube\with total 用来计算小计和总计。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）插入数据</p><p><code>WHERE 1=1</code> 的条件将匹配表中的所有行，因此执行后将删除整个表中的数据。这种方式不会释放表所占用的磁盘空间，而只是将数据标记为已删除。如果你需要释放磁盘空间，可以考虑使用 <code>OPTIMIZE TABLE</code> 命令。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">alter</span> <span class="token keyword">table</span> t_order_mt <span class="token keyword">delete</span> <span class="token keyword">where</span> <span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> t_order_mt <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'sku_001'</span><span class="token punctuation">,</span><span class="token number">1000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">'sku_004'</span><span class="token punctuation">,</span><span class="token number">2500.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">'sku_003'</span><span class="token punctuation">,</span><span class="token number">600.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-02 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">106</span><span class="token punctuation">,</span><span class="token string">'sku_001'</span><span class="token punctuation">,</span><span class="token number">1000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-04 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-04 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token string">'sku_004'</span><span class="token punctuation">,</span><span class="token number">2500.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-04 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">109</span><span class="token punctuation">,</span><span class="token string">'sku_002'</span><span class="token punctuation">,</span><span class="token number">2000.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-04 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token string">'sku_003'</span><span class="token punctuation">,</span><span class="token number">600.00</span><span class="token punctuation">,</span><span class="token string">'2020-06-01 12:00:00'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（2）with rollup：<code>从右至左去掉维度进行小计</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token punctuation">,</span> sku_id<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>total_amount<span class="token punctuation">)</span> <span class="token keyword">from</span> t_order_mt <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">,</span>sku_id <span class="token keyword">with rollup</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291812873.png" alt="image-20240129181236785"></p><p>（3）with cube : 从右至左去掉维度进行小计，再从左至右去掉维度进行小计</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token punctuation">,</span> sku_id<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>total_amount<span class="token punctuation">)</span> <span class="token keyword">from</span> t_order_mt <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">,</span>sku_id <span class="token keyword">with</span> cube<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291814767.png" alt="image-20240129181412681"></p><p>（4）with totals: 只计算合计</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> id <span class="token punctuation">,</span> sku_id<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>total_amount<span class="token punctuation">)</span> <span class="token keyword">from</span> t_order_mt <span class="token keyword">group</span> <span class="token keyword">by</span> id<span class="token punctuation">,</span>sku_id <span class="token keyword">with</span> totals<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401291815540.png" alt="image-20240129181501461"></p><h3 id="5-4-alter-操作"><a href="#5-4-alter-操作" class="headerlink" title="5.4 alter 操作"></a>5.4 alter 操作</h3><p>同 MySQL 的修改字段基本一致</p><blockquote><p>1）新增字段</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> tableName <span class="token keyword">add</span> <span class="token keyword">column</span> newcolname String <span class="token keyword">after</span> col1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>2）修改字段类型</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> tableName <span class="token keyword">modify</span> <span class="token keyword">column</span> newcolname String<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>3）删除字段</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> tableName <span class="token keyword">drop</span> <span class="token keyword">column</span> newcolname<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-5-导出数据-star"><a href="#5-5-导出数据-star" class="headerlink" title="5.5 导出数据 :star:"></a>5.5 导出数据 :star:</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">clickhouse<span class="token operator">-</span>client <span class="token comment">--query "select * from t_order_mt where create_time='2020-06-01 12:00:00'" --format CSVWithNames> /opt/module/data/rs1.csv</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>简写:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">clickhouse-client <span class="token parameter variable">--q</span> <span class="token string">"select * from t_order_mt where create_time='2020-06-01 12:00:00'"</span> <span class="token parameter variable">--format</span> CSVWithNames<span class="token operator">></span> /opt/module/data/rs1.csv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更多支持格式参照：</p><p><a href="https://clickhouse.com/docs/en/interfaces/formats">Formats for Input and Output Data | ClickHouse Docs</a></p><blockquote><p>例子1: 导出students表所有数据</p></blockquote><p>:one:数据准备:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">-- 创建学生表</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> students <span class="token punctuation">(</span>    student_id UInt32<span class="token punctuation">,</span>    name String<span class="token punctuation">,</span>    age UInt8<span class="token punctuation">,</span>    grade String<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token punctuation">(</span>student_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 插入示例数据</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> students <span class="token punctuation">(</span>student_id<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> grade<span class="token punctuation">)</span> <span class="token keyword">VALUES</span>    <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Alice'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Charlie'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'David'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'Eva'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'Frank'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Grace'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token string">'Henry'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token string">'Ivy'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'Jack'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token string">'Kelly'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token string">'Leo'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">'Mia'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">'Nina'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">'Oscar'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token string">'Peter'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token string">'Quinn'</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">'Rachel'</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'Sam'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'Tyler'</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">-- 查询所有学生数据</span><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> students<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:two:导出students表数据</p><p><strong>csv:</strong></p><p>写法1:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导出带表头的csv文件</span>clickhouse-client <span class="token parameter variable">--port</span> <span class="token number">9001</span> <span class="token parameter variable">--password</span> <span class="token number">123456</span> <span class="token parameter variable">-q</span> <span class="token string">"select * from students;"</span> <span class="token parameter variable">--format</span> CSVWithNames <span class="token operator">></span> /opt/data/stuents.csv<span class="token comment"># 导出不带表头的csv文件</span>clickhouse-client <span class="token parameter variable">--port</span> <span class="token number">9001</span> <span class="token parameter variable">--password</span> <span class="token number">123456</span> <span class="token parameter variable">-q</span> <span class="token string">"select * from students;"</span> <span class="token parameter variable">--format</span> CSV <span class="token operator">></span> /opt/data/stuents.csv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>写法2:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导出带表头的csv文件</span>clickhouse-client <span class="token parameter variable">--port</span> <span class="token number">9001</span> <span class="token parameter variable">--password</span> <span class="token number">123456</span> <span class="token parameter variable">-q</span> <span class="token string">"select * from students format CSVWithNames"</span>  <span class="token operator">></span> /opt/data/stuents.csv<span class="token comment"># 导出不带表头的csv文件</span>clickhouse-client <span class="token parameter variable">--port</span> <span class="token number">9001</span> <span class="token parameter variable">--password</span> <span class="token number">123456</span> <span class="token parameter variable">-q</span> <span class="token string">"select * from students format CSV"</span>  <span class="token operator">></span> /opt/data/stuents.csv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看导出结果:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401292244205.png" alt="image-20240129224402125"></p><h3 id="5-6-导入数据-star"><a href="#5-6-导入数据-star" class="headerlink" title="5.6 导入数据 :star:"></a>5.6 导入数据 :star:</h3><p>:one:清除students表数据做测试</p><p>:warning:生产环境禁用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">TRUNCATE</span> <span class="token keyword">TABLE</span> students<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>:two: 导入&#x2F;opt&#x2F;data&#x2F;stuents.csv文件</p><p>写法1:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导入带表头的csv文件</span>clickhouse-client <span class="token parameter variable">--password</span> <span class="token number">123456</span> <span class="token parameter variable">--port</span> <span class="token number">9001</span> <span class="token parameter variable">-d</span> default <span class="token parameter variable">-q</span> <span class="token string">" insert into students FORMAT CSVWithNames"</span>  <span class="token operator">&lt;</span>  /opt/data/stuents.csv<span class="token comment"># 导入不表头的csv文件</span>clickhouse-client <span class="token parameter variable">--password</span> <span class="token number">123456</span> <span class="token parameter variable">--port</span> <span class="token number">9001</span> <span class="token parameter variable">-d</span> default <span class="token parameter variable">-q</span> <span class="token string">" insert into students FORMAT CSV"</span>  <span class="token operator">&lt;</span>  /opt/data/stuents.csv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写法2:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 导入带表头的csv文件</span>clickhouse-client <span class="token parameter variable">--password</span> <span class="token number">123456</span> <span class="token parameter variable">--port</span> <span class="token number">9001</span> <span class="token parameter variable">-d</span> default <span class="token parameter variable">-q</span> <span class="token string">" insert into students FORMAT CSVWithNames"</span>  <span class="token operator">&lt;</span>  /opt/data/stuents.csv<span class="token comment"># 导入不表头的csv文件</span>clickhouse-client <span class="token parameter variable">--password</span> <span class="token number">123456</span> <span class="token parameter variable">--port</span> <span class="token number">9001</span> <span class="token parameter variable">-d</span> default <span class="token parameter variable">-q</span> <span class="token string">" insert into students FORMAT CSV"</span>  <span class="token operator">&lt;</span>  /opt/data/stuents.csv<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看导入结果:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401292243915.png" alt="image-20240129224322821"></p><h4 id="5-6-1-案例需求1"><a href="#5-6-1-案例需求1" class="headerlink" title="5.6.1 案例需求1:"></a>5.6.1 <strong>案例需求1:</strong></h4><p><strong>需求:</strong></p><p>将MySQL某张表的数据导入到clickhouse中</p><table><thead><tr><th>数据库</th><th>ip</th><th>密码</th></tr></thead><tbody><tr><td>MySQL(服务器)</td><td>192.168.45.13</td><td>123456</td></tr><tr><td>clickhouse(本地)</td><td>192.168.1.10</td><td>123456</td></tr></tbody></table><p><strong>步骤如下:</strong></p><blockquote><p>:star:导入pom.xml包</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- MySQL JDBC Driver --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- clickhouse JDBC Driver --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ru.yandex.clickhouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>clickhouse-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:one:导出MySQL 某张表数据,这里以<code>company.staff</code>表做案例</p><p>首先查看MySQL表结构,在clickhouse创建一个相同结构的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> company<span class="token punctuation">.</span>staff<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+----------------+</span><span class="token operator">|</span> Field <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra          <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+----------------+</span><span class="token operator">|</span> id    <span class="token operator">|</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>       <span class="token operator">|</span> <span class="token keyword">NO</span>   <span class="token operator">|</span> PRI <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span> <span class="token keyword">auto_increment</span> <span class="token operator">|</span><span class="token operator">|</span> name  <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">|</span> sex   <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>                <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">-------+--------------+------+-----+---------+----------------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看该表数据:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> company<span class="token punctuation">.</span>staff<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">----+----------+--------+</span><span class="token operator">|</span> id <span class="token operator">|</span> name     <span class="token operator">|</span> sex    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+--------+</span><span class="token operator">|</span>  <span class="token number">1</span> <span class="token operator">|</span> Thomas   <span class="token operator">|</span> Male   <span class="token operator">|</span><span class="token operator">|</span>  <span class="token number">2</span> <span class="token operator">|</span> Catalina <span class="token operator">|</span> FeMale <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">----+----------+--------+</span><span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:two:在clickhouse创建结构相同的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> gxjzy <span class="token punctuation">(</span>    id UInt32<span class="token punctuation">,</span>    name String<span class="token punctuation">,</span>    sex String<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree<span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:three:编写scala代码</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>PrintWriter<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>DriverManager<span class="token keyword">object</span> ExportMySQLToCSV <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// MySQL connection properties MySQL 连接属性</span>    <span class="token keyword">val</span> mysqlUrl <span class="token operator">=</span> <span class="token string">"jdbc:mysql://master:3306/company"</span>    <span class="token keyword">val</span> mysqlUser <span class="token operator">=</span> <span class="token string">"root"</span>    <span class="token keyword">val</span> mysqlPassword <span class="token operator">=</span> <span class="token string">"123456"</span>    <span class="token comment">// JDBC connection  创建 MySQL 连接,使用 DriverManager 获取 MySQL 连接。</span>    <span class="token keyword">val</span> mysqlConnection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span>mysqlUrl<span class="token punctuation">,</span> mysqlUser<span class="token punctuation">,</span> mysqlPassword<span class="token punctuation">)</span>    <span class="token comment">//尝试执行查询并将结果导出到 CSV：</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Query to fetch data from MySQL 定义 SQL 查询，选择了 company.staff 表中的所有列。</span>      <span class="token keyword">val</span> query <span class="token operator">=</span> <span class="token string">"SELECT * FROM company.staff"</span>      <span class="token comment">// Create a statement and execute the query 创建 Statement 对象并执行查询</span>      <span class="token keyword">val</span> statement <span class="token operator">=</span> mysqlConnection<span class="token punctuation">.</span>createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span>executeQuery<span class="token punctuation">(</span>query<span class="token punctuation">)</span>      <span class="token comment">// CSV file path  指定 CSV 文件路径</span>      <span class="token keyword">val</span> csvFilePath <span class="token operator">=</span> <span class="token string">"/home/gxjzy/桌面/huangjing/company_staff.csv"</span>      <span class="token comment">// Write data to CSV file 创建 PrintWriter 对象，用于将数据写入文件。</span>      <span class="token keyword">val</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> PrintWriter<span class="token punctuation">(</span>csvFilePath<span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 根据表列修改此行   遍历查询结果集，将每一行的数据格式化为字符串，写入 CSV 文件。</span>        <span class="token keyword">val</span> rowData <span class="token operator">=</span> <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">resultSet<span class="token punctuation">.</span>getInt<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">resultSet<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">resultSet<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        writer<span class="token punctuation">.</span>println<span class="token punctuation">(</span>rowData<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"Data exported to CSV file: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">csvFilePath</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=></span> e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Close the MySQL connection 无论是否发生异常，都会在最终块中尝试关闭 MySQL 连接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mysqlConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mysqlConnection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401301057346.png" alt="image-20240130105718242"></p><p>:four:开始导入数据到clickhouse</p><p>(因为使用代码导出数据时,没有设置csv的表头,所以这里使用无表头的方法导入csv文件)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.将成功导出的csv文件上传至服务器中</span>gxjzy@gxjzy:~/桌面/huangjing$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">cp</span> company_staff.csv dj-master:/root/data<span class="token comment"># 2.导入不表头的csv文件</span><span class="token punctuation">[</span>root@master data<span class="token punctuation">]</span><span class="token comment"># clickhouse-client --port 9001  --password 123456 -d default -q " insert into gxjzy FORMAT CSV" &lt; company_staff.csv</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>登录clickhouse数据库查看数据是否导入成功:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> gxjzy<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> gxjzyQuery id: e0e4b00c<span class="token operator">-</span>b48d<span class="token operator">-</span><span class="token number">4</span>ce4<span class="token operator">-</span>ac16<span class="token operator">-</span><span class="token number">7</span>aec5bc26df4┌─id─┬─name─────┬─sex────┐│  <span class="token number">1</span> │ Thomas   │ Male   ││  <span class="token number">2</span> │ Catalina │ FeMale │└────┴──────────┴────────┘<span class="token number">2</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">.</span> Elapsed: <span class="token number">0.003</span> sec<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>成功如图:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401301105197.png" alt="image-20240130110534109"></p><h4 id="5-6-2-比赛需求模拟-star"><a href="#5-6-2-比赛需求模拟-star" class="headerlink" title="5.6.2 比赛需求模拟:star:"></a>5.6.2 比赛需求模拟:star:</h4><p><strong>需求:</strong></p><p>将采集到fink采集到的数据 <strong>shtd_result.order_info</strong> 导入到clickhouse中</p><p><strong>步骤如下:</strong></p><blockquote><p>:star:导入pom.xml包</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- MySQL JDBC Driver --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- clickhouse JDBC Driver --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ru.yandex.clickhouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>clickhouse-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.2.6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:one:首先查看<strong>shtd_result.order_info</strong>表结构,在clickhouse创建一个<code>相同结构</code>的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">desc</span> shtd_result<span class="token punctuation">.</span>order_info<span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">--------------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> Field              <span class="token operator">|</span> <span class="token keyword">Type</span>         <span class="token operator">|</span> <span class="token boolean">Null</span> <span class="token operator">|</span> <span class="token keyword">Key</span> <span class="token operator">|</span> <span class="token keyword">Default</span> <span class="token operator">|</span> Extra <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+--------------+------+-----+---------+-------+</span><span class="token operator">|</span> id                 <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> consignee          <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> consignee_tel      <span class="token operator">|</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> final_total_amount <span class="token operator">|</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">|</span> feight_fee         <span class="token operator">|</span> <span class="token keyword">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> YES  <span class="token operator">|</span>     <span class="token operator">|</span> <span class="token boolean">NULL</span>    <span class="token operator">|</span>       <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------------------+--------------+------+-----+---------+-------+</span><span class="token number">5</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:two:在clickhouse创建结构相同的表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#方式1</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> order_info <span class="token punctuation">(</span>    id String<span class="token punctuation">,</span>    consignee String<span class="token punctuation">,</span>    consignee_tel String<span class="token punctuation">,</span>    final_total_amount Float64<span class="token punctuation">,</span>    feight_fee Float64<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span><span class="token comment">#方式2:</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> order_info <span class="token punctuation">(</span>    id String<span class="token punctuation">,</span>    consignee String<span class="token punctuation">,</span>    consignee_tel String<span class="token punctuation">,</span>    final_total_amount String<span class="token punctuation">,</span>    feight_fee String<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> id<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意:</strong></p><p>ClickHouse 中的数据类型与 MySQL 有些许不同，因此在创建表时需要确保字段类型匹配。在这个例子中，<code>varchar(255)</code> 在 ClickHouse 中映射为 <code>String</code>，而 <code>double(10,2)</code> 映射为 <code>Float64</code>。</p><p>:three:编写scala代码</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>PrintWriter<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>DriverManager<span class="token keyword">object</span> MySQLToClickHouse <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// MySQL connection properties MySQL 连接属性</span>    <span class="token keyword">val</span> mysqlUrl <span class="token operator">=</span> <span class="token string">"jdbc:mysql://192.168.45.13:3306/shtd_result"</span>    <span class="token keyword">val</span> mysqlUser <span class="token operator">=</span> <span class="token string">"root"</span>    <span class="token keyword">val</span> mysqlPassword <span class="token operator">=</span> <span class="token string">"123456"</span>    <span class="token comment">// JDBC connection  创建 MySQL 连接,使用 DriverManager 获取 MySQL 连接。</span>    <span class="token keyword">val</span> mysqlConnection <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span>getConnection<span class="token punctuation">(</span>mysqlUrl<span class="token punctuation">,</span> mysqlUser<span class="token punctuation">,</span> mysqlPassword<span class="token punctuation">)</span>    <span class="token comment">//尝试执行查询并将结果导出到 CSV：</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Query to fetch data from MySQL 定义 SQL 查询，选择了 company.staff 表中的所有列。</span>      <span class="token keyword">val</span> query <span class="token operator">=</span> <span class="token string">"SELECT * FROM shtd_result.order_info"</span>      <span class="token comment">// Create a statement and execute the query 创建 Statement 对象并执行查询</span>      <span class="token keyword">val</span> statement <span class="token operator">=</span> mysqlConnection<span class="token punctuation">.</span>createStatement<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> resultSet <span class="token operator">=</span> statement<span class="token punctuation">.</span>executeQuery<span class="token punctuation">(</span>query<span class="token punctuation">)</span>      <span class="token comment">// CSV file path  指定 CSV 文件路径</span>      <span class="token keyword">val</span> csvFilePath <span class="token operator">=</span> <span class="token string">"/home/gxjzy/桌面/shtd_result.order_info.csv"</span>      <span class="token comment">// Write data to CSV file 创建 PrintWriter 对象，用于将数据写入文件。</span>      <span class="token keyword">val</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> PrintWriter<span class="token punctuation">(</span>csvFilePath<span class="token punctuation">)</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 根据表列修改此行   遍历查询结果集，将每一行的数据格式化为字符串，写入 CSV 文件。</span>        <span class="token comment">// val rowData = s"$&#123;resultSet.getInt("id")&#125;,$&#123;resultSet.getString("name")&#125;,$&#123;resultSet.getString("sex")&#125;"</span>        <span class="token keyword">val</span> rowData <span class="token operator">=</span> <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">resultSet<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">resultSet<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"consignee"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">resultSet<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"consignee_tel"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">resultSet<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"final_total_amount"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">,</span><span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token expression">resultSet<span class="token punctuation">.</span>getString<span class="token punctuation">(</span><span class="token string">"feight_fee"</span><span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span>        writer<span class="token punctuation">.</span>println<span class="token punctuation">(</span>rowData<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      writer<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"Data exported to CSV file: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">csvFilePath</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> e<span class="token operator">:</span> Exception <span class="token keyword">=></span> e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// Close the MySQL connection 无论是否发生异常，都会在最终块中尝试关闭 MySQL 连接</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>mysqlConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mysqlConnection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401301517323.png" alt="image-20240130151735218"></p><p>:four:开始导入数据到clickhouse</p><p>(因为使用代码导出数据时,没有设置csv的表头,所以这里使用无表头的方法导入csv文件)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 1.将成功导出的csv文件上传至服务器中</span>gxjzy@gxjzy:~/桌面/sql_CSV$ <span class="token function">sudo</span> <span class="token function">docker</span> <span class="token function">cp</span> shtd_result.order_info.csv dj-master:/root/data<span class="token comment"># 2.导入不表头的csv文件</span><span class="token punctuation">[</span>root@master data<span class="token punctuation">]</span><span class="token comment"># clickhouse-client --port 9001  --password 123456 -d default -q " insert into order_info FORMAT CSV" &lt; shtd_result.order_info.csv</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>登录clickhouse数据库查看数据是否导入成功:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">master :<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> order_info<span class="token punctuation">;</span><span class="token keyword">SELECT</span> <span class="token operator">*</span><span class="token keyword">FROM</span> order_infoQuery id: b816d87c<span class="token operator">-</span><span class="token number">478</span>a<span class="token operator">-</span><span class="token number">4</span>f58<span class="token operator">-</span><span class="token number">8</span>ae4<span class="token operator">-</span><span class="token number">9</span>bec876dfa34┌─id───┬─consignee─┬─consignee_tel─┬─final_total_amount─┬─feight_fee─┐│ <span class="token number">3570</span> │ 狄兴良    │ <span class="token number">13948905139</span>   │ <span class="token number">451.00</span>             │ <span class="token number">7.00</span>       ││ <span class="token number">3571</span> │ 岑坚      │ <span class="token number">13220439586</span>   │ <span class="token number">682.00</span>             │ <span class="token number">16.00</span>      ││ <span class="token number">3572</span> │ 贺兰凤    │ <span class="token number">13022309909</span>   │ <span class="token number">285.00</span>             │ <span class="token number">10.00</span>      ││ <span class="token number">3573</span> │ 邬艺咏    │ <span class="token number">13752952612</span>   │ <span class="token number">6673.00</span>            │ <span class="token number">13.00</span>      ││ <span class="token number">3574</span> │ 宋春      │ <span class="token number">13901511343</span>   │ <span class="token number">14691.00</span>           │ <span class="token number">8.00</span>       ││ <span class="token number">3575</span> │ 史晨辰    │ <span class="token number">13146190655</span>   │ <span class="token number">4339.00</span>            │ <span class="token number">13.00</span>      ││ <span class="token number">3576</span> │ 邬素      │ <span class="token number">13661734372</span>   │ <span class="token number">4270.00</span>            │ <span class="token number">12.00</span>      ││ <span class="token number">3577</span> │ 姜奇      │ <span class="token number">13060645675</span>   │ <span class="token number">468.00</span>             │ <span class="token number">9.00</span>       ││ <span class="token number">3578</span> │ 张娣      │ <span class="token number">13586813843</span>   │ <span class="token number">26718.00</span>           │ <span class="token number">18.00</span>      │└──────┴───────────┴───────────────┴────────────────────┴────────────┘<span class="token number">9</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span><span class="token punctuation">.</span> Elapsed: <span class="token number">0.005</span> sec<span class="token punctuation">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401301528146.png" alt="image-20240130152811062"></p><p>完成</p><h2 id="6-clickhouse的使用"><a href="#6-clickhouse的使用" class="headerlink" title="6. clickhouse的使用"></a>6. clickhouse的使用</h2><h3 id="6-1-在ClickHouse中创建表"><a href="#6-1-在ClickHouse中创建表" class="headerlink" title="6.1  在ClickHouse中创建表"></a>6.1  在ClickHouse中创建表</h3><p>与大多数数据库管理系统一样，ClickHouse 按逻辑将表分组到<strong>数据库</strong>中。使用<code>CREATE DATABASE</code>命令在ClickHouse中创建新数据库：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> helloworld<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309281.png" alt="image-20230825140404003"></p><p>同样，使用<code>CREATE TABLE</code>来定义一个新表。（如果不指定数据库名称，则该表将在 <code>default</code>数据库中。）以下名为的表<code>my_first_table</code>在数据库中<code>helloworld</code>：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> helloworld<span class="token punctuation">.</span>my_first_table<span class="token punctuation">(</span>user_id UInt32<span class="token punctuation">,</span>message String<span class="token punctuation">,</span><span class="token keyword">timestamp</span> <span class="token keyword">DateTime</span><span class="token punctuation">,</span>metric Float32<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> <span class="token keyword">timestamp</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309931.png" alt="image-20230825140621498"></p><p>在上面的示例中，<code>my_first_table</code>是一个<code>MergeTree</code>包含四列的表：</p><p>1、<code>user_id</code>: 32 位无符号整数</p><p>2、<code>message</code>：一种<code>String</code>数据类型，它替换其他数据库系统中的<code>VARCHAR</code>、<code>BLOB</code>、<code>CLOB</code>等类型</p><p>3、<code>timestamp</code>: 一个<code>DateTime</code>值，代表时间的一个瞬间</p><p>4、<code>metric</code>：32位浮点数</p><p>表结构：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309537.png" alt="image-20230825140809783"></p><p>笔记</p><p>表引擎确定：</p><p>1、数据的存储方式和位置</p><p>2、支持哪些查询</p><p>3、数据是否被复制</p><p>有许多引擎可供选择，但对于单节点 ClickHouse 服务器上的简单表，<a href="https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree">MergeTree</a>可能是您的选择。</p><blockquote><p>主键</p></blockquote><p>在继续之前，了解主键在 ClickHouse 中的工作原理非常重要（主键的实现可能看起来出乎意料！）：</p><ul><li>ClickHouse 中的主键对于表中的每一行来说<font color='red'>不是唯一的</font></li></ul><p>ClickHouse 表的主键决定了数据写入磁盘时的排序方式。每 8,192 行或 10MB 数据（称为<strong>索引粒度</strong>）在主键索引文件中创建一个条目。这种粒度概念创建了一个可以轻松放入内存的<strong>稀疏索引</strong><code>SELECT</code>，并且颗粒表示查询期间处理的最小列数据量的条带。</p><p>主键可以使用<code>PRIMARY KEY</code>参数定义。如果定义表时未<code>PRIMARY KEY</code>指定，则键将成为<code>ORDER BY</code>子句中指定的元组。如果您同时指定 a<code>PRIMARY KEY </code>和 an <code>ORDER BY</code>，则主键必须是排序顺序的子集。</p><p>主键也是排序键，它是 的元组<code>(user_id, timestamp)</code>。因此，每个列文件中存储的数据将按<code>user_id</code>，然后排序<code>timestamp</code>。</p><p>#创建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">data</span> :<span class="token punctuation">)</span> <span class="token keyword">create</span> <span class="token keyword">TABLE</span> my_first_table <span class="token punctuation">(</span> user_id UInt32<span class="token punctuation">,</span>message String<span class="token punctuation">,</span><span class="token keyword">timestamp</span> <span class="token keyword">DateTime</span><span class="token punctuation">,</span>metric Float32<span class="token punctuation">)</span><span class="token keyword">ENGINE</span> <span class="token operator">=</span> MergeTree <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> <span class="token keyword">timestamp</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309304.png" alt="image-20230825093650584"></p><h3 id="6-2-将数据插入-ClickHouse"><a href="#6-2-将数据插入-ClickHouse" class="headerlink" title="6.2 将数据插入 ClickHouse:)"></a>6.2 将数据插入 ClickHouse:)</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">huangjing :<span class="token punctuation">)</span>  <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> my_first_table <span class="token punctuation">(</span>user_id<span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token keyword">timestamp</span><span class="token punctuation">,</span> metric<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'Hello, ClickHouse!'</span><span class="token punctuation">,</span>              <span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'Insert a lot of rows per batch'</span><span class="token punctuation">,</span>            yesterday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.41421</span> <span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token string">'Sort your data based on your commonly-used queries'</span><span class="token punctuation">,</span> today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2.718</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token string">'Granules are the smallest chunks of data read'</span><span class="token punctuation">,</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3.14159</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309828.png" alt="image-20230825093935032"></p><p>#查看插入的数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">data</span> :<span class="token punctuation">)</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> my_first_table<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309151.png" alt="image-20230825094025963"></p><h3 id="6-3-ClickHouse-中的-SELECT-查询"><a href="#6-3-ClickHouse-中的-SELECT-查询" class="headerlink" title="6.3  ClickHouse 中的 SELECT 查询"></a>6.3  ClickHouse 中的 SELECT 查询</h3><p><code>SELECT</code>ClickHouse 是一个 SQL 数据库，您可以通过编写您已经熟悉的相同类型的查询来查询数据。例如：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> helloworld<span class="token punctuation">.</span>my_first_table <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">timestamp</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>响应以良好的表格格式返回：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241309948.png" alt="image-20230825142026059"></p><p>添加一个子句来指定<a href="https://clickhouse.com/docs/en/interfaces/formats">ClickHouse 支持的多种输出格式</a><code>FORMAT</code>之一：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> helloworld<span class="token punctuation">.</span>my_first_table <span class="token keyword">ORDER</span> <span class="token keyword">BY</span> <span class="token keyword">timestamp</span> FORMAT TabSeparated<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在上面的查询中，输出以制表符分隔的形式返回：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241310857.png" alt="image-20230825142212843"></p><h3 id="6-4-更新数据"><a href="#6-4-更新数据" class="headerlink" title="6.4 更新数据"></a>6.4 更新数据</h3><p>使用以下<code>ALTER TABLE...UPDATE</code>命令更新表中的行：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token keyword">database</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token keyword">table</span><span class="token operator">></span> <span class="token keyword">UPDATE</span> <span class="token operator">&lt;</span><span class="token keyword">column</span><span class="token operator">></span> <span class="token operator">=</span> <span class="token operator">&lt;</span>expression<span class="token operator">></span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>filter_expr<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>&lt;expression&gt;</code>是满足 的列的新值<code>&lt;filter_expr&gt;</code>。必须<code>&lt;expression&gt;</code>与列具有相同的数据类型，或者可以使用<code>CAST</code>运算符转换为相同的数据类型。应该为每行数据<code>&lt;filter_expr&gt;</code>返回一个<code>UInt8</code>（零或非零）值。多个<code>UPDATE &lt;column&gt;</code>语句可以组合在一个<code>ALTER TABLE</code>命令中，并用逗号分隔。</p><p><strong>例子</strong>：</p><ol><li><p>更新数据，将userid为101的内容改成huangjing</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> helloworld<span class="token punctuation">.</span>my_first_table <span class="token keyword">UPDATE</span> message <span class="token operator">=</span> <span class="token string">'huangjing'</span> <span class="token keyword">WHERE</span> user_id<span class="token operator">=</span><span class="token string">'101'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241310570.png" alt="image-20230825143022048"></p></li><li><p>更新排序键列</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> helloworld<span class="token punctuation">.</span>my_first_table <span class="token keyword">UPDATE</span> user_id<span class="token operator">=</span><span class="token string">'110'</span> <span class="token keyword">WHERE</span> message <span class="token operator">=</span> <span class="token string">'huangjing'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果（发现并没有更新）：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241310974.png" alt="image-20230825143322671"></p></li></ol><p>无法更新属于主键或排序键的列。</p><h3 id="6-5-删除数据"><a href="#6-5-删除数据" class="headerlink" title="6.5 删除数据"></a>6.5 删除数据</h3><p>使用<code>ALTER TABLE</code>命令删除行：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> <span class="token punctuation">[</span><span class="token operator">&lt;</span><span class="token keyword">database</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token keyword">table</span><span class="token operator">></span> <span class="token keyword">DELETE</span> <span class="token keyword">WHERE</span> <span class="token operator">&lt;</span>filter_expr<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应该<code>&lt;filter_expr&gt;</code>为每行数据返回一个 UInt8 值。</p><p><strong>例子</strong></p><ol><li><p>删除metric中的-1的值：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> helloworld<span class="token punctuation">.</span>my_first_table <span class="token keyword">DELETE</span> <span class="token keyword">WHERE</span> metric<span class="token operator">=</span><span class="token string">'-1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241310296.png" alt="image-20230825143613961"></p></li></ol><p>要删除表中的所有数据，使用command<code>TRUNCATE TABLE [&lt;database].]&lt;table&gt;</code>命令效率更高。这个命令也可以执行<code>ON CLUSTER</code>。</p><p>查看<a href="https://clickhouse.com/docs/en/sql-reference/statements/delete"><code>DELETE</code>声明</a>文档页面了解更多详细信息。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据运维系列 </category>
          
          <category> 数据库系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bigdata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop伪分布式部署</title>
      <link href="/2024/11/13/hadoop-wei-fen-bu-shi-bu-shu/"/>
      <url>/2024/11/13/hadoop-wei-fen-bu-shi-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop伪分布式部署"><a href="#Hadoop伪分布式部署" class="headerlink" title="Hadoop伪分布式部署"></a>Hadoop伪分布式部署</h1><h2 id="2-Hadoop-为分布式运行环境搭建"><a href="#2-Hadoop-为分布式运行环境搭建" class="headerlink" title="2. Hadoop 为分布式运行环境搭建"></a>2. Hadoop 为分布式运行环境搭建</h2><p>环境说明:</p><table><thead><tr><th>容器</th><th>容器ip</th></tr></thead><tbody><tr><td>master</td><td>192.168.1.210</td></tr></tbody></table><h3 id="2-1-基础环境配置"><a href="#2-1-基础环境配置" class="headerlink" title="2.1 基础环境配置"></a>2.1 基础环境配置</h3><h4 id="2-1-1-配置主机名"><a href="#2-1-1-配置主机名" class="headerlink" title="2.1.1 配置主机名"></a>2.1.1 配置主机名</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hostnamectl set-hostname master <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-1-2-修改hosts，添加映射，关闭防火墙"><a href="#2-1-2-修改hosts，添加映射，关闭防火墙" class="headerlink" title="2.1.2 修改hosts，添加映射，关闭防火墙"></a>2.1.2 修改hosts，添加映射，关闭防火墙</h4><blockquote><p>修改hosts</p></blockquote><p>添加如下：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101815666.png" alt="image-20240410181512612"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4::1         localhost localhost.localdomain localhost6 localhost6.localdomain6<span class="token number">192.168</span>.10.210master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>关闭防火墙</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看防火墙状态如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># systemctl status firewalld</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101743740.png" alt="image-20240410174338699"></p><h4 id="2-1-3-生成免密公钥"><a href="#2-1-3-生成免密公钥" class="headerlink" title="2.1.3 生成免密公钥"></a>2.1.3 生成免密公钥</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen -t rsa#然后一直回车</span>或者<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen -f ~/.ssh/id_rsa -P '' #免回车</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101745799.png" alt="image-20240410174517748"></p><h4 id="2-1-4-复制公钥到服务器"><a href="#2-1-4-复制公钥到服务器" class="headerlink" title="2.1.4 复制公钥到服务器"></a>2.1.4 复制公钥到服务器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-copy-id master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101748295.png" alt="image-20240410174804241"></p><h4 id="2-1-5-JDK配置"><a href="#2-1-5-JDK配置" class="headerlink" title="2.1.5 JDK配置"></a>2.1.5 JDK配置</h4><p>解压文件到相应的位置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf /opt/software/jdk-8u162-linux-x64.tar.gz -C /opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/module/#进入解压目录，可以给解压后的文件改个名字，方便记忆</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># mv jdk1.8.0_162/ jdk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置jdk环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># vi /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾添加如下配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#JAVA_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/module/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JAVA_HOME</span>/jre/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>刷新环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># source /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置完后即可查看jdk版本号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># java -version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101750979.png" alt="image-20240410175020934"></p><p>基础环境搭建完成！！</p><h3 id="2-2-Hadoop伪分布数环境搭建"><a href="#2-2-Hadoop伪分布数环境搭建" class="headerlink" title="2.2 Hadoop伪分布数环境搭建"></a>2.2 Hadoop伪分布数环境搭建</h3><blockquote><p>前提：已完成免密登录，jdk配置</p></blockquote><h4 id="2-2-1-解压包到相应位置："><a href="#2-2-1-解压包到相应位置：" class="headerlink" title="2.2.1 解压包到相应位置："></a>2.2.1 解压包到相应位置：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># tar -zxvf /opt/software/hadoop-3.1.3.tar.gz -C /opt/module/</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># mv hadoop-3.1.3/ hadoop#改一下名字，方便记忆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-2-2-添加hadoop环境变量"><a href="#2-2-2-添加hadoop环境变量" class="headerlink" title="2.2.2 添加hadoop环境变量"></a>2.2.2 添加hadoop环境变量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># vi /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾添加以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HADOOP</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/opt/module/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_CLASSPATH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>$HADOOP_HOME/bin/hadoop classpath<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101756795.png" alt="image-20240410175647740"></p><p>：wq 保存退出后，刷新环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># source /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置好后，即可直接查看hadoop 版本号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># hadoop version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101754673.png" alt="image-20240410175448624"></p><h3 id="2-3-修改6个主配置文件"><a href="#2-3-修改6个主配置文件" class="headerlink" title="2.3 修改6个主配置文件"></a>2.3 修改6个主配置文件</h3><ul><li>:one: core.site.xml </li><li>:two: hdfs-site.xml </li><li>:three: mapred-site.xml </li><li>:four:yarn-site.xml </li><li>:five: hadoop-env.sh </li><li>:six: workers</li></ul><h4 id="2-3-1先进入配置目录"><a href="#2-3-1先进入配置目录" class="headerlink" title="2.3.1先进入配置目录"></a>2.3.1先进入配置目录</h4><pre class="line-numbers language-SH" data-language="SH"><code class="language-SH">[root@master module]# cd hadoop&#x2F;etc&#x2F;hadoop&#x2F;[root@master hadoop]# ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到如下文件：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101741891.png" alt="image-20230321124310396"></p><p>我们只用修改其中的6条</p><h4 id="2-3-2-hadoop-env-sh配置："><a href="#2-3-2-hadoop-env-sh配置：" class="headerlink" title="2.3.2 hadoop-env.sh配置："></a>2.3.2 hadoop-env.sh配置：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vim hadoop-env.sh #告诉hadoop jdk在哪里</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/module/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_NAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_DATANODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_SECONDARYNAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_RESOURCEMANAGER_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_NODEMANAGER_USER</span><span class="token operator">=</span>root<span class="token comment">#备注：3.0后的版本需要指定服务用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101812948.png" alt="image-20240410181216890"></p><h4 id="2-3-3-workers配置"><a href="#2-3-3-workers配置" class="headerlink" title="2.3.3 workers配置"></a>2.3.3 workers配置</h4><p>（根据自己的集群来进行配置）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi workers</span>master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101741107.png" alt="image-20230321124806539"></p><h4 id="2-3-4-core-site-xml配置："><a href="#2-3-4-core-site-xml配置：" class="headerlink" title="2.3.4 core.site.xml配置："></a>2.3.4 core.site.xml配置：</h4><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101741709.png" alt="image-20240104222915427"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi core-site.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- hdfs的地址名称：schame,ip,port--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-5-hdfs-site-xml"><a href="#2-3-5-hdfs-site-xml" class="headerlink" title="2.3.5 hdfs.site.xml:"></a>2.3.5 hdfs.site.xml:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi hdfs-site.xml </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- namenode守护进程管理的元数据文件fsimage存储的位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 块的副本数--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 块的大小(128M),下面的单位是字节--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.blocksize<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>134217728<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- secondarynamenode守护进程的http地址：主机名和端口号。参考守护进程布局--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:9868<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- namenode守护进程的http地址：主机名和端口号。参考守护进程布局--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--是否开通HDFS的Web接口，3.0版本后默认端口是9870--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.webhdfs.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-6-mapred-site-xml"><a href="#2-3-6-mapred-site-xml" class="headerlink" title="2.3.6 mapred-site.xml:"></a>2.3.6 mapred-site.xml:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi mapred-site.xml </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 指定mapreduce 编程模型运行在yarn上 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-7-yarn-site-xml"><a href="#2-3-7-yarn-site-xml" class="headerlink" title="2.3.7 yarn-site.xml:"></a>2.3.7 yarn-site.xml:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi yarn-site.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 指定mapreduce 编程模型运行在yarn上 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以前hadoop 2.X 版本，访问web界面，hdfs端口号是50070，现在3.X版本，端口号是9870（最好自己指定端口号）</p><h4 id="2-3-8-配置好后分发到副节点（别忘了环境变量也要再次分发）："><a href="#2-3-8-配置好后分发到副节点（别忘了环境变量也要再次分发）：" class="headerlink" title="2.3.8 配置好后分发到副节点（别忘了环境变量也要再次分发）："></a>2.3.8 配置好后分发到副节点（别忘了环境变量也要再次分发）：</h4><p>伪分布式忽略</p><p>分发完后去副节点刷新环境变量</p><h4 id="2-3-9-初始化namenode："><a href="#2-3-9-初始化namenode：" class="headerlink" title="2.3.9 初始化namenode："></a>2.3.9 初始化namenode：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hdfs namenode -format</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101741586.png" alt="image-20230320183413920"></p><h4 id="2-3-10-开启集群："><a href="#2-3-10-开启集群：" class="headerlink" title="2.3.10 开启集群："></a>2.3.10 开启集群：</h4><p>简易启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># start-all.sh </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看结果:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># jps</span><span class="token number">3680</span> SecondaryNameNode<span class="token number">3236</span> NameNode<span class="token number">3435</span> DataNode<span class="token number">4571</span> Jps<span class="token number">3981</span> ResourceManager<span class="token number">4157</span> NodeManager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101808730.png" alt="image-20240410180852682"></p><h3 id="2-4-web端口访问测试"><a href="#2-4-web端口访问测试" class="headerlink" title="2.4 web端口访问测试"></a>2.4 web端口访问测试</h3><p><a href="http://ip:9870/">http://ip:9870</a></p><p><a href="http://ip:8088/">http://ip:8088</a></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101810387.png" alt="image-20240410181035310"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202404101810468.png" alt="image-20240410181056397"></p><p>完成</p>]]></content>
      
      
      <categories>
          
          <category> 大数据运维系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bigdata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu安装JetBrains全家桶之IntlliJ IDEA安装</title>
      <link href="/2024/11/13/ubuntu-an-zhuang-jetbrains-quan-jia-tong-zhi-intllij-idea-an-zhuang/"/>
      <url>/2024/11/13/ubuntu-an-zhuang-jetbrains-quan-jia-tong-zhi-intllij-idea-an-zhuang/</url>
      
        <content type="html"><![CDATA[<h1 id="Ubuntu安装安装-IntelliJ-全家桶"><a href="#Ubuntu安装安装-IntelliJ-全家桶" class="headerlink" title="Ubuntu安装安装 IntelliJ 全家桶"></a>Ubuntu安装安装 IntelliJ 全家桶</h1><blockquote><p>下面以idea作为例子</p></blockquote><h2 id="一-下载IntlliJ-IDEA"><a href="#一-下载IntlliJ-IDEA" class="headerlink" title="一.下载IntlliJ IDEA"></a>一.下载IntlliJ IDEA</h2><p>IntlliJ IDEA的版本自己选择:</p><p>官网:<a href="https://www.jetbrains.com/idea/">IntelliJ IDEA – the Leading Java and Kotlin IDE (jetbrains.com)</a></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191701301.png" alt="image-20241019170142131"></p><blockquote><p>专业版下载:</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191702295.png" alt="image-20241019170214246"></p><blockquote><p>社区版下载:</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191702669.png" alt="image-20241019170230624"></p><h2 id="二-下载好后解压到指定路径："><a href="#二-下载好后解压到指定路径：" class="headerlink" title="二. 下载好后解压到指定路径："></a>二. 下载好后解压到指定路径：</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 解压到</span><span class="token function">sudo</span> <span class="token function">tar</span> <span class="token parameter variable">-xvf</span> ideaIU-2024.2.3.tar.gz <span class="token parameter variable">-C</span> /opt/<span class="token comment"># 更改权限组</span><span class="token builtin class-name">cd</span> /opt/<span class="token function">sudo</span> <span class="token function">chown</span> wyl:wyl <span class="token parameter variable">-R</span> idea-IU-242.23339.11/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191635322.png" alt="image-20241019163501266"></p><h2 id="三-打开解压后的文件位置"><a href="#三-打开解压后的文件位置" class="headerlink" title="三. 打开解压后的文件位置"></a>三. 打开解压后的文件位置</h2><p>注：这时候其实可以打开idea了 进入到 IDEA文件夹的bin目录 终端输入</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/idea-IU-242.23339.11/bin/./idea.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191636474.png" alt="image-20241019163620427"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191637828.png" alt="image-20241019163705656"></p><h2 id="四-添加IDEA快捷图标："><a href="#四-添加IDEA快捷图标：" class="headerlink" title="四. 添加IDEA快捷图标："></a>四. 添加IDEA快捷图标：</h2><blockquote><p>在&#x2F;usr&#x2F;share&#x2F;applications&#x2F;文件夹里面创建一个.desktop文件</p></blockquote><pre class="line-numbers language-none"><code class="language-none">sudo vim &#x2F;usr&#x2F;share&#x2F;applications&#x2F;idea.desktop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下内容,路径改成自己的:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Desktop Entry<span class="token punctuation">]</span><span class="token assign-left variable">Name</span><span class="token operator">=</span>IntelliJ IDEA<span class="token assign-left variable">Comment</span><span class="token operator">=</span>IntelliJ IDEA<span class="token comment"># 安装地址下的idea.sh</span><span class="token assign-left variable">Exec</span><span class="token operator">=</span>/opt/idea-IU-242.23339.11/bin/idea<span class="token comment"># 图标路径</span><span class="token assign-left variable">Icon</span><span class="token operator">=</span>/opt/idea-IU-242.23339.11/bin/idea.png<span class="token assign-left variable">Terminal</span><span class="token operator">=</span>false<span class="token assign-left variable">Type</span><span class="token operator">=</span>Application<span class="token assign-left variable">Categories</span><span class="token operator">=</span>Developer<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:wq保存退出</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191642687.png" alt="image-20241019164247650"></p><h2 id="五-启动测试"><a href="#五-启动测试" class="headerlink" title="五. 启动测试"></a>五. 启动测试</h2><blockquote><p>1.打开菜单栏</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191645687.png" alt="image-20241019164512401"></p><blockquote><p>2.找到idea图标</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191644472.png" alt="image-20241019164433394"></p><blockquote><p>3.单机启动即可启动</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410191646751.png" alt="image-20241019164600676"></p>]]></content>
      
      
      <categories>
          
          <category> Linux基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈你对LVS的理解</title>
      <link href="/2024/11/12/tan-tan-ni-dui-lvs-de-li-jie/"/>
      <url>/2024/11/12/tan-tan-ni-dui-lvs-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="谈谈你对LVS的理解"><a href="#谈谈你对LVS的理解" class="headerlink" title="谈谈你对LVS的理解"></a>谈谈你对LVS的理解</h1><h2 id="1-LVS-负载均衡有哪些策略？"><a href="#1-LVS-负载均衡有哪些策略？" class="headerlink" title="1. LVS 负载均衡有哪些策略？"></a>1. LVS 负载均衡有哪些策略？</h2><p>LVS一共有三种工作模式： DR，Tunnel,NAT</p><h2 id="2-谈谈你对LVS的理解？"><a href="#2-谈谈你对LVS的理解？" class="headerlink" title="2. 谈谈你对LVS的理解？"></a>2. 谈谈你对LVS的理解？</h2><p>LVS是一个虚拟的服务器集群系统，在unix系统下实现负载均衡的功能；采用IP负载均衡技术和机遇内容<br>请求分发技术来实现。<br>LVS采用三层结构，分别是：<br>第一层： 负载调度器<br>第二层： 服务池<br>第三层：共享存储</p><p>负载调度器（load balancer&#x2F; Director），是整个集群的总代理，它有两个网卡，一个网卡面对访问网<br>站的客户端，一个网卡面对整个集群的内部。负责将客户端的请求发送到一组服务器上执行，而客户也<br>认为服务是来自这台主的。举个生动的例子，集群是个公司，负载调度器就是在外接揽生意，将接揽到<br>的生意分发给后台的真正干活的真正的主机们。当然需要将活按照一定的算法分发下去，让大家都公平<br>的干活。</p><p>服务器池（server pool&#x2F; Realserver），是一组真正执行客户请求的服务器，可以当做WEB服务器。就<br>是上面例子中的小员工。</p><p>共享存储（shared storage），它为服务器池提供一个共享的存储区，这样很容易使得服务器池拥有相<br>同的内容，提供相同的服务。一个公司得有一个后台账目吧，这才能协调。不然客户把钱付给了A，而<br>换B接待客户，因为没有相同的账目。B说客户没付钱，那这样就不是客户体验度的问题了。<br><img src="https://img.picui.cn/free/2024/11/12/67323e8315bb7.png" alt="lvs.png"></p><h2 id="3-负载均衡的原理是什么？"><a href="#3-负载均衡的原理是什么？" class="headerlink" title="3. 负载均衡的原理是什么？"></a>3. 负载均衡的原理是什么？</h2><p>当客户端发起请求时，请求直接发给Director Server（调度器），这时会根据设定的调度算法，将请求<br>按照算法的规定智能的分发到真正的后台服务器。以达到将压力均摊</p><p>但是我们知道，http的连接时无状态的，假设这样一个场景，我登录某宝买东西，当我看上某款商品<br>时，我将它加入购物车，但是我刷新了一下页面，这时由于负载均衡的原因，调度器又选了新的一台服<br>务器为我提供服务，我刚才的购物车内容全都不见了，这样就会有十分差的用户体验。</p><p>所以就还需要一个存储共享，这样就保证了用户请求的数据是一样的</p><h2 id="4-LVS由哪两部分组成的？"><a href="#4-LVS由哪两部分组成的？" class="headerlink" title="4. LVS由哪两部分组成的？"></a>4. LVS由哪两部分组成的？</h2><p>LVS 由2部分程序组成，包括 ipvs 和 ipvsadm。</p><ol><li>ipvs(ip virtual server)：一段代码工作在内核空间，叫ipvs，是真正生效实现调度的代码。</li><li>ipvsadm：另外一段是工作在用户空间，叫ipvsadm，负责为ipvs内核框架编写规则，定义谁是集群服务，而谁是后端真实的服务器(Real Server)</li></ol><h2 id="5-与lvs相关的术语有哪些？"><a href="#5-与lvs相关的术语有哪些？" class="headerlink" title="5. 与lvs相关的术语有哪些？"></a>5. 与lvs相关的术语有哪些？</h2><p>DS：Director Server。指的是前端负载均衡器节点。<br>RS：Real Server。后端真实的工作服务器。<br>VIP：Virtual IP 向外部直接面向用户请求，作为用户请求的目标的IP地址。<br>DIP：Director Server IP，主要用于和内部主机通讯的IP地址。<br>RIP：Real Server IP，后端服务器的IP地址。<br>CIP：Client IP，访问客户端的IP地址。</p><h2 id="6-LVS-NAT模式的原理"><a href="#6-LVS-NAT模式的原理" class="headerlink" title="6. LVS-NAT模式的原理"></a>6. LVS-NAT模式的原理</h2><p><img src="https://img.picui.cn/free/2024/11/12/67323f8f529bf.png" alt="lvs原理.png"></p><ol><li>当用户请求到达Director Server，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP</li><li>PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链</li><li>IPVS比对数据包请求的服务是否为集群服务，若是，修改数据包的目标IP地址为后端服务器IP然后将数据包发至POSTROUTING链。 此时报文的源IP为CIP，目标IP为RIP</li><li>POSTROUTING链通过选路，将数据包发送给Real Server</li><li>Real Server比对发现目标为自己的IP，开始构建响应报文发回给Director Server。 此时报文的源IP为RIP，目标IP为CIP</li><li>Director Server在响应客户端前，此时会将源IP地址修改为自己的VIP地址，然后响应给客户端。 此时报文的源IP为VIP，目标IP为CIP</li></ol><h2 id="7-LVS-NAT模型的特性"><a href="#7-LVS-NAT模型的特性" class="headerlink" title="7. LVS-NAT模型的特性"></a>7. LVS-NAT模型的特性</h2><ol><li>RS应该使用私有地址，RS的网关必须指向DIP</li><li>DIP和RIP必须在同一个网段内</li><li>请求和响应报文都需要经过Director Server，高负载场景中，Director Server易成为性能瓶颈</li><li>支持端口映射</li><li>RS可以使用任意操作系统</li></ol><blockquote><p>缺陷：对Director Server压力会比较大，请求和响应都需经过director server</p></blockquote><h2 id="8-LVS-DR模式原理"><a href="#8-LVS-DR模式原理" class="headerlink" title="8. LVS-DR模式原理"></a>8. LVS-DR模式原理</h2><p><img src="https://img.picui.cn/free/2024/11/12/673240f7d95d3.png" alt="LVS_DR.png"></p><h2 id="9-LVS-DR模型的特性"><a href="#9-LVS-DR模型的特性" class="headerlink" title="9. LVS-DR模型的特性"></a>9. LVS-DR模型的特性</h2><h2 id="10-LVS三种负载均衡模式的比较"><a href="#10-LVS三种负载均衡模式的比较" class="headerlink" title="10. LVS三种负载均衡模式的比较"></a>10. LVS三种负载均衡模式的比较</h2><h2 id="11-LVS的负载调度算法"><a href="#11-LVS的负载调度算法" class="headerlink" title="11.  LVS的负载调度算法"></a>11.  LVS的负载调度算法</h2><h2 id="12-LVS与nginx的区别"><a href="#12-LVS与nginx的区别" class="headerlink" title="12. LVS与nginx的区别"></a>12. LVS与nginx的区别</h2><h2 id="13-负载均衡的作用有哪些？"><a href="#13-负载均衡的作用有哪些？" class="headerlink" title="13. 负载均衡的作用有哪些？"></a>13. 负载均衡的作用有哪些？</h2><h2 id="14-nginx实现负载均衡的分发策略"><a href="#14-nginx实现负载均衡的分发策略" class="headerlink" title="14. nginx实现负载均衡的分发策略"></a>14. nginx实现负载均衡的分发策略</h2>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LVS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hbase完全分部署部署</title>
      <link href="/2024/11/12/hbase-wan-quan-fen-bu-shu-bu-shu/"/>
      <url>/2024/11/12/hbase-wan-quan-fen-bu-shu-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Hbase"><a href="#Hbase" class="headerlink" title="Hbase"></a>Hbase</h1><h2 id="1-初识HBase"><a href="#1-初识HBase" class="headerlink" title="1.初识HBase"></a>1.初识HBase</h2><p>​HBase 是一个面向<code>列式存储</code>的<code>分布式数据库</code>，其设计思想来源于 Google 的 BigTable 论文。HBase 底层存储基于 HDFS 实现，集群的管理基于 ZooKeeper 实现。HBase 良好的分布式架构设计为海量数据的快速存储、随机访问提供了可能，基于数据副本机制和分区机制可以轻松实现在线扩容、缩容和数据容灾，是大数据领域中 Key-Value 数据结构存储最常用的数据库方案。</p><h3 id="1-1-HBase特点"><a href="#1-1-HBase特点" class="headerlink" title="1.1 HBase特点"></a>1.1 HBase特点</h3><blockquote><p>:one:易扩展</p></blockquote><p>​Hbase 的扩展性主要体现在两个方面，一个是基于运算能力（RegionServer） 的扩展，通过增加 RegionSever 节点的数量，提升 Hbase 上层的处理能力；另一个是基于存储能力的扩展（HDFS），通过增加 DataNode 节点数量对存储层的进行扩容，提升 HBase 的数据存储能力。</p><blockquote><p>:two:海量存储</p></blockquote><p>​HBase 作为一个开源的分布式 Key-Value 数据库，其主要作用是面向 PB 级别数据的实时入库和快速随机访问。这主要源于上述易扩展的特点，使得 HBase 通过扩展来存储海量的数据。</p><blockquote><p>:three: 列式存储</p></blockquote><p>​Hbase 是根据列族来存储数据的。列族下面可以有非常多的列。列式存储的最大好处就是，其数据在表中是按照某列存储的，这样在查询只需要少数几个字段时，能大大减少读取的数据量。</p><blockquote><p>:four:高可靠性</p></blockquote><p>​WAL 机制保证了数据写入时不会因集群异常而导致写入数据丢失，Replication 机制保证了在集群出现严重的问题时，数据不会发生丢失或损坏。而且 Hbase 底层使用 HDFS，HDFS 本身也有备份。</p><blockquote><p>:five:稀疏性</p></blockquote><p>​在 HBase 的列族中，可以指定任意多的列，为空的列不占用存储空间，表可以设计得非常稀疏。</p><h3 id="1-2-模块组成"><a href="#1-2-模块组成" class="headerlink" title="1.2 模块组成"></a>1.2 模块组成</h3><p>​HBase 可以将数据存储在本地文件系统，也可以存储在 HDFS 文件系统。在生产环境中，HBase 一般运行在 HDFS 上，以 HDFS 作为基础的存储设施。HBase 通过 HBase Client 提供的 Java API 来访问 HBase 数据库，以完成数据的写入和读取。HBase 集群主由<code>HMaster、Region Server 和 ZooKeeper </code>组成。</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401061941290.png" alt=""><blockquote><p>:one: HMaster</p></blockquote><ul><li>负责管理 RegionServer，实现其负载均衡；</li><li>管理和分配 Region，比如在 Region split时分配新的 Region，在 RegionServer 退出时迁移其内的 Region 到其他 RegionServer上；</li><li>管理namespace和table的元数据（实际存储在HDFS上）；</li><li>权限控制（ACL）。</li></ul><blockquote><p>:two: RegionServer</p></blockquote><ul><li>存放和管理本地 Region；</li><li>读写HDFS，管理Table中的数据；</li><li>Client 从 HMaster 中获取元数据，找到 RowKey 所在的 RegionServer 进行读写数据。</li></ul><blockquote><p>:three: ZooKeeper</p></blockquote><ul><li>存放整个 HBase集群的元数据以及集群的状态信息；</li><li>实现HMaster主从节点的failover。</li></ul><h2 id="2-HBase-数据模型"><a href="#2-HBase-数据模型" class="headerlink" title="2. HBase 数据模型"></a>2. HBase 数据模型</h2><p>​HBase 是一个面向列式存储的分布式数据库。HBase 的数据模型与 BigTable 十分相似。在 HBase 表中，一条数据拥有一个全局唯一的键(RowKey)和任意数量的列(Column)，一列或多列组成一个列族(Column Family)，同一个列族中列的数据在物理上都存储在同一个 HFile 中，这样基于列存储的数据结构有利于数据缓存和查询。 HBase 中的表是疏松地存储的，因此用户可以动态地为数据定义各种不同的列。HBase中的数据按主键排序，同时，HBase 会将表按主键划分为多个 Region 存储在不同 Region Server 上，以完成数据的分布式存储和读取。</p><p>HBase 根据列成来存储数据，一个列族对应物理存储上的一个 HFile，列族包含多列列族在创建表的时候被指定。</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401061946048.png" alt=""><h3 id="2-1-Column-Family"><a href="#2-1-Column-Family" class="headerlink" title="2.1 Column Family"></a>2.1 Column Family</h3><p>Column Family 即列族，HBase 基于列划分数据的物理存储，一个列族可以包含包意多列。</p><p>一般同一类的列会放在一个列族中，每个列族都有一组存储属性：</p><ul><li>是否应该缓存在内存中；- 数据如何被压缩或行键如何编码等。<br>HBase 在创建表的时候就必须指定列族。HBase的列族不是越多越好，官方荐一个表的列族数量最好小于或者等于3，过多的列族不利于 HBase 数据的管理和索引。</li></ul><h3 id="2-2-RowKey"><a href="#2-2-RowKey" class="headerlink" title="2.2 RowKey"></a>2.2 RowKey</h3><p>RowKey的概念与关系型数据库中的主键相似，HBase 使用 RowKey 来唯一标识某行的数据。</p><p>访问 HBase 数据的方式有三种:</p><ul><li>基于 RowKey的单行查询；- 基于RowKey的范围查询；- 全表扫描查询。</li></ul><h3 id="2-3-Region"><a href="#2-3-Region" class="headerlink" title="2.3 Region"></a>2.3 Region</h3><p>HBase 将表中的数据基于 RowKey 的不同范围划分到不同 Region 上，每个Region都负责一定范围的数据存储和访问。</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401061946040.png" alt=""><p>每个表一开始只有一个 Region，随着数据不断插入表，Region 不断增大，当增大到一个阀值的时候，Region 就会等分成两个新的 Region。当table中的行不断增多，就会有越来越多的 Region。</p><p>另外，Region 是 Hbase 中分布式存储和负载均衡的最小单元，不同的 Region 可以分布在不同的 HRegion Server上。但一个Hregion是不会拆分到多个server上的。 </p><p>这样即使有一个包括上百亿条数据的表，由于数据被划分到不同的 Region上，每个 Region 都可以独立地进行写入和查询，HBase 写查询时候可以于多 Region 分布式并发操作，因此访问速度也不会有太大的降低。</p><h3 id="2-4-TimeStamp"><a href="#2-4-TimeStamp" class="headerlink" title="2.4 TimeStamp"></a>2.4 TimeStamp</h3><p>TimeStamp 是实现 HBase 多版本的关键。在HBase 中，使用不同 TimeStamp 来标识相同RowKey对应的不同版本的数据。相同 RowKey的数据按照 TimeStamp 倒序排列。默认查询的是最新的版本，当然用户也可以指定 TimeStamp 的值来读取指定版本的数据。</p><h2 id="3-列式存储会被广泛用在OLAP中"><a href="#3-列式存储会被广泛用在OLAP中" class="headerlink" title="3. 列式存储会被广泛用在OLAP中"></a>3. 列式存储会被广泛用在OLAP中</h2><blockquote><p><code>OLTP</code>（on-line transaction processing）为联机事务处理。</p><p><code>OLAP</code>（On-Line Analytical Processing）为联机分析处理。</p><p>两者简单的区别为&#x3D;&#x3D;OLTP是做事务处理&#x3D;&#x3D;，&#x3D;&#x3D;OLAP是做分析处理&#x3D;&#x3D;。</p><p>站在数据库的操作层面来看，OLTP主要是对数据的增删改，侧重实时性，OLAP是对数据的查询，侧重大数据量查询。</p></blockquote><p>​不知是否有小伙伴们疑问，为什么列式存储会广泛地应用在 OLAP 领域，和行式存储相比，它的优势在哪里？今天我们一起来对比下这两种存储方式的差别。</p><p>其实，列式存储并不是一项新技术，最早可以追溯到 1983 年的论文 Cantor。然而，受限于早期的硬件条件和应用场景，<code>传统的事务型数据库（OLTP）如 Oracle、MySQL 等关系型数据库都是以行的方式来存储数据的。</code></p><p>​直到近几年分析型数据库（OLAP）的兴起，列式存储这一概念又变得流行，如 HBase、Cassandra 等大数据相关的数据库都是以列的方式来存储数据的。</p><h3 id="3-1-行式存储的原理与特点"><a href="#3-1-行式存储的原理与特点" class="headerlink" title="3.1 行式存储的原理与特点"></a>3.1 行式存储的原理与特点</h3><p>对于 OLAP 场景，大多都是对一整行记录进行增删改查操作的，那么行式存储采用以行的行式在磁盘上存储数据就是一个不错的选择。</p><p>当查询基于需求字段查询和返回结果时，由于这些字段都埋藏在各行数据中，就必须读取每一条完整的行记录，大量磁盘转动寻址的操作使得读取效率大大降低。</p><p>举个例子，下图为员工信息emp表。</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401061952717.png" alt=""><p>数据在磁盘上是以行的形式存储在磁盘上，同一行的数据紧挨着存放在一起。</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401061952730.png" alt=""><p>对于 emp 表，要查询部门 dept 为 A 的所有员工的名字。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name <span class="token keyword">from</span> emp <span class="token keyword">where</span> dept <span class="token operator">=</span> A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>由于 dept 的值是离散地存储在磁盘中，在查询过程中，需要磁盘转动多次，才能完成数据的定位和返回结果。</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401061952713.png" alt=""><h3 id="3-2-列式存储的原理与特点"><a href="#3-2-列式存储的原理与特点" class="headerlink" title="3.2 列式存储的原理与特点"></a>3.2 列式存储的原理与特点</h3><p>​对于 OLAP 场景，一个典型的查询需要遍历整个表，进行分组、排序、聚合等操作，这样一来行式存储中把一整行记录存放在一起的优势就不复存在了。而且，分析型 SQL 常常不会用到所有的列，而仅仅对其中某些需要的的列做运算，那一行中无关的列也不得不参与扫描。</p><p>然而在列式存储中，由于同一列的数据被紧挨着存放在了一起，如下图所示。</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401061953600.png" alt=""><p>那么基于需求字段查询和返回结果时，就不许对每一行数据进行扫描，按照列找到需要的数据，磁盘的转动次数少，性能也会提高。</p><p>还是上面例子中的查询，由于在列式存储中 dept 的值是按照顺序存储在磁盘上的，因此磁盘只需要顺序查询和返回结果即可。</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401061953616.png" alt=""><p>列式存储不仅具有按需查询来提高效率的优势，由于同一列的数据属于同一种类型，如数值类型，字符串类型等，相似度很高，还可以选择使用合适的编码压缩可减少数据的存储空间，进而减少IO提高读取性能。</p><p>总的来说，行式存储和列式存储没有说谁比谁更优越，只能说谁更适合哪种应用场景。</p><h2 id="4-HBase-的架构组成"><a href="#4-HBase-的架构组成" class="headerlink" title="4. HBase 的架构组成"></a>4. HBase 的架构组成</h2><p>​HBase 作为 NoSQL 数据库的代表，属于三驾马车之一 BigTable 的对应实现，HBase 的出现很好地弥补了大数据快速查询能力的空缺。</p><p>HBase 的核心架构由五部分组成，分别是 <code>HBase Client、HMaster、Region Server、ZooKeeper 以及 HDFS</code>。它的架构组成如下图所示。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401062006102.png" alt="image-20240106200601767"></p><blockquote><p>:one: HBase Client</p></blockquote><p>​HBase Client 为用户提供了访问 HBase 的接口，可以通过元数据表来定位到目标数据的 RegionServer，另外 HBase Client 还维护了对应的 cache 来加速 Hbase 的访问，比如缓存元数据的信息。</p><blockquote><p>:two: HMaster</p></blockquote><p>HMaster 是 HBase 集群的主节点，负责整个集群的管理工作，主要工作职责如下：</p><ul><li>分配Region：负责启动的时候分配Region到具体的 RegionServer；</li><li>负载均衡：一方面负责将用户的数据均衡地分布在各个 Region Server 上，防止Region Server数据倾斜过载。另一方面负责将用户的请求均衡地分布在各个 Region Server 上，防止Region Server 请求过热；</li><li>维护数据：发现失效的 Region，并将失效的 Region 分配到正常的 RegionServer 上，并且在Region Sever 失效的时候，协调对应的HLog进行任务的拆分。</li></ul><blockquote><p>:three: Region Server</p></blockquote><p>Region Server 直接对接用户的读写请求，是真正的干活的节点，主要工作职责如下:</p><ul><li>管理 HMaster 为其分配的 Region；</li><li>负责与底层的 HDFS 交互，存储数据到 HDFS；</li><li>负责 Region 变大以后的拆分以及 StoreFile 的合并工作。与 HMaster 的协同：当某个 RegionServer 宕机之后，ZK 会通知 Master 进行失效备援。下线的 RegionServer 所负责的 Region 暂时停止对外提供服务，Master 会将该 RegionServer 所负责的 Region 转移到其他 RegionServer 上，并且会对所下线的 RegionServer 上存在 MemStore 中还未持久化到磁盘中的数据由 WAL 重播进行恢复。</li></ul><p>Region Serve数据存储的基本结构，如下图所示。一个 Region Server 是包含多个 Region 的，这里仅展示一个：</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401062010296.png" alt=""><ul><li><p>Region：每一个 Region 都有起始 RowKey 和结束 RowKey，代表了存储的Row的范围，保存着表中某段连续的数据。一开始每个表都只有一个 Region，随着数据量不断增加，当 Region 大小达到一个阀值时，Region 就会被 Regio Server 水平切分成两个新的 Region。当 Region 很多时，HMaster 会将 Region 保存到其他 Region Server 上。</p></li><li><p>Store：一个 Region 由多个 Store 组成，每个 Store 都对应一个 Column Family, Store 包含 MemStore 和 StoreFile。</p><ul><li>MemStore：作为HBase的内存数据存储，数据的写操作会先写到 MemStore 中，当MemStore 中的数据增长到一个阈值（默认64M）后，Region Server 会启动 flasheatch 进程将 MemStore 中的数据写人 StoreFile 持久化存储，每次写入后都形成一个单独的 StoreFile。当客户端检索数据时，先在 MemStore中查找，如果MemStore 中不存在，则会在 StoreFile 中继续查找。</li><li>StoreFile：MemStore 内存中的数据写到文件后就是StoreFile，StoreFile底层是以 HFile 的格式保存。HBase以Store的大小来判断是否需要切分Region。</li></ul></li></ul><p>当一个Region 中所有 StoreFile 的大小和数量都增长到超过一个阈值时，HMaster 会把当前Region分割为两个，并分配到其他 Region Server 上，实现负载均衡。</p><ul><li>HFile：HFile 和 StoreFile 是同一个文件，只不过站在 HDFS 的角度称这个文件为HFile，站在HBase的角度就称这个文件为StoreFile。</li><li>HLog：负责记录着数据的操作日志，当HBase出现故障时可以进行日志重放、故障恢复。例如，磁盘掉电导致 MemStore中的数据没有持久化存储到 StoreFile，这时就可以通过HLog日志重放来恢复数据。</li></ul><blockquote><p>:four: ZooKeeper</p></blockquote><p>HBase 通过 ZooKeeper 来完成选举 HMaster、监控 Region Server、维护元数据集群配置等工作，主要工作职责如下：</p><ul><li>选举HMaster：通ooKeeper来保证集中有1HMaster在运行，如果 HMaster 异常，则会通过选举机制产生新的 HMaster 来提供服务；</li><li>监控Region Server: 通过 ZooKeeper 来监控 Region Server 的状态，当Region Server 有异常的时候，通过回调的形式通知 HMaster 有关Region Server 上下线的信息；</li><li>维护元数据和集群配置：通过ooKeeper储B信息并对外提供访问接口。</li></ul><blockquote><p>:five: HDFS</p></blockquote><p>HDFS 为 HBase 提供底层数据存储服务，同时为 HBase提供高可用的支持， HBase 将 HLog 存储在 HDFS 上，当服务器发生异常宕机时，可以重放 HLog 来恢复数据。</p><h2 id="5-HBase-的写入流程"><a href="#5-HBase-的写入流程" class="headerlink" title="5. HBase 的写入流程"></a>5. HBase 的写入流程</h2><p>写入流程如下图所示:</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401062026432.png" alt=""><p><strong>Region Server 寻址</strong></p><ol><li><p>HBase Client 访问 ZooKeeper；</p></li><li><p>获取写入 Region 所在的位置，即获取 hbase:meta 表位于哪个 Region Server；</p></li><li><p>访问对应的 Region Server；</p></li><li><p>获取 hbase:meta 表，并查询出目标数据位于哪个 Region Server 中的哪个 Region 中。并将该 table 的 Region 信息以及 meta 表的位置信息缓存在客户端的meta cache，方便下次访问；</p></li></ol><p><strong>写 Hlog</strong></p><ol start="5"><li>HBase Client 向 Region Server 发送写 Hlog 请求；</li><li>Region Server 会通过顺序写入磁盘的方式，将 Hlog 存储在 HDFS 上；</li></ol><p><strong>写 MemStore 并返回结果</strong></p><ol start="7"><li>HBase Client 向 Region Server 发送写 MemStore 请求；</li><li>只有当写 Hlog 和写 MemStore 的请求都成功完成之后，并将反馈给 HBase Client，这时对于整个 HBase Client 写入流程已经完成。</li></ol><p><strong>MemStore 刷盘</strong></p><p>HBase 会根据 MemStore 配置的刷盘策略定时将数据刷新到 StoreFile 中，完成数据持久化存储。</p><h2 id="6-HBase-的读流程"><a href="#6-HBase-的读流程" class="headerlink" title="6. HBase 的读流程"></a>6. HBase 的读流程</h2><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401062130071.png" alt=""><p><strong>Region Server 寻址</strong></p><p>HBase Client 请求 ZooKeeper 获取元数据表所在的 Region Server的地址。</p><p><strong>Region 寻址</strong></p><p>HBase Client 请求 RegionServer 获取需要访问的元数据，查询出目标数据位于哪个 Region Server 中的哪个 Region 中。并将该 table 的 region 信息以 及 meta 表的位置信息缓存在客户端的 meta cache，方便下次访问。</p><p><strong>数据读取</strong></p><p>HBase Client 请求数据所在的 Region Server，获取所需要的数据。 Region 首先在 MemStore 中查找，若命中则返回；如果在MemStore 中找不到，则通过 BloomFilter 判断数据是否存在；如果存在，则在:StoreFile 中扫描并将结果返回客户端。</p><h2 id="7-HBase-的数据删除"><a href="#7-HBase-的数据删除" class="headerlink" title="7. HBase 的数据删除"></a>7. HBase 的数据删除</h2><p>HBase 的数据删除操作并不会立即将数据从磁盘上删除，因为 HBase 的数据通常被保存在 HDFS 中，而 HDFS 只允许新增或者追加数据文件，所以删除操作主要对要被删除的数据进行标记。</p><p>当执行删除操作时，HBase 新插入一条相同的 Key-Value 数据，但是 keyType&#x3D;Delete，这便意味着数据被删除了，直到发生 Major_compaction 操作，数据才会真正地被从磁盘上删除。</p><p>HBase这种基于标记删除的方式是按顺序写磁盘的的，因此很容易实现海量数据的快速删除，有效避免了在海量数据中查找数据、执行删除及重建索引等复杂的流程。</p><h2 id="8-Hbase完全分布式部署"><a href="#8-Hbase完全分布式部署" class="headerlink" title="8. Hbase完全分布式部署"></a>8. Hbase完全分布式部署</h2><p><strong>实验环境</strong>:</p><table><thead><tr><th>容器系统</th><th>容器主机名</th><th>容器ip</th><th>容器用户名</th></tr></thead><tbody><tr><td>centos7</td><td>master</td><td>192.168.1.10</td><td>root</td></tr><tr><td>centos7</td><td>slave1</td><td>192.168.1.20</td><td>root</td></tr><tr><td>centos7</td><td>slave2</td><td>192.168.1.30</td><td>root</td></tr></tbody></table><p><strong>组件版本</strong></p><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>java</td><td>1.8</td></tr><tr><td>Hadoop</td><td>3.1.3</td></tr><tr><td>Hive</td><td>3.1.2</td></tr><tr><td>Mysql</td><td>5.7</td></tr><tr><td>zookeeper</td><td>3.4.6</td></tr><tr><td>HBase</td><td>2.2.3</td></tr></tbody></table><h3 id="8-1-解压所需压缩包并重命名"><a href="#8-1-解压所需压缩包并重命名" class="headerlink" title="8.1 解压所需压缩包并重命名"></a>8.1 解压所需压缩包并重命名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf /opt/software/hbase-2.2.3-bin.tar.gz -C /opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># mv /opt/module/hbase-2.2.3/ /opt/module/hbase</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-2-配置环境变量"><a href="#8-2-配置环境变量" class="headerlink" title="8.2 配置环境变量"></a>8.2 配置环境变量</h3><blockquote><p>所有节点添加</p></blockquote><p><strong>方法1:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /etc/profile<span class="token comment">#添加以下内容</span><span class="token comment">#hbase</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HBASE_HOME</span><span class="token operator">=</span>/opt/module/hbase<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HBASE_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:wq保存退出</p><p><strong>方法2:</strong></p><p>添加环境变量:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">>></span>/etc/profile<span class="token operator">&lt;&lt;</span><span class="token string">EOF#hbaseexport HBASE_HOME=/opt/module/hbaseexport PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$HBASE_HOME</span>/binEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新生效:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="8-3-配置hbase-env-sh和hbase-site-xml和regionservers三个主要配置文件"><a href="#8-3-配置hbase-env-sh和hbase-site-xml和regionservers三个主要配置文件" class="headerlink" title="8.3 配置hbase.env.sh和hbase-site.xml和regionservers三个主要配置文件"></a>8.3 配置<code>hbase.env.sh</code>和<code>hbase-site.xml</code>和<code>regionservers</code>三个主要配置文件</h3><h4 id="8-3-1-修改hbase-env-sh"><a href="#8-3-1-修改hbase-env-sh" class="headerlink" title="8.3.1 修改hbase.env.sh"></a>8.3.1 修改hbase.env.sh</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cd $HBASE_HOME/conf</span><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># vi hbase-env.sh </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>配置修改内容如下</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/module/jdk<span class="token comment">#28行</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HBASE_CLASSPATH</span><span class="token operator">=</span>/opt/module/hbase/conf<span class="token comment">#31行</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/opt/module/hadoop<span class="token comment">#手动添加</span><span class="token comment">#是否使用hbase自带的zookeeper服务(默认true使用)</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HBASE_MANAGES_ZK</span><span class="token operator">=</span>false   <span class="token comment">#126行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-2-修改-hbase-site-xml"><a href="#8-3-2-修改-hbase-site-xml" class="headerlink" title="8.3.2 修改 hbase-site.xml"></a>8.3.2 修改 hbase-site.xml</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># pwd</span>/opt/module/hbase/conf<span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># vi hbase-site.xml </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>新增配置如下:</p></blockquote><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--hbase.rootdir中主机和端口号需要与$HADOOP_HOME/etc/hadoop/core-site.xml文件中fs.default.name的主机名和端口号相同--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.rootdir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000/hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--HBase的运行模式。false是单机模式，true是分布式模式。若为false,HBase和Zookeeper会运行在同一个JVM里面。默认: false--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.cluster.distributed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--默认2181--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master,slave1,slave2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!--使用本地文件系统设置为false，使用hdfs设置为true--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.unsafe.stream.capability.enforce<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-3-配置-regionservers"><a href="#8-3-3-配置-regionservers" class="headerlink" title="8.3.3 配置 regionservers"></a>8.3.3 配置 regionservers</h4><blockquote><p>修改成自己的集群节点名称</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># cat regionservers </span>masterslave1slave2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-更换jar包"><a href="#8-4-更换jar包" class="headerlink" title="8.4 更换jar包"></a>8.4 更换jar包</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># rm -rf /opt/module/hbase/lib/client-facing-thirdparty/slf4j-*</span><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># cp $HADOOP_HOME/share/hadoop/common/lib/slf4j-* $HBASE_HOME/lib/client-facing-thirdparty</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看替换过后的jar包:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># ll $HBASE_HOME/lib/client-facing-thirdparty | grep slf4j-*</span>-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">41203</span> Jan  <span class="token number">6</span> <span class="token number">14</span>:06 slf4j-api-1.7.25.jar-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">12244</span> Jan  <span class="token number">6</span> <span class="token number">14</span>:06 slf4j-log4j12-1.7.25.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="8-5-分发文件至子节点"><a href="#8-5-分发文件至子节点" class="headerlink" title="8.5 分发文件至子节点"></a>8.5 分发文件至子节点</h3><blockquote><p>切记子节点环境没有配置的话也要进行分发</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/hbase/ root@slave1:/opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/hbase/ root@slave2:/opt/module/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># scp /etc/profile root@slave1:/etc/profile</span>profile                                                                         <span class="token number">100</span>% <span class="token number">2481</span>     <span class="token number">7</span>.9MB/s   00:00  <span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># scp /etc/profile root@slave2:/etc/profile</span>profile                                                                         <span class="token number">100</span>% <span class="token number">2481</span>     <span class="token number">7</span>.9MB/s   00:00<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>:warning: 分发完环境变量后记住要重新刷新载入环境变量</p><h3 id="8-6-启动服务"><a href="#8-6-启动服务" class="headerlink" title="8.6 启动服务"></a>8.6 启动服务</h3><blockquote><p>前提:需要先启动zookeeper集群,如果没有启动则重启zookeeper服务</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># start-hbase.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看进程:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401062215397.png" alt="image-20240106221529229"></p><p>停止hbase：</p><pre class="line-numbers language-none"><code class="language-none">stop_hbase.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动客户端：</p><pre class="line-numbers language-none"><code class="language-none">hbase shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>网页访问地址：</p><blockquote><p>注: 如果是docker容器环境,需要添加端口映射,开放外部16010端口</p></blockquote><p><a href="http://master:16010/">http://master:16010</a></p><h2 id="9-hbase基本命令："><a href="#9-hbase基本命令：" class="headerlink" title="9.hbase基本命令："></a>9.hbase基本命令：</h2><p>1、查看所有命令</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、查看指定命令的用法</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">help <span class="token string">'create'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、创建一张表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#create '表名'，'列名'（column family）</span><span class="token keyword">create</span> <span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'cf'</span><span class="token comment"># 创建指定namespace目录下面的表;所有的表名左边要加上namespace,如果不加,默认是default</span><span class="token keyword">create</span> <span class="token string">'mydata:test'</span><span class="token punctuation">,</span><span class="token string">'cf'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>4、查看表结构</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#list 表名</span>list <span class="token string">'test'</span><span class="token comment">#描述这张表</span><span class="token keyword">describe</span> <span class="token string">'test'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5、插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># put 表名,键(主键),列的名字,值</span>put <span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'cf:name'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span>put <span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'cf:age'</span><span class="token punctuation">,</span><span class="token string">'18'</span><span class="token comment"># 指定namespace的表插入记录</span>put <span class="token string">'mydata:test'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'cf:name'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span>put <span class="token string">'mydata:test'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span class="token punctuation">,</span><span class="token string">'cf:age'</span><span class="token punctuation">,</span><span class="token string">'18'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、查询</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 查询所有记录</span><span class="token comment"># scan 表名</span>scan <span class="token string">'test'</span><span class="token comment"># 扫描表的记录</span>scan <span class="token string">'mydata:test'</span><span class="token comment"># 查询所有记录（根据主键查询）</span><span class="token comment"># get 表名,键</span>get <span class="token string">'test'</span><span class="token punctuation">,</span><span class="token string">'01'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7、删除表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#disable 表名</span><span class="token keyword">disable</span> <span class="token string">'test'</span><span class="token comment">#drop ‘表名’</span><span class="token keyword">drop</span> <span class="token string">'test'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8、退出客户端</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">quit<span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>hbase查看命名空间：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token operator">></span> list_namespace<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401092346049.png" alt="image-20230322130838868"></p><h2 id="9-HBase-Shell-操作"><a href="#9-HBase-Shell-操作" class="headerlink" title="9.HBase Shell 操作"></a>9.HBase Shell 操作</h2><h3 id="9-1-基本操作"><a href="#9-1-基本操作" class="headerlink" title="9.1 基本操作"></a>9.1 基本操作</h3><blockquote><p>1）进入 HBase 客户端命令行</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># hbase shell</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402211023925.png" alt="image-20240221102340862"></p><blockquote><p>2）查看帮助命令</p></blockquote><p>​能够展示 HBase 中所有能使用的命令，主要使用的命令有 namespace 命令空间相关， DDL 创建修改表格，DML 写入读取数据。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">001</span>:<span class="token number">0</span><span class="token operator">></span> help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402211024170.png" alt="image-20240221102431101"></p><h3 id="9-2-namespace"><a href="#9-2-namespace" class="headerlink" title="9.2 namespace"></a>9.2 namespace</h3><h4 id="9-2-1-创建命名空间"><a href="#9-2-1-创建命名空间" class="headerlink" title="9.2.1 创建命名空间"></a>9.2.1 创建命名空间</h4><p>使用特定的 help 语法能够查看命令如何使用。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">002</span>:<span class="token number">0</span><span class="token operator">></span> help <span class="token string">'create_namespace'</span><span class="token keyword">Create</span> namespace<span class="token punctuation">;</span> pass namespace name<span class="token punctuation">,</span><span class="token operator">and</span> <span class="token keyword">optionally</span> a dictionary <span class="token keyword">of</span> namespace configuration<span class="token punctuation">.</span>Examples:  hbase<span class="token operator">></span> create_namespace <span class="token string">'ns1'</span>  hbase<span class="token operator">></span> create_namespace <span class="token string">'ns1'</span><span class="token punctuation">,</span> &#123;<span class="token string">'PROPERTY_NAME'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'PROPERTY_VALUE'</span>&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-2-创建命名空间-bigdata"><a href="#9-2-2-创建命名空间-bigdata" class="headerlink" title="9.2.2 创建命名空间 bigdata"></a>9.2.2 创建命名空间 bigdata</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">003</span>:<span class="token number">0</span><span class="token operator">></span> create_namespace <span class="token string">'bigdata'</span>Took <span class="token number">0.7499</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="9-2-3-查看所有的命名空间"><a href="#9-2-3-查看所有的命名空间" class="headerlink" title="9.2.3 查看所有的命名空间"></a>9.2.3 查看所有的命名空间</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">004</span>:<span class="token number">0</span><span class="token operator">></span> list_namespaceNAMESPACEbigdata<span class="token keyword">default</span>hbase<span class="token number">3</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>Took <span class="token number">0.0889</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-2-4-删除命名空间"><a href="#9-2-4-删除命名空间" class="headerlink" title="9.2.4 删除命名空间"></a>9.2.4 删除命名空间</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">drop_namespace <span class="token string">'namespace_name'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="9-3-DDL"><a href="#9-3-DDL" class="headerlink" title="9.3 DDL"></a>9.3 DDL</h3><p> <em>DDL是数据定义语言的缩写，定义了不同的数据段、数据库、表、列、索引等数据库对象</em></p><h4 id="9-3-1-创建表"><a href="#9-3-1-创建表" class="headerlink" title="9.3.1 创建表"></a>9.3.1 创建表</h4><p>​在 bigdata 命名空间中创建表格 <code>student</code>，两个列族。<code>info</code> 列族数据维护的版本数为 <code>5 个</code>， 如果不写默认版本数为 1。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">007</span>:<span class="token number">0</span><span class="token operator">></span> <span class="token keyword">create</span> <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span> &#123;NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'info'</span><span class="token punctuation">,</span>VERSIONS <span class="token operator">=</span><span class="token operator">></span> <span class="token number">5</span>&#125;<span class="token punctuation">,</span> &#123;NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'msg'</span>&#125;Created <span class="token keyword">table</span> bigdata:studentTook <span class="token number">1.3605</span> seconds<span class="token operator">=</span><span class="token operator">></span> Hbase::<span class="token keyword">Table</span> <span class="token operator">-</span> bigdata:student<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数解释：</strong></p><p>这条命令是用来在 HBase 中创建一个名为 <code>bigdata:student</code> 的表，具有两个列族：<code>info</code> 和 <code>msg</code>。</p><ul><li><code>bigdata</code> 是命名空间，用于组织表以防止命名冲突。</li><li><code>student</code> 是表名。</li><li><code>&#123;NAME =&gt; &#39;info&#39;, VERSIONS =&gt; 5&#125;</code>：定义了一个名为 <code>info</code> 的列族，它可以存储最多 5 个版本的数据。</li><li><code>&#123;NAME =&gt; &#39;msg&#39;&#125;</code>：定义了一个名为 <code>msg</code> 的列族，它的版本数未指定，将使用 HBase 的默认设置。</li></ul><p>这个命令的作用是创建一个包含 <code>info</code> 和 <code>msg</code> 两个列族的表，允许每个列族存储多个版本的数据。</p><p>​如果创建表格只有一个列族，没有列族属性，可以简写。</p><p>​如果不写命名空间，使用默认的命名空间 default。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase:<span class="token number">009</span>:<span class="token number">0</span><span class="token operator">></span> <span class="token keyword">create</span> <span class="token string">'student1'</span><span class="token punctuation">,</span><span class="token string">'info'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="9-3-2-查看表"><a href="#9-3-2-查看表" class="headerlink" title="9.3.2 查看表"></a>9.3.2 查看表</h4><p>查看表有两个命令：<code>list</code> 和 <code>describe</code></p><blockquote><p>list：查看所有的表名</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">008</span>:<span class="token number">0</span><span class="token operator">></span> list<span class="token keyword">TABLE</span>bigdata:student<span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>Took <span class="token number">0.0262</span> seconds<span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span><span class="token string">"bigdata:student"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>describe：查看一个表的详情</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">011</span>:<span class="token number">0</span><span class="token operator">></span> <span class="token keyword">describe</span> <span class="token string">'bigdata:student'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402211038264.png" alt="image-20240221103808201"></p><h4 id="9-3-3-修改表"><a href="#9-3-3-修改表" class="headerlink" title="9.3.3 修改表"></a>9.3.3 修改表</h4><p>表名创建时写的所有和列族相关的信息，都可以后续通过 alter 修改，包括增加删除列 族。</p><blockquote><p>（1）增加列族和修改信息都使用<code>覆盖</code>的方法</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">013</span>:<span class="token number">0</span><span class="token operator">></span> <span class="token keyword">alter</span> <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span> &#123;NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'f1'</span><span class="token punctuation">,</span>VERSIONS <span class="token operator">=</span><span class="token operator">></span> <span class="token number">3</span>&#125;Updating <span class="token keyword">all</span> regions <span class="token keyword">with</span> the new <span class="token keyword">schema</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">1</span> regions updated<span class="token punctuation">.</span>Done<span class="token punctuation">.</span>Took <span class="token number">2.4018</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改结果：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402211040862.png" alt="image-20240221104058797"></p><blockquote><p>（2）删除信息使用特殊的语法</p></blockquote><p>方法1：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">016</span>:<span class="token number">0</span><span class="token operator">></span> <span class="token keyword">alter</span> <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span> NAME <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'f1'</span> <span class="token punctuation">,</span> METHOD <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'delete'</span>Updating <span class="token keyword">all</span> regions <span class="token keyword">with</span> the new <span class="token keyword">schema</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">1</span> regions updated<span class="token punctuation">.</span>Done<span class="token punctuation">.</span>Took <span class="token number">2.3287</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法2：:star:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">017</span>:<span class="token number">0</span><span class="token operator">></span> <span class="token keyword">alter</span> <span class="token string">'bigdata:student'</span> <span class="token punctuation">,</span> <span class="token string">'delete'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'f1'</span>Updating <span class="token keyword">all</span> regions <span class="token keyword">with</span> the new <span class="token keyword">schema</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">1</span> regions updated<span class="token punctuation">.</span>Done<span class="token punctuation">.</span>Took <span class="token number">2.1905</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结：</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">第一个指令 alter <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span> NAME => <span class="token string">'f1'</span><span class="token punctuation">,</span> METHOD => <span class="token string">'delete'</span> 是用于从 bigdata 命名空间中的 student 表中删除指定的列族 f1。这个指令使用了 NAME => <span class="token string">'f1'</span><span class="token punctuation">,</span> METHOD => <span class="token string">'delete'</span> 的语法来指定要删除的列族。第二个指令 alter <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span> => <span class="token string">'f1'</span> 则是用于从 bigdata 命名空间中的 student 表中删除列族 f1。这个指令使用了 <span class="token string">'delete'</span> => <span class="token string">'f1'</span> 的语法来指定要删除的列族。总的来说，这两个指令的作用是一样的，都是用于删除表中的指定列族，只是语法略有不同。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-3-4-删除表"><a href="#9-3-4-删除表" class="headerlink" title="9.3.4 删除表"></a>9.3.4 删除表</h4><p>shell 中删除表格,需要<code>先将表格状态设置为不可用。</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">019</span>:<span class="token number">0</span><span class="token operator">></span> <span class="token keyword">disable</span> <span class="token string">'bigdata:student'</span>Took <span class="token number">0.8051</span> secondshbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">020</span>:<span class="token number">0</span><span class="token operator">></span> <span class="token keyword">drop</span> <span class="token string">'bigdata:student'</span>Took <span class="token number">0.4800</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="9-4-DML"><a href="#9-4-DML" class="headerlink" title="9.4  DML"></a>9.4  DML</h3><p>​DML是数据操作语言（Data Manipulation Language）的缩写，是一种用于管理数据库中数据的语言。DML允许用户查询、插入、更新和删除数据库中的数据。常见的DML命令包括SELECT（查询数据）、INSERT（插入数据）、UPDATE（更新数据）和DELETE（删除数据）。通过使用DML，用户可以有效地操作数据库中的数据，实现对数据的增删改查操作。与DML相对的是DDL（数据定义语言），DDL用于定义数据库的结构，例如创建表、定义索引等。在数据库操作中，DML和DDL是两个重要的概念，分别用于处理数据和定义数据结构。</p><h4 id="9-4-1-写入数据"><a href="#9-4-1-写入数据" class="headerlink" title="9.4.1 写入数据"></a>9.4.1 写入数据</h4><p>在 HBase 中如果想要写入数据，只能添加结构中最底层的 <code>cell</code>。可以手动写入时间戳指 定 cell 的版本，推荐不写默认使用当前的系统时间。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">026</span>:<span class="token number">0</span><span class="token operator">></span> put <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'info:name'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span>hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">027</span>:<span class="token number">0</span><span class="token operator">></span> put <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'info:name'</span><span class="token punctuation">,</span><span class="token string">'lisi'</span>hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">028</span>:<span class="token number">0</span><span class="token operator">></span> put <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'info:age'</span><span class="token punctuation">,</span><span class="token string">'18'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果重复写入相同 rowKey，相同列的数据，会写入多个版本进行覆盖。</p><h4 id="9-4-2-读取数据"><a href="#9-4-2-读取数据" class="headerlink" title="9.4.2 读取数据"></a>9.4.2 读取数据</h4><p>读取数据的方法有两个：<code>get</code> 和 <code>scan</code>。</p><p>get 最大范围是一行数据，也可以进行列的过滤，读取数据的<code>结果为多行 cell。</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">035</span>:<span class="token number">0</span><span class="token operator">></span> get <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span><span class="token string">'1001'</span><span class="token keyword">COLUMN</span>                               CELL info:age                            <span class="token keyword">timestamp</span><span class="token operator">=</span><span class="token number">1708486781447</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token number">18</span> info:name                           <span class="token keyword">timestamp</span><span class="token operator">=</span><span class="token number">1708486751789</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token operator">=</span>lisi<span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>Took <span class="token number">0.0114</span> secondshbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">036</span>:<span class="token number">0</span><span class="token operator">></span> get <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span><span class="token string">'1001'</span> <span class="token punctuation">,</span> &#123;<span class="token keyword">COLUMN</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'info:name'</span>&#125;<span class="token keyword">COLUMN</span>                               CELL info:name                           <span class="token keyword">timestamp</span><span class="token operator">=</span><span class="token number">1708486751789</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token operator">=</span>lisi<span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>Took <span class="token number">0.0213</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以修改读取 cell 的版本数，默认读取一个。最多能够读取当前列族设置的维护版本 数。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:037:<span class="token operator"><span class="token file-descriptor important">0</span>></span> get <span class="token string">'bigdata:student'</span>,<span class="token string">'1001'</span> , <span class="token punctuation">&#123;</span>COLUMN <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'info:name'</span>, VERSIONS <span class="token operator">=</span><span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">&#125;</span>COLUMN                               CELL info:name                           <span class="token assign-left variable">timestamp</span><span class="token operator">=</span><span class="token number">1708486751789</span>, <span class="token assign-left variable">value</span><span class="token operator">=</span>lisi info:name                           <span class="token assign-left variable">timestamp</span><span class="token operator">=</span><span class="token number">1708486725660</span>, <span class="token assign-left variable">value</span><span class="token operator">=</span>zhangsan<span class="token number">1</span> row<span class="token punctuation">(</span>s<span class="token punctuation">)</span>Took <span class="token number">0.0057</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>scan 是<code>扫描数据，能够读取多行数</code>据，<code>不建议扫描过多的数据</code>，推荐使用 <code>startRow</code> 和 <code>stopRow</code> 来控制读取的数据，默认范围左闭右开。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">038</span>:<span class="token number">0</span><span class="token operator">></span> scan <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span> &#123;STARTROW <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'1001'</span><span class="token punctuation">,</span>STOPROW <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'1002'</span>&#125;<span class="token keyword">ROW</span>                                  <span class="token keyword">COLUMN</span><span class="token operator">+</span>CELL <span class="token number">1001</span>                                <span class="token keyword">column</span><span class="token operator">=</span>info:age<span class="token punctuation">,</span> <span class="token keyword">timestamp</span><span class="token operator">=</span><span class="token number">1708486781447</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token operator">=</span><span class="token number">18</span> <span class="token number">1001</span>                                <span class="token keyword">column</span><span class="token operator">=</span>info:name<span class="token punctuation">,</span> <span class="token keyword">timestamp</span><span class="token operator">=</span><span class="token number">1708486751789</span><span class="token punctuation">,</span> <span class="token keyword">value</span><span class="token operator">=</span>lisi<span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>Took <span class="token number">0.0392</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&#x3D;&#x3D;实际开发中使用 shell 的机会不多，所有丰富的使用方法到 API 中介绍。&#x3D;&#x3D;</p><h4 id="9-4-3-删除数据"><a href="#9-4-3-删除数据" class="headerlink" title="9.4.3 删除数据"></a>9.4.3 删除数据</h4><p>删除数据的方法有两个：<code>delete</code> 和 <code>deleteall</code>。</p><p>delete 表示删除一个版本的数据，即为 1 个 cell，不填写版本默认删除最新的一个版本。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">039</span>:<span class="token number">0</span><span class="token operator">></span> <span class="token keyword">delete</span> <span class="token string">'bigdata:student'</span><span class="token punctuation">,</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'info:name'</span>Took <span class="token number">0.0302</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>deleteall 表示删除所有版本的数据，即为当前行当前列的多个 cell。</p><p><code>（执行命令会标记 数据为要删除，不会直接将数据彻底删除，删除数据只在特定时期清理磁盘时进行）</code></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">hbase<span class="token punctuation">(</span>main<span class="token punctuation">)</span>:<span class="token number">040</span>:<span class="token number">0</span><span class="token operator">></span> deleteall <span class="token string">'bigdata:student'</span> <span class="token punctuation">,</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'info:name'</span>Took <span class="token number">0.0099</span> seconds<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="10-HBase-API"><a href="#10-HBase-API" class="headerlink" title="10. HBase API"></a>10. HBase API</h3><h4 id="10-1-环境准备"><a href="#10-1-环境准备" class="headerlink" title="10.1 环境准备"></a>10.1 环境准备</h4><p>新建项目后在 pom.xml 中添加依赖：</p><p>注意：会报错 javax.el 包不存在，是一个测试用的依赖，不影响使用</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.hbase<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hbase-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.glassfish<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.1-b06<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-2-创建连接"><a href="#10-2-创建连接" class="headerlink" title="10.2 创建连接"></a>10.2 创建连接</h4><p>​根据官方 API 介绍，HBase 的客户端连接由 ConnectionFactory 类来创建，用户使用完成 之后需要手动关闭连接。同时连接是一个重量级的，推荐一个进程使用一个连接，对 HBase 的命令通过连接中的两个属性 Admin 和 Table 来实现。</p><h5 id="10-2-1-单线程创建连接"><a href="#10-2-1-单线程创建连接" class="headerlink" title="10.2.1 单线程创建连接"></a>10.2.1 单线程创建连接</h5><p>方案1:</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">hbase_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span>Configuration<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>AsyncConnection<span class="token punctuation">,</span> Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>CompletableFuture<span class="token keyword">object</span> HBaseConnect <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 1. 创建配置对象</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> <span class="token keyword">new</span> Configuration<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 2. 添加配置参数</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"master,slave1,slave2"</span><span class="token punctuation">)</span>    <span class="token comment">// 3. 创建 hbase 的连接</span>    <span class="token comment">// 默认使用同步连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 可以使用异步连接</span>    <span class="token comment">// 主要影响后续的 DML 操作</span>    <span class="token keyword">val</span> asyncConnection<span class="token operator">:</span> CompletableFuture<span class="token punctuation">[</span>AsyncConnection<span class="token punctuation">]</span> <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createAsyncConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 4. 使用连接</span>    println<span class="token punctuation">(</span>connection<span class="token punctuation">)</span>    <span class="token comment">// 5. 关闭连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方案2:</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span>Configuration<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> HConstants<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>ConnectionFactory<span class="token punctuation">,</span> Connection<span class="token punctuation">&#125;</span><span class="token keyword">object</span> SingleThreadConnectionExample <span class="token punctuation">&#123;</span>  <span class="token comment">// HBase 连接配置</span>  <span class="token keyword">val</span> conf<span class="token operator">:</span> Configuration <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> hbaseConf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    hbaseConf<span class="token punctuation">.</span>set<span class="token punctuation">(</span>HConstants<span class="token punctuation">.</span>ZOOKEEPER_QUORUM<span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">)</span> <span class="token comment">// 设置 Zookeeper 地址</span>    hbaseConf  <span class="token punctuation">&#125;</span>  <span class="token comment">// 创建 HBase 连接</span>  <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在这里使用 connection 对象执行操作</span>    <span class="token comment">// 例如：connection.getTable(tableName)，connection.getAdmin() 等</span>    <span class="token comment">// 关闭连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-2-2-多线程创建连接-warning-待测试"><a href="#10-2-2-多线程创建连接-warning-待测试" class="headerlink" title="10.2.2 多线程创建连接:warning:待测试"></a>10.2.2 多线程创建连接:warning:待测试</h5><p>使用类单例模式,确保使用一个连接，可以同时用于多个线程。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span>Configuration<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> HConstants<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span>ConnectionFactory<span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>ExecutionContext<span class="token punctuation">.</span>Implicits<span class="token punctuation">.</span>global<span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span>Future<span class="token keyword">object</span> MultiThreadConnectionExample <span class="token punctuation">&#123;</span>  <span class="token comment">// HBase 连接配置</span>  <span class="token keyword">val</span> conf<span class="token operator">:</span> Configuration <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> hbaseConf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    hbaseConf<span class="token punctuation">.</span>set<span class="token punctuation">(</span>HConstants<span class="token punctuation">.</span>ZOOKEEPER_QUORUM<span class="token punctuation">,</span> <span class="token string">"localhost"</span><span class="token punctuation">)</span> <span class="token comment">// 设置 Zookeeper 地址</span>    hbaseConf  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> createConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Future<span class="token punctuation">[</span><span class="token builtin">Unit</span><span class="token punctuation">]</span> <span class="token operator">=</span> Future <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 在这里使用 connection 对象执行操作</span>    <span class="token comment">// 例如：connection.getTable(tableName)，connection.getAdmin() 等</span>    <span class="token comment">// 关闭连接</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建多个连接</span>    <span class="token keyword">val</span> connections<span class="token operator">:</span> Seq<span class="token punctuation">[</span>Future<span class="token punctuation">[</span><span class="token builtin">Unit</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> to <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">.</span>map<span class="token punctuation">(</span>_ <span class="token keyword">=></span> createConnection<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 等待所有连接创建完成</span>    <span class="token keyword">val</span> allConnections<span class="token operator">:</span> Future<span class="token punctuation">[</span>Seq<span class="token punctuation">[</span><span class="token builtin">Unit</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> Future<span class="token punctuation">.</span>sequence<span class="token punctuation">(</span>connections<span class="token punctuation">)</span>    <span class="token comment">// 等待所有连接创建完成后执行其他操作</span>    allConnections<span class="token punctuation">.</span>onComplete <span class="token punctuation">&#123;</span> _ <span class="token keyword">=></span>      <span class="token comment">// 所有连接创建完成后的操作</span>      println<span class="token punctuation">(</span><span class="token string">"所有连接创建完成"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 resources 文件夹中创建配置文件 hbase-site.xml，添加以下内容(可选)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hbase.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master,slave1,slave2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402212214571.png" alt="image-20240221221429493"></p><h4 id="10-3-DDL"><a href="#10-3-DDL" class="headerlink" title="10.3 DDL"></a>10.3 DDL</h4><p>创建 HBaseDDL 类，添加静态方法即可作为工具类</p><p>官网API手册 <a href="https://hbase.apache.org/2.3/apidocs/index.html">https://hbase.apache.org/2.3/apidocs/index.html</a></p><h5 id="10-3-1-创建命名空间-namespace"><a href="#10-3-1-创建命名空间-namespace" class="headerlink" title="10.3.1.创建命名空间(namespace)"></a>10.3.1.创建命名空间(namespace)</h5><p>方案1:</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hj_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span>Configuration<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> NamespaceDescriptor<span class="token punctuation">,</span> NamespaceExistException<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Admin<span class="token punctuation">,</span> Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>IOException<span class="token comment">/** * Connection: 通过ConnectionFactory获取，是重量级实现 * Table: 主要负责DML操作 * Admin: 只要负责DDl操作 */</span><span class="token keyword">object</span> CreateNameSpace <span class="token punctuation">&#123;</span>  <span class="token comment">//连接hbase</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> conf<span class="token operator">:</span> Configuration <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> e<span class="token operator">:</span> IOException <span class="token keyword">=></span>        e<span class="token punctuation">.</span>printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> e    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//创建的命名空间名字</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    createNameSpace<span class="token punctuation">(</span><span class="token string">"bigdata"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 创建namespace   */</span>  <span class="token keyword">def</span> createNameSpace<span class="token punctuation">(</span>nameSpace<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判空操作</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nameSpace <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> nameSpace<span class="token punctuation">.</span>isEmpty<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      System<span class="token punctuation">.</span>err<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string">"nameSpace名字不能为空"</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取Admin对象</span>    <span class="token keyword">val</span> admin<span class="token operator">:</span> Admin <span class="token operator">=</span> connection<span class="token punctuation">.</span>getAdmin    <span class="token keyword">val</span> builder<span class="token operator">:</span> NamespaceDescriptor<span class="token punctuation">.</span>Builder <span class="token operator">=</span> NamespaceDescriptor<span class="token punctuation">.</span>create<span class="token punctuation">(</span>nameSpace<span class="token punctuation">)</span>    <span class="token keyword">val</span> namespaceDescriptor<span class="token operator">:</span> NamespaceDescriptor <span class="token operator">=</span> builder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">//调用方法</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      admin<span class="token punctuation">.</span>createNamespace<span class="token punctuation">(</span>namespaceDescriptor<span class="token punctuation">)</span>      println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">nameSpace</span></span><span class="token string"> 创建成功"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> _<span class="token operator">:</span> NamespaceExistException <span class="token keyword">=></span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">nameSpace</span></span><span class="token string"> 已经存在"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      admin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:star: 方案2:</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hj_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> NamespaceDescriptor<span class="token punctuation">,</span> NamespaceExistException<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Admin<span class="token punctuation">,</span> Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">&#125;</span><span class="token keyword">object</span> CreateNamespaceDemo <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 获取 Admin 对象</span>    <span class="token keyword">val</span> admin<span class="token operator">:</span> Admin <span class="token operator">=</span> connection<span class="token punctuation">.</span>getAdmin    <span class="token comment">// 定义要创建的命名空间名称</span>    <span class="token keyword">val</span> nameSpaceName <span class="token operator">=</span> <span class="token string">"bigdata123"</span>    <span class="token comment">// 创建命名空间描述符</span>    <span class="token keyword">val</span> namespaceDescriptor <span class="token operator">=</span> NamespaceDescriptor<span class="token punctuation">.</span>create<span class="token punctuation">(</span>nameSpaceName<span class="token punctuation">)</span><span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 创建命名空间 (调用方法1)</span>    <span class="token comment">//    admin.createNamespace(namespaceDescriptor)</span>    <span class="token comment">// 创建命名空间 (调用方法2)</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      admin<span class="token punctuation">.</span>createNamespace<span class="token punctuation">(</span>namespaceDescriptor<span class="token punctuation">)</span>      println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">nameSpaceName</span></span><span class="token string"> 创建成功"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> _<span class="token operator">:</span> NamespaceExistException <span class="token keyword">=></span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span>println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">nameSpaceName</span></span><span class="token string"> 已经存在"</span></span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>      admin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-3-2-创建表"><a href="#10-3-2-创建表" class="headerlink" title="10.3.2.创建表"></a>10.3.2.创建表</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hj_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Admin<span class="token punctuation">,</span> ColumnFamilyDescriptorBuilder<span class="token punctuation">,</span> Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">,</span> TableDescriptorBuilder<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Bytes<span class="token keyword">object</span> CreateTableDemo <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span> <span class="token comment">// 设置 Zookeeper 地址</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 获取 Admin 对象</span>    <span class="token keyword">val</span> admin<span class="token operator">:</span> Admin <span class="token operator">=</span> connection<span class="token punctuation">.</span>getAdmin    <span class="token comment">// 定义表格信息</span>    <span class="token keyword">val</span> tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"bigdata:student"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> columnFamily <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建表格描述符</span>    <span class="token keyword">val</span> tableDescriptor <span class="token operator">=</span> TableDescriptorBuilder<span class="token punctuation">.</span>newBuilder<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>      <span class="token punctuation">.</span>setColumnFamily<span class="token punctuation">(</span>ColumnFamilyDescriptorBuilder<span class="token punctuation">.</span>newBuilder<span class="token punctuation">(</span>columnFamily<span class="token punctuation">)</span><span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 创建表格</span>        admin<span class="token punctuation">.</span>createTable<span class="token punctuation">(</span>tableDescriptor<span class="token punctuation">)</span>    <span class="token comment">// 关闭连接</span>    admin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"表格创建成功！"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-3-3-删除表"><a href="#10-3-3-删除表" class="headerlink" title="10.3.3.删除表"></a>10.3.3.删除表</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hj_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Admin<span class="token punctuation">,</span> Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">&#125;</span><span class="token comment">/** * 删除表 */</span><span class="token keyword">object</span> DeleteTableDemo <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span> <span class="token comment">// 设置 Zookeeper 地址</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 获取 Admin 对象</span>    <span class="token keyword">val</span> admin<span class="token operator">:</span> Admin <span class="token operator">=</span> connection<span class="token punctuation">.</span>getAdmin    <span class="token comment">// 定义表格名称</span>    <span class="token keyword">val</span> tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"huangjing"</span><span class="token punctuation">)</span>    <span class="token comment">// 删除表格</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>admin<span class="token punctuation">.</span>tableExists<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      admin<span class="token punctuation">.</span>disableTable<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>      admin<span class="token punctuation">.</span>deleteTable<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>      println<span class="token punctuation">(</span><span class="token string">"表格删除成功！"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      println<span class="token punctuation">(</span><span class="token string">"要删除的表格不存在！"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 关闭连接</span>    admin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-3-4-判断表是否存在"><a href="#10-3-4-判断表是否存在" class="headerlink" title="10.3.4.判断表是否存在"></a>10.3.4.判断表是否存在</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hj_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Admin<span class="token punctuation">,</span> Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">&#125;</span><span class="token keyword">object</span> TableExistsDemo <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span><span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span><span class="token comment">// 设置 Zookeeper 地址</span>    <span class="token comment">//建立连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 获取 Admin 对象</span>    <span class="token keyword">val</span> admin<span class="token operator">:</span>Admin <span class="token operator">=</span> connection<span class="token punctuation">.</span>getAdmin    <span class="token comment">// 定义要检查的表格名称</span>    <span class="token keyword">val</span> tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"ods:lineitem_hbase"</span><span class="token punctuation">)</span>    <span class="token comment">//判断表格是否存在</span>    <span class="token keyword">val</span> tableExists <span class="token operator">=</span> admin<span class="token punctuation">.</span>tableExists<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tableExists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      println<span class="token punctuation">(</span><span class="token string">"表格存在！"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      println<span class="token punctuation">(</span><span class="token string">"表格不存在！"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//关闭连接</span>    admin<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-4-DML"><a href="#10-4-DML" class="headerlink" title="10.4 DML"></a>10.4 DML</h4><h5 id="10-4-1-写入数据"><a href="#10-4-1-写入数据" class="headerlink" title="10.4.1 写入数据"></a>10.4.1 写入数据</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hj_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">,</span> Put<span class="token punctuation">,</span> Table<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Bytes<span class="token keyword">object</span> PutDataDemo <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span><span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">//定义表格名称和列族名称</span>    <span class="token keyword">val</span> tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"bigdata:student"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> columnFamily <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建 Table 对象</span>    <span class="token keyword">val</span> table<span class="token operator">:</span> Table <span class="token operator">=</span> connection<span class="token punctuation">.</span>getTable<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>    <span class="token comment">//定义要插入的数据</span>    <span class="token keyword">val</span> rowKey <span class="token operator">=</span> <span class="token string">"1001"</span>  <span class="token comment">//数据的行键</span>    <span class="token keyword">val</span> qualifier <span class="token operator">=</span> <span class="token string">"qualifier1"</span>  <span class="token comment">//代表列限定符</span>    <span class="token keyword">val</span> value <span class="token operator">=</span> <span class="token string">"huangjing"</span>  <span class="token comment">//代表要插入的值</span>    <span class="token comment">// 创建 Put 对象，并添加数据</span>    <span class="token keyword">val</span> put <span class="token operator">=</span> <span class="token keyword">new</span> Put<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>rowKey<span class="token punctuation">)</span><span class="token punctuation">)</span>    put<span class="token punctuation">.</span>addColumn<span class="token punctuation">(</span>columnFamily<span class="token punctuation">,</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">,</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 插入数据</span>    table<span class="token punctuation">.</span>put<span class="token punctuation">(</span>put<span class="token punctuation">)</span>    <span class="token comment">//关闭连接</span>    table<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string">"数据插入成功！"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>案例1:创建hbase相关表,创建200条随机数据</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span>Configuration<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">,</span> Put<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Bytes<span class="token keyword">import</span> <span class="token namespace">scala<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Random<span class="token keyword">object</span> CreateDataExample <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf<span class="token operator">:</span> Configuration <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span> <span class="token comment">// 设置 Zookeeper 地址</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 定义表格名称</span>    <span class="token keyword">val</span> tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"example_table"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建表格连接</span>    <span class="token keyword">val</span> table <span class="token operator">=</span> connection<span class="token punctuation">.</span>getTable<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>    <span class="token comment">// 定义要插入的数据的列族和列限定符</span>    <span class="token keyword">val</span> columnFamily <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"cf"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> qualifier <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"qualifier"</span><span class="token punctuation">)</span>    <span class="token comment">// 随机生成数据</span>    <span class="token keyword">val</span> random <span class="token operator">=</span> <span class="token keyword">new</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 创建 200 条数据并插入表格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">&lt;-</span> <span class="token number">1</span> to <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">val</span> rowKey <span class="token operator">=</span> <span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"row_</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">i</span></span><span class="token string">"</span></span>      <span class="token keyword">val</span> value <span class="token operator">=</span> random<span class="token punctuation">.</span>nextInt<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span>toString      <span class="token keyword">val</span> put <span class="token operator">=</span> <span class="token keyword">new</span> Put<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>rowKey<span class="token punctuation">)</span><span class="token punctuation">)</span>      put<span class="token punctuation">.</span>addColumn<span class="token punctuation">(</span>columnFamily<span class="token punctuation">,</span> qualifier<span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>      table<span class="token punctuation">.</span>put<span class="token punctuation">(</span>put<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    println<span class="token punctuation">(</span><span class="token string">"200 条数据插入成功！"</span><span class="token punctuation">)</span>    <span class="token comment">// 关闭连接</span>    table<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-4-2-读取指定数据"><a href="#10-4-2-读取指定数据" class="headerlink" title="10.4.2 读取指定数据"></a>10.4.2 读取指定数据</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hj_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span>TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>ConnectionFactory<span class="token punctuation">,</span>Connection<span class="token punctuation">,</span>Get<span class="token punctuation">,</span>Result<span class="token punctuation">,</span>Table<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Bytes<span class="token keyword">object</span> GetDataDemo <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span><span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection <span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 定义表格名称和列族名称</span>    <span class="token keyword">val</span> tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"bigdata:student"</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> columnFamily <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建 Table 对象</span>    <span class="token keyword">val</span> table <span class="token operator">:</span> Table <span class="token operator">=</span> connection<span class="token punctuation">.</span>getTable<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>    <span class="token comment">// 定义要读取的数据的行键和列限定符</span>    <span class="token keyword">val</span> rowKey <span class="token operator">=</span> <span class="token string">"1001"</span>    <span class="token keyword">val</span> qualifier <span class="token operator">=</span> <span class="token string">"qualifier1"</span>    <span class="token comment">// 创建 Get 对象，并设置要读取的数据的行键</span>    <span class="token keyword">val</span> get <span class="token operator">=</span> <span class="token keyword">new</span> Get<span class="token punctuation">(</span>Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>rowKey<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 通过 Get 对象获取数据</span>    <span class="token keyword">val</span> result<span class="token operator">:</span> Result <span class="token operator">=</span> table<span class="token punctuation">.</span>get<span class="token punctuation">(</span>get<span class="token punctuation">)</span>    <span class="token comment">// 从 Result 对象中获取指定列族和列限定符的值</span>    <span class="token keyword">val</span> valueBytes<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">Byte</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">.</span>getValue<span class="token punctuation">(</span>columnFamily<span class="token punctuation">,</span> Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span>qualifier<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 将字节数组转换为字符串</span>    <span class="token keyword">val</span> value<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>valueBytes<span class="token punctuation">)</span>    println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"读取的值为：</span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token comment">// 关闭连接</span>    table<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-4-3-scan-扫描全部数据"><a href="#10-4-3-scan-扫描全部数据" class="headerlink" title="10.4.3 scan 扫描全部数据"></a>10.4.3 scan 扫描全部数据</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hj_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">,</span> Get<span class="token punctuation">,</span> Result<span class="token punctuation">,</span> ResultScanner<span class="token punctuation">,</span> Scan<span class="token punctuation">,</span> Table<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Bytes<span class="token comment">/** * 读取数据 读取对应的一行中的某一列 * * namespace 命名空间名称 * tableName 表格名称 * rowKey 主键 * columnFamily 列族名称 * columnName 列名 */</span><span class="token keyword">object</span> ScanDataDemo <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 定义表格名称和列族名称</span>    <span class="token keyword">val</span> tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"bigdata:student"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建 Table 对象</span>    <span class="token keyword">val</span> table<span class="token operator">:</span> Table <span class="token operator">=</span> connection<span class="token punctuation">.</span>getTable<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>    <span class="token comment">// 创建 Scan 对象</span>    <span class="token keyword">val</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> Scan<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 获取扫描结果的 ResultScanner 对象</span>    <span class="token keyword">val</span> scanner <span class="token operator">:</span> ResultScanner <span class="token operator">=</span> table<span class="token punctuation">.</span>getScanner<span class="token punctuation">(</span>scan<span class="token punctuation">)</span>    <span class="token comment">// 遍历扫描结果并打印数据 (使用表格对象的 getScanner 方法获取一个 ResultScanner 对象，用于遍历扫描结果。)</span>    scanner<span class="token punctuation">.</span>forEach <span class="token punctuation">&#123;</span>result <span class="token keyword">=></span>      <span class="token keyword">val</span> rowKey <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>result<span class="token punctuation">.</span>getRow<span class="token punctuation">)</span>      result<span class="token punctuation">.</span>rawCells<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach <span class="token punctuation">&#123;</span> cell <span class="token keyword">=></span>        <span class="token keyword">val</span> family <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>getFamilyArray<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getFamilyOffset<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getFamilyLength<span class="token punctuation">)</span>        <span class="token keyword">val</span> qualifier <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>getQualifierArray<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getQualifierOffset<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getQualifierLength<span class="token punctuation">)</span>        <span class="token keyword">val</span> value <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>getValueArray<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getValueOffset<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getValueLength<span class="token punctuation">)</span>        println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"Row key: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">rowKey</span></span><span class="token string">, Family: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">family</span></span><span class="token string">, Qualifier: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">qualifier</span></span><span class="token string">, Value: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 关闭 ResultScanner 对象</span>    scanner<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 关闭连接</span>    table<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-4-4-删除表数据"><a href="#10-4-4-删除表数据" class="headerlink" title="10.4.4 删除表数据"></a>10.4.4 删除表数据</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hj_test</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">,</span> ResultScanner<span class="token punctuation">,</span> Scan<span class="token punctuation">,</span> Table<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Bytes<span class="token keyword">object</span> ScanDataDemo <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 定义表格名称</span>    <span class="token keyword">val</span> tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"bigdata:student"</span><span class="token punctuation">)</span>    <span class="token comment">//    val tableName = TableName.valueOf("ods:lineitem_hbase")</span>    <span class="token comment">// 创建 Table 对象</span>    <span class="token keyword">val</span> table<span class="token operator">:</span> Table <span class="token operator">=</span> connection<span class="token punctuation">.</span>getTable<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>    <span class="token comment">// 创建 Scan 对象</span>    <span class="token keyword">val</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> Scan<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 获取扫描结果的 ResultScanner 对象</span>    <span class="token keyword">val</span> scanner<span class="token operator">:</span> ResultScanner <span class="token operator">=</span> table<span class="token punctuation">.</span>getScanner<span class="token punctuation">(</span>scan<span class="token punctuation">)</span>    <span class="token comment">// 遍历扫描结果并打印数据 (使用表格对象的 getScanner 方法获取一个 ResultScanner 对象，用于遍历扫描结果。)</span>    scanner<span class="token punctuation">.</span>forEach <span class="token punctuation">&#123;</span> result <span class="token keyword">=></span>      <span class="token keyword">val</span> rowKey <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>result<span class="token punctuation">.</span>getRow<span class="token punctuation">)</span>      result<span class="token punctuation">.</span>rawCells<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>foreach <span class="token punctuation">&#123;</span> cell <span class="token keyword">=></span>        <span class="token keyword">val</span> family <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>getFamilyArray<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getFamilyOffset<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getFamilyLength<span class="token punctuation">)</span>        <span class="token keyword">val</span> qualifier <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>getQualifierArray<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getQualifierOffset<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getQualifierLength<span class="token punctuation">)</span>        <span class="token keyword">val</span> value <span class="token operator">=</span> Bytes<span class="token punctuation">.</span>toString<span class="token punctuation">(</span>cell<span class="token punctuation">.</span>getValueArray<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getValueOffset<span class="token punctuation">,</span> cell<span class="token punctuation">.</span>getValueLength<span class="token punctuation">)</span>        println<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token id function">s</span><span class="token string">"Row key: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">rowKey</span></span><span class="token string">, Family: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">family</span></span><span class="token string">, Qualifier: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">qualifier</span></span><span class="token string">, Value: </span><span class="token interpolation"><span class="token punctuation">$</span><span class="token expression">value</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 关闭 ResultScanner 对象</span>    scanner<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 关闭连接</span>    table<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-4-5-过滤扫描"><a href="#10-4-5-过滤扫描" class="headerlink" title="10.4.5 过滤扫描"></a>10.4.5 过滤扫描</h5><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>conf<span class="token punctuation">.</span></span>Configuration<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>HBaseConfiguration<span class="token punctuation">,</span> TableName<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>client<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>Connection<span class="token punctuation">,</span> ConnectionFactory<span class="token punctuation">,</span> Scan<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>filter<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>CompareFilter<span class="token punctuation">,</span> FilterList<span class="token punctuation">,</span> SingleColumnValueFilter<span class="token punctuation">&#125;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hbase<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Bytes<span class="token keyword">object</span> ScanWithFilterDemo <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// HBase 连接配置</span>    <span class="token keyword">val</span> conf<span class="token operator">:</span> Configuration <span class="token operator">=</span> HBaseConfiguration<span class="token punctuation">.</span>create<span class="token punctuation">(</span><span class="token punctuation">)</span>    conf<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token string">"hbase.zookeeper.quorum"</span><span class="token punctuation">,</span> <span class="token string">"bigdata1,bigdata2,bigdata3"</span><span class="token punctuation">)</span> <span class="token comment">// 设置 Zookeeper 地址</span>    <span class="token comment">// 创建 HBase 连接</span>    <span class="token keyword">val</span> connection<span class="token operator">:</span> Connection <span class="token operator">=</span> ConnectionFactory<span class="token punctuation">.</span>createConnection<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>    <span class="token comment">// 定义表格名称</span>    <span class="token keyword">val</span> tableName <span class="token operator">=</span> TableName<span class="token punctuation">.</span>valueOf<span class="token punctuation">(</span><span class="token string">"ods:lineitem_hbase"</span><span class="token punctuation">)</span>    <span class="token comment">// 创建表格扫描器</span>    <span class="token keyword">val</span> table <span class="token operator">=</span> connection<span class="token punctuation">.</span>getTable<span class="token punctuation">(</span>tableName<span class="token punctuation">)</span>    <span class="token keyword">val</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> Scan<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// 创建过滤器列表</span>    <span class="token keyword">val</span> filterList <span class="token operator">=</span> <span class="token keyword">new</span> FilterList<span class="token punctuation">(</span>FilterList<span class="token punctuation">.</span>Operator<span class="token punctuation">.</span>MUST_PASS_ALL<span class="token punctuation">)</span>    <span class="token comment">// 创建列值过滤器</span>    <span class="token keyword">val</span> valueFilter <span class="token operator">=</span> <span class="token keyword">new</span> SingleColumnValueFilter<span class="token punctuation">(</span>      Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 列族名称</span>      Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"create_time"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 列限定符名称</span>      CompareFilter<span class="token punctuation">.</span>CompareOp<span class="token punctuation">.</span>EQUAL<span class="token punctuation">,</span> <span class="token comment">// 比较运算符</span>      Bytes<span class="token punctuation">.</span>toBytes<span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 目标值</span>    filterList<span class="token punctuation">.</span>addFilter<span class="token punctuation">(</span>valueFilter<span class="token punctuation">)</span>    <span class="token comment">// 设置扫描器的过滤器</span>    scan<span class="token punctuation">.</span>setFilter<span class="token punctuation">(</span>filterList<span class="token punctuation">)</span>    <span class="token comment">// 执行扫描</span>    <span class="token keyword">val</span> scanner <span class="token operator">=</span> table<span class="token punctuation">.</span>getScanner<span class="token punctuation">(</span>scan<span class="token punctuation">)</span>    <span class="token comment">// 遍历扫描结果</span>    <span class="token keyword">val</span> iterator <span class="token operator">=</span> scanner<span class="token punctuation">.</span>iterator<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span>hasNext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">val</span> result <span class="token operator">=</span> iterator<span class="token punctuation">.</span>next<span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// 处理扫描结果，例如输出或其他操作</span>      println<span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 关闭连接</span>    scanner<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    table<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后续待整理…</p>]]></content>
      
      
      <categories>
          
          <category> 大数据运维系列 </category>
          
          <category> 数据库系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bigdata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息队列-zookeeper+kafka配置</title>
      <link href="/2024/11/12/xiao-xi-dui-lie-zookeeper-kafka-pei-zhi/"/>
      <url>/2024/11/12/xiao-xi-dui-lie-zookeeper-kafka-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="4-消息队列-zookeeper-kafka"><a href="#4-消息队列-zookeeper-kafka" class="headerlink" title="4. 消息队列-zookeeper+kafka"></a>4. 消息队列-zookeeper+kafka</h1><h2 id="1-kafka"><a href="#1-kafka" class="headerlink" title="1. kafka"></a>1. kafka</h2><p>工作原理：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051534184.png" alt="图片"></p><p><strong>Producer：</strong> 生产者，发送消息的一方。生产者负责创建消息，然后将其发送到 Kafka。<br><strong>Consumer：</strong> 消费者，接受消息的一方。消费者连接到 Kafka 上并接收消息，进而进行相应的业务逻辑处理。<br><strong>Consumer Group：</strong> 一个消费者组可以包含一个或多个消费者。使用多分区 + 多消费者方式可以极大提高数据下游的处理速度，同一消费组中的消费者不会重复消费消息，同样的，不同消费组中的消费者消息消息时互不影响。Kafka 就是通过消费组的方式来实现消息 P2P 模式和广播模式。<br><strong>Broker：</strong> 服务代理节点。Broker 是 Kafka 的服务节点，即 Kafka 的服务器。<br><strong>Topic：</strong> Kafka 中的消息以 Topic 为单位进行划分，生产者将消息发送到特定的 Topic，而消费者负责订阅 Topic 的消息并进行消费。<br><strong>Partition：</strong> Topic 是一个逻辑的概念，它可以细分为多个分区，每个分区只属于单个主题。同一个主题下不同分区包含的消息是不同的，分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时候都会分配一个特定的偏移量（offset）。<br><strong>Offset：</strong> offset 是消息在分区中的唯一标识，Kafka 通过它来保证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序性而不是主题有序性。<br><strong>Replication：</strong> 副本，是 Kafka 保证数据高可用的方式，Kafka 同一 Partition 的数据可以在多 Broker 上存在多个副本，通常只有主副本对外提供读写服务，当主副本所在 broker 崩溃或发生网络异常，Kafka 会在 Controller 的管理下会重新选择新的 Leader 副本对外提供读写服务。<br><strong>Record：</strong> 实际写入 Kafka 中并可以被读取的消息记录。每个 record 包含了 key、value 和 timestamp。</p><h3 id="1-1生产者-消费者"><a href="#1-1生产者-消费者" class="headerlink" title="1.1生产者-消费者"></a>1.1生产者-消费者</h3><p><code>生产者</code>-<code>消费者</code>是一种设计模式，<code>生产者</code>和<code>消费者</code>之间通过添加一个<code>中间组件</code>来达到解耦。<code>生产者</code>向<code>中间组件</code>生成数据，<code>消费者</code>消费数据。</p><p>就像 65 哥读书时给小芳写情书，这里 65 哥就是<code>生产者</code>，情书就是<code>消息</code>，小芳就是<code>消费者</code>。但有时候小芳不在，或者比较忙，65 哥也比较害羞，不敢直接将情书塞小芳手里，于是将情书塞在小芳抽屉中。所以抽屉就是这个<code>中间组件</code>。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051534059.png" alt="图片"></p><p>在程序中我们通常使用<code>Queue</code>来作为这个<code>中间组件</code>。可以使用多线程向队列中写入数据，另外的消费者线程依次读取队列中的数据进行消费。模型如下图所示：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051534683.png" alt="图片"></p><p><code>生产者</code>-<code>消费者</code>模式通过添加一个中间层，不仅可以解耦生产者和消费者，使其易于扩展，还可以异步化调用、缓冲消息等。</p><h3 id="1-1-3-分布式队列"><a href="#1-1-3-分布式队列" class="headerlink" title="1.1.3 分布式队列"></a>1.1.3 分布式队列</h3><p>后来 65 哥和小芳异地了，65 哥在<code>卷都</code>奋斗，小芳在<code>魔都</code>逛街。于是只能通过<code>邮局</code>寄暧昧信了。这样 65 哥、邮局和小芳就成了<code>分布式</code>的了。65 哥将信件发给邮局，小芳从邮局拿到 65 哥写的信，再回去慢慢看。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401041627267.png" alt="图片"></p><p>Kafka 的消息<code>生产者</code>就是<code>Producer</code>，上游消费者进程添加 Kafka Client 创建 Kafka Producer，向 Broker 发送消息，Broker 是集群部署在远程服务器上的 Kafka Server 进程，下游消费者进程引入 Kafka Consumer API 持续消费队列中消息。</p><p>因为 Kafka Consumer 使用 Poll 的模式，需要 Consumer 主动拉去消息。所有小芳只能定期去邮局拿信件了(呃，果然主动权都在小芳手上啊)。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051534718.png" alt="图片"></p><h3 id="1-1-4-主题"><a href="#1-1-4-主题" class="headerlink" title="1.1.4 主题"></a>1.1.4 主题</h3><p>邮局不能只为 65 哥服务，虽然 65 哥一天写好几封信。但也无法挽回邮局的损失。所以邮局是可以供任何人寄信。只需要寄信人写好地址(主题)，邮局建有两地的通道就可以发收信件了。</p><p>Kafka 的 Topic 才相当于一个队列，Broker 是所有队列部署的机器。可以按业务创建不同的 Topic，Producer 向所属业务的 Topic 发送消息，相应的 Consumer 可以消费并处理消息。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051534283.png" alt="图片"></p><h3 id="1-1-5-分区"><a href="#1-1-5-分区" class="headerlink" title="1.1.5 分区"></a>1.1.5 分区</h3><p>由于 65 哥写的信太多，一个邮局已经无法满足 65 哥的需求，邮政公司只能多建几个邮局了，65 哥将信件按私密度分类(分区策略)，从不同的邮局寄送。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051534012.png" alt="图片"></p><p>同一个 Topic 可以创建多个分区。理论上分区越多并发度越高，Kafka 会根据分区策略将分区尽可能均衡的分布在不同的 Broker 节点上，以避免消息倾斜，不同的 Broker 负载差异太大。分区也不是越多越好哦，毕竟太多邮政公司也管理不过来</p><h3 id="1-1-6-副本"><a href="#1-1-6-副本" class="headerlink" title="1.1.6 副本"></a>1.1.6 副本</h3><p>为防止由于邮局的问题，比如交通断啦，邮车没油啦。导致 65 哥的暧昧信无法寄到小芳手上，使得 65 哥晚上远程跪键盘。邮局决定将 65 哥的信件复制几份发到多个正常的邮局，这样只要有一个邮局还在，小芳就可以收到 65 哥的信了。</p><p>Kafka 采用分区副本的方式来保证数据的高可用，每个分区都将建立指定数量的副本数，kakfa 保证同一分区副本尽量分布在不同的 Broker 节点上，以防止 Broker 宕机导致所有副本不可用。Kafka 会为分区的多个副本选举一个作为主副本(Leader)，主副本对外提供读写服务，从副本(Follower)实时同步 Leader 的数据。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401041627512.png" alt="图片"></p><h3 id="1-1-7-多消费者"><a href="#1-1-7-多消费者" class="headerlink" title="1.1.7 多消费者"></a>1.1.7 多消费者</h3><p>哎，65 哥的信件满天飞，小芳天天跑邮局，还要一一拆开看，65 哥写的信又臭又长，让小芳忙得满身大汗。于是小芳啪的一下，很快啊，变出多个分身去不同的邮局取信，这样小芳终于可以挤出额外的时间逛街了。</p><h3 id="1-1-8-广播消息"><a href="#1-1-8-广播消息" class="headerlink" title="1.1.8 广播消息"></a>1.1.8 广播消息</h3><p>邮局最近提供了定制明信片业务，每个人都可以设计明信片，同一个身份只能领取一种明信片。65 哥设计了一堆，广播给所有漂亮的小妹妹都可以来领取，美女啪变出的分身也可以来领取，但是同一个身份的多个分身只能取一种明信片。</p><p>Kafka 通过 Consumer Group 来实现广播模式消息订阅，即不同 group 下的 consumer 可以重复消费消息，相互不影响，同一个 group 下的 consumer 构成一个整体。</p><p><strong>最后我们完成了 Kafka 的整体架构，如下：</strong></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401041627648.png" alt="图片"></p><h2 id="2-Zookeeper"><a href="#2-Zookeeper" class="headerlink" title="2. Zookeeper"></a>2. Zookeeper</h2><p>Zookeeper 是一个成熟的分布式协调服务，它可以为分布式服务提供分布式配置服务、同步服务和命名注册等能力.。对于任何分布式系统，都需要一种协调任务的方法。Kafka 是使用 ZooKeeper 而构建的分布式系统。但是也有一些其他技术（例如 Elasticsearch 和 MongoDB）具有其自己的内置任务协调机制。</p><p>Kafka 将 Broker、Topic 和 Partition 的元数据信息存储在 Zookeeper 上。通过在 Zookeeper 上建立相应的数据节点，并监听节点的变化，Kafka 使用 Zookeeper 完成以下功能：</p><ul><li>Kafka Controller 的 Leader 选举</li><li>Kafka 集群成员管理</li><li>Topic 配置管理</li><li>分区副本管理</li></ul><p>我们看一看 Zookeeper 下 Kafka 创建的节点，即可一目了然的看出这些相关的功能。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051534155.png" alt="图片"></p><p><strong>实验环境</strong></p><table><thead><tr><th>容器系统</th><th>容器主机名</th><th>容器ip</th><th>容器用户名</th></tr></thead><tbody><tr><td>centos7</td><td>master</td><td>192.168.1.10</td><td>root</td></tr><tr><td>centos7</td><td>slave1</td><td>192.168.1.20</td><td>root</td></tr><tr><td>centos7</td><td>slave2</td><td>192.168.1.30</td><td>root</td></tr></tbody></table><blockquote><p>前提:已配置好java环境</p></blockquote><h2 id="3-zookeeper分布式部署"><a href="#3-zookeeper分布式部署" class="headerlink" title="3. zookeeper分布式部署"></a>3. zookeeper分布式部署</h2><h3 id="3-1-解压所需压缩包并重命名"><a href="#3-1-解压所需压缩包并重命名" class="headerlink" title="3.1 解压所需压缩包并重命名"></a>3.1 解压所需压缩包并重命名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf /opt/software/zookeeper-3.4.6.tar.gz -C /opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># mv /opt/module/zookeeper-3.4.6/ /opt/module/zookeeper</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-配置环境变量"><a href="#3-2-配置环境变量" class="headerlink" title="3.2 配置环境变量"></a>3.2 配置环境变量</h3><blockquote><p>所有节点添加</p></blockquote><p>添加环境变量:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#zookeeper</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ZK_HOME</span><span class="token operator">=</span>/opt/module/zookeeper<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$ZK_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">>></span>/etc/profile<span class="token operator">&lt;&lt;</span><span class="token string">EOF#zookeeperexport ZK_HOME=/opt/module/zookeeperexport PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$ZK_HOME</span>/binEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新生效:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-配置zoo-cfg文件"><a href="#3-3-配置zoo-cfg文件" class="headerlink" title="3.3 配置zoo.cfg文件"></a>3.3 配置zoo.cfg文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">创建数据目录和日志目录<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># mkdir /opt/module/zookeeper/&#123;data,logs&#125;</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cp /opt/module/zookeeper/conf/zoo_sample.cfg /opt/module/zookeeper/conf/zoo.cfg</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># vi /opt/module/zookeeper/conf/zoo.cfg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置内容如下:</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># cat zoo.cfg </span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/module/zookeeper/data<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/opt/module/zookeeper/logs<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token assign-left variable">server.1</span><span class="token operator">=</span>master:2888:3888<span class="token assign-left variable">server.2</span><span class="token operator">=</span>slave1:2888:3888<span class="token assign-left variable">server.3</span><span class="token operator">=</span>slave2:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置详解:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kafka1 opt<span class="token punctuation">]</span><span class="token comment"># grep -Ev "#|^$" /usr/local/zookeeper/conf/zoo.cfg </span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/module/zookeeper/data<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/opt/module/zookeeper/logs<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token assign-left variable">maxClientCnxns</span><span class="token operator">=</span><span class="token number">4096</span><span class="token comment">#(可选)</span><span class="token assign-left variable">autopurge.snapRetainCount</span><span class="token operator">=</span><span class="token number">128</span>   <span class="token comment"># /opt/zookeeper里保存快照的最大数量(可选)</span><span class="token assign-left variable">autopurge.purgeInterval</span><span class="token operator">=</span><span class="token number">1</span>   <span class="token comment"># 几小时清理一次(可选)</span><span class="token comment"># 可以用主机名，因为设置了映射</span><span class="token assign-left variable">server.1</span><span class="token operator">=</span>master:2888:3888<span class="token assign-left variable">server.2</span><span class="token operator">=</span>slave1:2888:3888<span class="token assign-left variable">server.3</span><span class="token operator">=</span>slave2:2888:3888配置参数解读：<span class="token assign-left variable">server.A</span><span class="token operator">=</span>B:C:DA是一个数字，表示这个是第几号服务器。myid中的编号就是这个值。zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。B是这个服务器的地址。C是这个服务器Follower与集群中的Leader服务器交换信息的端口。D是万一集群中的leader服务器挂了，需要一个端口来重新进行选举，选举一个新的leader，而这个端口就是用来执行选举时服务器相互通信的端口。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051623327.png" alt="image-20240105162313246"></p><h3 id="3-4-配置myid文件"><a href="#3-4-配置myid文件" class="headerlink" title="3.4 配置myid文件"></a>3.4 配置<code>myid</code>文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master zookeeper<span class="token punctuation">]</span><span class="token comment"># echo 1 > $ZK_HOME/data/myid</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-5-分发文件给子节点并分别修改myid文件"><a href="#3-5-分发文件给子节点并分别修改myid文件" class="headerlink" title="3.5 分发文件给子节点并分别修改myid文件"></a>3.5 分发文件给子节点并分别修改myid文件</h3><blockquote><p>:warning:注意:如果子节点没有配置环境变量,也要一同分发</p></blockquote><p>分发:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/zookeeper/ root@slave1:/opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/zookeeper/ root@slave2:/opt/module/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改myid文件:</p><p>slave1:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@slave1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /opt/module/zookeeper/data/myid</span><span class="token punctuation">[</span>root@slave1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > $ZK_HOME/data/myid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>slave2:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@slave2 ~<span class="token punctuation">]</span><span class="token comment"># echo 3 > /opt/module/zookeeper/data/myid</span><span class="token punctuation">[</span>root@slave2 ~<span class="token punctuation">]</span><span class="token comment"># echo 3 > $ZK_HOME/data/myid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-6-编写脚本启动zk服务-可选"><a href="#3-6-编写脚本启动zk服务-可选" class="headerlink" title="3.6 编写脚本启动zk服务(可选)"></a>3.6 编写脚本启动zk服务(可选)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># vi /opt/module/zookeeper/bin/zk.sh</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># vi $ZK_HOME/bin/zk.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>脚本内容如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"=======启动zookeeper集群=============="</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> master slave1 slave2<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> <span class="token string">"---------------启动<span class="token variable">$i</span>-------------"</span><span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"source /etc/profile;<span class="token variable">$&#123;ZK_HOME&#125;</span>/bin/zkServer.sh start"</span><span class="token keyword">done</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"========关闭zookeeper集群============"</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> master slave1 slave2<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> <span class="token string">"---------------关闭<span class="token variable">$i</span>-------------"</span><span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"source /etc/profile;<span class="token variable">$&#123;ZK_HOME&#125;</span>/bin/zkServer.sh stop"</span><span class="token keyword">done</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"=======查看zookeeper集群节点状态========="</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> master slave1 slave2<span class="token punctuation">;</span><span class="token keyword">do</span><span class="token builtin class-name">echo</span> <span class="token string">"---------------查看<span class="token variable">$i</span>-------------"</span><span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"source /etc/profile;<span class="token variable">$&#123;ZK_HOME&#125;</span>/bin/zkServer.sh status"</span><span class="token keyword">done</span><span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"请输入start或stop或status!!!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>添加可执行权限</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># chmod +x $ZK_HOME/bin/zk.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否添加成功:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># ll /opt/module/zookeeper/bin/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051645489.png" alt="image-20240105164512437"></p><h3 id="3-7-启动zk服务"><a href="#3-7-启动zk服务" class="headerlink" title="3.7 启动zk服务"></a>3.7 启动zk服务</h3><blockquote><p>方法1:绝对路径启动服务</p></blockquote><p>所有节点启动:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/module/zookeeper/bin/zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看启动状态:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/module/zookeeper/bin/zkServer.sh status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>master:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051653792.png" alt="image-20240105165336746"></p><p>slave1:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051653394.png" alt="image-20240105165353343"></p><p>slave2:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051654004.png" alt="image-20240105165433958"></p><blockquote><p>方法2:脚本一键启动服务</p></blockquote><p>启动:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># zk.sh start</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051701915.png" alt="image-20240105170128847"></p><p>查看服务状态:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># zk.sh status</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051701409.png" alt="image-20240105170159352"></p><p>zookeeper集群部署完成</p><h2 id="4-kafka分布式部署"><a href="#4-kafka分布式部署" class="headerlink" title="4. kafka分布式部署"></a>4. kafka分布式部署</h2><h3 id="4-1解压所需压缩包并重命名"><a href="#4-1解压所需压缩包并重命名" class="headerlink" title="4.1解压所需压缩包并重命名"></a>4.1解压所需压缩包并重命名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># tar -zxf /opt/software/kafka_2.12-2.4.1.tgz -C /opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># mv /opt/module/kafka_2.12-2.4.1/ /opt/module/kafka</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2-配置环境变量"><a href="#4-2-配置环境变量" class="headerlink" title="4.2 配置环境变量"></a>4.2 配置环境变量</h3><blockquote><p>所有节点添加</p></blockquote><p>添加环境变量:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">>></span>/etc/profile<span class="token operator">&lt;&lt;</span><span class="token string">EOF#kafkaexport KAFKA_HOME=/opt/module/kafkaexport PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$KAFKA_HOME</span>/binEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新生效:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看kafka版本号:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kafka-topics.sh <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051711698.png" alt="image-20240105171153639"></p><h3 id="4-3-配置server-properties文件"><a href="#4-3-配置server-properties文件" class="headerlink" title="4.3 配置server.properties文件"></a>4.3 配置server.properties文件</h3><p>添加内容如下:</p><blockquote><p>注意删除后面的备注</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master config<span class="token punctuation">]</span><span class="token comment"># grep -Ev "^$|^#" server.properties </span><span class="token assign-left variable">broker.id</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment"># 节点id要唯一</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://master:9092<span class="token comment"># 改成本机ip,如果配置好主机映射即可使用主机名</span><span class="token assign-left variable">num.network.threads</span><span class="token operator">=</span><span class="token number">3</span><span class="token assign-left variable">num.io.threads</span><span class="token operator">=</span><span class="token number">8</span><span class="token assign-left variable">socket.send.buffer.bytes</span><span class="token operator">=</span><span class="token number">102400</span><span class="token assign-left variable">socket.receive.buffer.bytes</span><span class="token operator">=</span><span class="token number">102400</span><span class="token assign-left variable">socket.request.max.bytes</span><span class="token operator">=</span><span class="token number">104857600</span><span class="token assign-left variable">log.dirs</span><span class="token operator">=</span>/opt/module/kafka/kafka-logs<span class="token comment"># 储存日志文件</span><span class="token assign-left variable">num.partitions</span><span class="token operator">=</span><span class="token number">1</span><span class="token comment">#这个参数用于设置新创建的topic有多少个分区，可以根据消费者实际情况配置</span><span class="token assign-left variable">num.recovery.threads.per.data.dir</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">offsets.topic.replication.factor</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">transaction.state.log.replication.factor</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">transaction.state.log.min.isr</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">log.retention.hours</span><span class="token operator">=</span><span class="token number">168</span><span class="token comment">#这个参数用于配置kafka中消息保存的时间，还支持log.retention.minutes和log.retention.ms配置项</span><span class="token assign-left variable">log.segment.bytes</span><span class="token operator">=</span><span class="token number">1073741824</span><span class="token assign-left variable">log.retention.check.interval.ms</span><span class="token operator">=</span><span class="token number">300000</span><span class="token assign-left variable">zookeeper.connect</span><span class="token operator">=</span>master:2181,slave1:2181,slave2:2181<span class="token comment"># 所有节点的ip或者映射</span><span class="token assign-left variable">zookeeper.connection.timeout.ms</span><span class="token operator">=</span><span class="token number">6000</span><span class="token assign-left variable">group.initial.rebalance.delay.ms</span><span class="token operator">=</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要修改添加如下,剩下的默认就好:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051813891.png" alt="image-20240105181359825"></p><h3 id="4-4-分发文件给子节点并分别修改broker-id-和-listener-ip"><a href="#4-4-分发文件给子节点并分别修改broker-id-和-listener-ip" class="headerlink" title="4.4 分发文件给子节点并分别修改broker.id  和 listener ip"></a>4.4 分发文件给子节点并分别修改<code>broker.id </code> 和 <code>listener ip</code></h3><p>分发:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/kafka/ root@slave1:/opt/module/</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/kafka/ root@slave2:/opt/module/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改子节点配置:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /opt/module/kafka/config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>修改的部分如下:</p></blockquote><p>slave1:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051815449.png" alt="image-20240105181507378"></p><p>slave2:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051815144.png" alt="image-20240105181523083"></p><h3 id="4-5-编写启动脚本-可选"><a href="#4-5-编写启动脚本-可选" class="headerlink" title="4.5 编写启动脚本(可选)"></a>4.5 编写启动脚本(可选)</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> /opt/module/kafka/bin/kafka.sh<span class="token function">vi</span> <span class="token variable">$KAFKA_HOME</span>/bin/kafka.sh<span class="token function">chmod</span> +x /opt/module/kafka/bin/kafka.sh<span class="token function">chmod</span> +x <span class="token variable">$KAFKA_HOME</span>/bin/kafka.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>脚本内容如下:</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"=======启动kafka集群=============="</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> master slave1 slave2<span class="token punctuation">;</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"---------------启动<span class="token variable">$i</span>-------------"</span>  <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"source /etc/profile;<span class="token variable">$&#123;KAFKA_HOME&#125;</span>/bin/kafka-server-start.sh -daemon <span class="token variable">$KAFKA_HOME</span>/config/server.properties"</span>  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">'\033[32m>>$i kafka服务启动成功!! \033[0m'</span>  <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"========关闭kafka集群============"</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> master slave1 slave2<span class="token punctuation">;</span><span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token string">"---------------关闭<span class="token variable">$i</span>-------------"</span>  <span class="token function">ssh</span> <span class="token variable">$i</span> <span class="token string">"source /etc/profile;<span class="token variable">$&#123;KAFKA_HOME&#125;</span>/bin/kafka-server-stop.sh"</span>          <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>            <span class="token builtin class-name">echo</span> <span class="token parameter variable">-e</span> <span class="token string">'\033[32m>>$i kafka服务关闭成功!! \033[0m'</span>          <span class="token keyword">fi</span><span class="token keyword">done</span><span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span><span class="token builtin class-name">echo</span> <span class="token string">"请输入start或stop!!!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-启动kafka服务"><a href="#4-6-启动kafka服务" class="headerlink" title="4.6 启动kafka服务"></a>4.6 启动kafka服务</h3><blockquote><p>方式1:绝对路径启动服务</p></blockquote><p>所有节点启动:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kafka-server-start.sh <span class="token parameter variable">-daemon</span> /opt/module/kafka/config/server.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051807297.png" alt="image-20240105180718227"></p><blockquote><p>方式2:脚本一键启动</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kafka.sh start</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051823163.png"></p><p>查看进程:</p><p>​        <img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051823384.png"></p><p>部署完成!!!</p><h2 id="5-kafka集群基本命令操作"><a href="#5-kafka集群基本命令操作" class="headerlink" title="5. kafka集群基本命令操作"></a>5. kafka集群基本命令操作</h2><p>kefka提供了多个命令用于查看、创建、修改、删除topic信息，也可以通过命令测试如何生产消息、消费消息等，这些命令位于kafka安装目录的bin目录下，这里是&#x2F;usr&#x2F;local&#x2F;kafka&#x2F;bin。登录任意一台kafka集群节点，切换到此目录下，即可进行命令操作。下面列举kafka的一些常用命令的使用方法。</p><p><strong>创建主题与测试</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kafka-topics.sh --create --zookeeper master:2181,slave1:2181,slave2:2181 --partitions 3 --replication-factor 3 --topic test</span>Created topic test.<span class="token comment"># 验证topic</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kafka-topics.sh --describe --zookeeper master:2181,slave1:2181,slave2:2181 --topic test</span>Topic: <span class="token builtin class-name">test</span>PartitionCount: <span class="token number">3</span>ReplicationFactor: <span class="token number">3</span>Configs: Topic: <span class="token builtin class-name">test</span>Partition: <span class="token number">0</span>Leader: <span class="token number">0</span>Replicas: <span class="token number">0,1</span>,2Isr: <span class="token number">0,1</span>,2Topic: <span class="token builtin class-name">test</span>Partition: <span class="token number">1</span>Leader: <span class="token number">1</span>Replicas: <span class="token number">1,2</span>,0Isr: <span class="token number">1,2</span>,0Topic: <span class="token builtin class-name">test</span>Partition: <span class="token number">2</span>Leader: <span class="token number">2</span>Replicas: <span class="token number">2,0</span>,1Isr: <span class="token number">2,0</span>,1<span class="token comment"># 获取所有topic(查看已有的topic)</span><span class="token punctuation">[</span>root@kafka1 config<span class="token punctuation">]</span><span class="token comment"># kafka-topics.sh --list --zookeeper master:2181,slave1:2181,slave2:2181</span><span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数解释：</p><ul><li><code>--create</code>：表示你要创建一个新的 Kafka 主题。</li><li><code>--zookeeper master:2181,slave1:2181,slave2:2181</code>：指定了 Zookeeper 的连接字符串。Zookeeper 用于管理和协调 Kafka 经纪人。</li><li><code>--partitions 3</code>：设置主题的分区数。在这里，主题将有 3 个分区。</li><li><code>--replication-factor 3</code>：定义主题的复制因子。每个分区将在不同的 Kafka 经纪人上具有三个副本，以实现容错。</li><li><code>--topic test</code>：指定 Kafka 主题的名称，在这里是 “test”。</li></ul><p><strong>生产消息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kafka-console-producer.sh --broker-list master:9092,slave1:9092,slave2:9092 --topic test</span><span class="token operator">></span>this is a <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>消费消息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@slave1 ~<span class="token punctuation">]</span><span class="token comment">#  kafka-console-consumer.sh --bootstrap-server master:9092,slave1:9092,slave2:9092 --topic test --from-beginning</span>this is a <span class="token builtin class-name">test</span><span class="token comment"># 在1号即发消息，这里能收到消息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除消息</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># kafka-topics.sh --zookeeper master:2181,slave1:2181,slave2:2181 --delete --topic test</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051834237.png" alt="image-20240105183425150"></p><p>kafka可视化工具(略)</p><p>官网:<a href="https://www.kafkatool.com/download.html">https://www.kafkatool.com/download.html</a></p><p>文档参考:<a href="https://www.freesion.com/article/72661130783/">https://www.freesion.com/article/72661130783/</a></p><p>博客:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051825380.png" alt="image-20240105182538256"></p><p>官网:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401161013794.png" alt="image-20240116101350654"></p><p>ubuntu版本直接拉取脚本运行安装即可:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://www.kafkatool.com/download2/offsetexplorer.sh<span class="token function">sudo</span> <span class="token function">sh</span> offsetexplorer.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>完成!!</p>]]></content>
      
      
      <categories>
          
          <category> 大数据运维系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bigdata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言中的变量和常量</title>
      <link href="/2024/11/10/go-yu-yan-zhong-de-bian-liang-he-chang-liang/"/>
      <url>/2024/11/10/go-yu-yan-zhong-de-bian-liang-he-chang-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="3-Go语言中的变量和常量"><a href="#3-Go语言中的变量和常量" class="headerlink" title="3. Go语言中的变量和常量"></a>3. Go语言中的变量和常量</h2><h3 id="3-1-Go语言中变量的声明"><a href="#3-1-Go语言中变量的声明" class="headerlink" title="3.1 Go语言中变量的声明"></a>3.1 Go语言中变量的声明</h3><p>Go语言变量是由<code>字母、数字、下划线</code>组成，其中首个字符不能为数字。Go语言中<code>关键字和保留字</code>都不能用作变量名</p><p>Go语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。</p><p>变量声明后，没有初始化，打印出来的是空</p><h3 id="3-2-如何定义变量"><a href="#3-2-如何定义变量" class="headerlink" title="3.2 如何定义变量"></a>3.2 如何定义变量</h3><blockquote><p>方式1：直接声明</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>方式2：带类型</p></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> name <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"zhangsan"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>方式3：<code>类型推导</code>方式定义变量</p></blockquote><p>a在函数内部，可以使用更简略的 <code>:=</code> 方式声明并初始化变量</p><p>注意：短变量<code>只能用于声明局部变量</code>，不能用于全局变量声明</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">变量名 <span class="token operator">:=</span> 表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例子：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">sex <span class="token operator">:=</span> <span class="token string">"男"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>方式4：声明多个变量</p></blockquote><p><strong>类型都是一样的变量</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> 变量名称， 变量名称 类型<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a1<span class="token punctuation">,</span> a2 <span class="token builtin">int</span>a1 <span class="token operator">=</span> <span class="token number">5</span>a2 <span class="token operator">=</span> <span class="token number">6</span>    fmt<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> a2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>类型不一样的变量</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>变量名称 类型    变量名称 类型<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>案例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> <span class="token punctuation">(</span>name <span class="token builtin">string</span>age  <span class="token builtin">int</span>sex  <span class="token builtin">string</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token string">"zhangsan"</span>age <span class="token operator">=</span> <span class="token number">18</span>sex <span class="token operator">=</span> <span class="token string">"男"</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"name=%v,age=%d,sex=%v"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-1-占位符使用-warning-待整理"><a href="#3-2-1-占位符使用-warning-待整理" class="headerlink" title="3.2.1 占位符使用:warning:待整理"></a>3.2.1 占位符使用:warning:待整理</h4><blockquote><p>注意：需要配合<code>Printf</code>来使用</p></blockquote><table><thead><tr><th>占位符使用</th><th>作用</th></tr></thead><tbody><tr><td>%T</td><td>类型占位符</td></tr><tr><td>%v</td><td>值占位符</td></tr><tr><td>%d</td><td>整数占位符</td></tr><tr><td>%f</td><td>浮点占位符</td></tr><tr><td>%c</td><td>字符占位符</td></tr><tr><td>%s</td><td>字符串的占位符</td></tr></tbody></table><p>案例：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> <span class="token punctuation">(</span>Name2 <span class="token operator">=</span> <span class="token string">"bigdata"</span>Age2  <span class="token operator">=</span> <span class="token number">18</span>Sex2  <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Name2<span class="token punctuation">,</span> Age2<span class="token punctuation">,</span> Sex2<span class="token punctuation">)</span><span class="token comment">// 占位符</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"他的名字是:%v,年龄:%v,性别:%v\n"</span><span class="token punctuation">,</span> Name2<span class="token punctuation">,</span> Age2<span class="token punctuation">,</span> Sex2<span class="token punctuation">)</span>              <span class="token comment">// 他的名字是:bigdata,年龄:18,性别:男</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\n"</span><span class="token punctuation">,</span> Name2<span class="token punctuation">,</span> Age2<span class="token punctuation">,</span> Sex2<span class="token punctuation">)</span> <span class="token comment">// Name的类型是:string Age的类型是:int Sex的类型是:string</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>变量总结</p></blockquote><p>全部的定义方式</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/*Go语言变量是由字母、数字、下划线组成，其中首个字符不能为数字。Go语言中关键字和保留字都不能用作变量名Go语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。变量声明后，没有初始化，打印出来的是空*/</span><span class="token comment">// 方式1:直接声明</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"zhangsan"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token comment">// 方式2:带类型</span><span class="token keyword">var</span> name2 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"lisi"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name2<span class="token punctuation">)</span><span class="token comment">// 方式3:`类型推导`方式定义变量  注意：短变量`只能用于声明局部变量`，不能用于全局变量声明</span>name3 <span class="token operator">:=</span> <span class="token string">"xiaoming"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>name3<span class="token punctuation">)</span><span class="token comment">// 方式4:声明多个变量</span><span class="token comment">// 类型都是一样的变量</span><span class="token keyword">var</span> a1<span class="token punctuation">,</span> a2 <span class="token builtin">int</span>a1 <span class="token operator">=</span> <span class="token number">5</span>a2 <span class="token operator">=</span> <span class="token number">6</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> a2<span class="token punctuation">)</span><span class="token comment">// 类型不一样的变量  声明后再赋值</span><span class="token keyword">var</span> <span class="token punctuation">(</span>Name <span class="token builtin">string</span>Age  <span class="token builtin">int</span>Sex  <span class="token builtin">string</span><span class="token punctuation">)</span>Name <span class="token operator">=</span> <span class="token string">"hj"</span>Age <span class="token operator">=</span> <span class="token number">22</span>Sex <span class="token operator">=</span> <span class="token string">"男"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Name<span class="token punctuation">,</span> Age<span class="token punctuation">,</span> Sex<span class="token punctuation">)</span><span class="token comment">// 声明的同时赋值</span><span class="token keyword">var</span> <span class="token punctuation">(</span>Name1 <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"mjl"</span>Age1  <span class="token builtin">int</span>    <span class="token operator">=</span> <span class="token number">20</span>Sex1  <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"女"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Name1<span class="token punctuation">,</span> Age1<span class="token punctuation">,</span> Sex1<span class="token punctuation">)</span><span class="token comment">// 类型推导</span><span class="token keyword">var</span> <span class="token punctuation">(</span>Name2 <span class="token operator">=</span> <span class="token string">"bigdata"</span>Age2  <span class="token operator">=</span> <span class="token number">18</span>Sex2  <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>Name2<span class="token punctuation">,</span> Age2<span class="token punctuation">,</span> Sex2<span class="token punctuation">)</span><span class="token comment">// 占位符</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"他的名字是:%v,年龄:%v,性别:%v\n"</span><span class="token punctuation">,</span> Name2<span class="token punctuation">,</span> Age2<span class="token punctuation">,</span> Sex2<span class="token punctuation">)</span>              <span class="token comment">// 他的名字是:bigdata,年龄:18,性别:男</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\n"</span><span class="token punctuation">,</span> Name2<span class="token punctuation">,</span> Age2<span class="token punctuation">,</span> Sex2<span class="token punctuation">)</span> <span class="token comment">// Name的类型是:string Age的类型是:int Sex的类型是:string</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-如何定义常量"><a href="#3-3-如何定义常量" class="headerlink" title="3.3 如何定义常量"></a>3.3 如何定义常量</h3><p>相对于变量，<code>常量是恒定不变的值</code>，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了<code>const</code>，常量在<code>定义的时候必须赋值</code>。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">/*相对于变量，`常量是恒定不变的值`，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了`const`，常量在`定义的时候必须赋值`。*/</span><span class="token comment">//定义了常量，可以不用立即使用</span><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.141596</span><span class="token comment">// 定义两个常量</span><span class="token keyword">const</span> <span class="token punctuation">(</span>A <span class="token operator">=</span> <span class="token string">"A"</span>B <span class="token operator">=</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token comment">// const同时声明多个常量时，如果省略了值表示和上面一行的值相同</span><span class="token keyword">const</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token string">"A"</span>bc<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token comment">// A A A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-Const常量结合iota的使用（了解）"><a href="#3-4-Const常量结合iota的使用（了解）" class="headerlink" title="3.4 Const常量结合iota的使用（了解）"></a>3.4 Const常量结合iota的使用（了解）</h3><p>iota是golang 语言的常量计数器，只能在常量的表达式中使用</p><p>iota在const关键字出现时将被重置为0（const内部的第一行之前），const中每新增一行常量声明将使iota计数一次（iota可理解为const语句块中的行索引）。</p><blockquote><ol><li>每次const出现，都会让iota初始化为0【自增长】</li></ol></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token boolean">iota</span><span class="token comment">// a = 0</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// b = 0</span>c<span class="token comment">// c = 1</span> d<span class="token comment">// d = 2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol start="2"><li>const  iota使用 <code>_</code> 跳过某些值</li></ol></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// b = 0</span><span class="token boolean">_</span>        <span class="token comment">// 跳过 1</span>d        <span class="token comment">// d = 2</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol start="3"><li>iota声明中间插队</li></ol></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// iota声明中间插队</span><span class="token keyword">const</span> <span class="token punctuation">(</span>n1 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// n1 = 0</span>n2 <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// n2 = 100</span>n3 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token comment">// n3 = 2</span>n4        <span class="token comment">// n4 = 3</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">,</span> n4<span class="token punctuation">)</span> <span class="token comment">// 输出:0 100 2 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ol start="4"><li>多个iota定义在一行</li></ol></blockquote><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 多个iota定义在一行</span><span class="token keyword">const</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">iota</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token comment">// 0+1=1 ,0+2 =2</span>n3<span class="token punctuation">,</span> n4                      <span class="token comment">// 2 , 3</span>n5<span class="token punctuation">,</span> n6                      <span class="token comment">// 3 , 4</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n3<span class="token punctuation">,</span> n4<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>n5<span class="token punctuation">,</span> n6<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510165431706.png" alt="image-20240510165431706"></p><h3 id="3-5-Go语言变量、常量明明规则"><a href="#3-5-Go语言变量、常量明明规则" class="headerlink" title="3.5 Go语言变量、常量明明规则"></a>3.5 Go语言变量、常量明明规则</h3><p>1、变量名称必须由数字、字母、下划线组成。<br>2、标识符开头不能是数字<br>3、标识符不能是保留字和关键字。</p><p>4、变量的名字是区分大小写的如：age和Age是不同的变量。在实际的运用中，也<code>建议</code>，不要用一个单词大小写区分两个变量。</p><p>5、标识符（变量名称）一定要<code>见名思意</code>：变量名称建议用名词，方法名称建议用动词</p><p>6、变量命名一般采用驼峰式，当遇到特有名词（缩写或简称，如DNS)的时候，特有名词根据是否私有全部大写或小写。</p><h3 id="3-6-注释与godoc"><a href="#3-6-注释与godoc" class="headerlink" title="3.6 注释与godoc"></a>3.6 注释与godoc</h3><blockquote><p>注释不会被编译，每一个包应该有相关注释。</p></blockquote><p>单行注释是最常见的注释形式，你可以在任何地方使用以 &#x2F;&#x2F; 开头的单行注释。多行注释也叫块注释，均已以 &#x2F;* 开头，并以 *&#x2F; 结尾。如：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token number">1.</span><span class="token comment">// 单行注释</span><span class="token number">2.</span><span class="token comment">/* Author by 菜鸟教程 我是多行注释 */</span><span class="token number">3.</span>注释换行<span class="token comment">// 你好</span><span class="token comment">//</span><span class="token comment">// 世界</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>go doc</code> 是 Go 语言提供的一个工具，用于查看 Go 包和符号的文档。它类似于 <code>godoc</code>，但用法更简单且直接。以下是 <code>go doc</code> 的用法和主要功能说明：</p></blockquote><p><code>go doc</code> <strong>的用法</strong>:</p><ol><li><p><strong>查看包的文档</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc 包名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc fmt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   输出：<code>fmt</code> 包的概述，包括包的介绍和主要函数。</p><ol start="2"><li><p><strong>查看包中某个函数、类型、变量、常量的文档</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc 包名.符号名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc fmt.Println<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   输出：<code>fmt.Println</code> 函数的文档，包括函数签名和说明。</p><ol start="3"><li><p><strong>查看包中某个类型的方法</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc 包名.类型名.方法名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc net&#x2F;http.Client.Get<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   输出：<code>http.Client</code> 类型的 <code>Get</code> 方法的文档。</p><ol start="4"><li><p><strong>查看包的导入路径</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc -src 包名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc -src fmt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>   输出：<code>fmt</code> 包的源代码。</p><ol start="5"><li><p><strong>指定工作目录</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc -C 工作目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>示例：</p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc -C &#x2F;path&#x2F;to&#x2F;your&#x2F;project fmt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：指定工作目录下 <code>fmt</code> 包的文档。</p></li></ol><p><code>go doc</code> <strong>的主要功能</strong>:</p><ul><li><strong>快速查看文档</strong>：无需打开浏览器，可以在终端中快速查看 Go 包、类型、函数等的文档。</li><li><strong>支持源码查看</strong>：可以通过 <code>-src</code> 选项查看包的源代码，帮助理解实现细节。</li><li><strong>支持自定义工作目录</strong>：通过 <code>-C</code> 选项，可以在指定的工作目录下查找包的文档。</li></ul><p><strong>示例:</strong></p><p>以下是几个常见的 <code>go doc</code> 命令示例及其输出解释：</p><ol><li><p><strong>查看 <code>fmt</code> 包的文档</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc fmt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：<code>fmt</code> 包的概述，包括包的介绍和主要函数。</p></li><li><p><strong>查看 <code>fmt.Println</code> 函数的文档</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc fmt.Println<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：<code>fmt.Println</code> 函数的文档，包括函数签名和说明。</p></li><li><p><strong>查看 <code>http.Client.Get</code> 方法的文档</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc net&#x2F;http.Client.Get<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：<code>http.Client</code> 类型的 <code>Get</code> 方法的文档。</p></li><li><p><strong>查看 <code>fmt</code> 包的源代码</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc -src fmt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出：<code>fmt</code> 包的源代码。</p></li><li><p><strong>在指定工作目录下查看 <code>fmt</code> 包的文档</strong></p><pre class="line-numbers language-none"><code class="language-none">复制代码go doc -C &#x2F;path&#x2F;to&#x2F;your&#x2F;project fmt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>输出：指定工作目录下 <code>fmt</code> 包的文档。</p><p>通过使用 <code>go doc</code> 工具，可以方便地在命令行中查看 Go 标准库以及自定义包的文档，有助于开发者更快地理解和使用 Go 语言中的各种功能。</p><blockquote><p>go’doc可以为项目代码导出网页版的注释文档</p></blockquote><p><strong>1.</strong> <strong>首先需要安装</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> get golang<span class="token punctuation">.</span>org<span class="token operator">/</span>x<span class="token operator">/</span>tools<span class="token operator">/</span>cmd<span class="token operator">/</span>godoc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2.</strong> <strong>启动http:</strong></p><pre class="line-numbers language-go" data-language="go"><code class="language-go">godoc <span class="token operator">-</span>http<span class="token operator">=</span><span class="token punctuation">:</span><span class="token number">6060</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>3. 使用浏览器访问</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">http://127.0.0.1:6060/pkg/go-course/entrance_class <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202407191029000.png" alt="image-20240719102952811"></p>]]></content>
      
      
      <categories>
          
          <category> 运维开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言发展史</title>
      <link href="/2024/11/10/golang-fa-zhan-shi/"/>
      <url>/2024/11/10/golang-fa-zhan-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="2-Go语言发展简史"><a href="#2-Go语言发展简史" class="headerlink" title="2.Go语言发展简史"></a>2.Go语言发展简史</h2><h3 id="2-1-开发文档"><a href="#2-1-开发文档" class="headerlink" title="2.1 开发文档"></a>2.1 开发文档</h3><p><a href="https://studygolang.com/pkgdoc">https://studygolang.com/pkgdoc</a></p><h3 id="2-2-Go语言核心开发团队"><a href="#2-2-Go语言核心开发团队" class="headerlink" title="2.2 Go语言核心开发团队"></a>2.2 Go语言核心开发团队</h3><p>Ken Thompson（肯·汤普森）：1983年图灵奖（Turing Award）和1998年美国国家技术奖（National Medal of Technology）得主。他与Dennis Ritchie是Unix的原创者。Thompson也发明了后来衍生出C语言的B程序语言，同时也是C语言的主要发明人。</p><p>Rob Pike（罗布-派克）：曾是贝尔实验室（Bell Labs）的Unix团队，和Plan 9操作系统计划的成员。<br>他与Thompson共事多年，并共创出广泛使用的UTF-8字元编码。</p><p>Robert Griesemer：曾协助制作Java的HotSpot编译器，和Chrome浏览器的JavaScript引擎V8</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718103112309.png" alt="image-20200718103112309"></p><h3 id="2-3-Google为什么要创建Go"><a href="#2-3-Google为什么要创建Go" class="headerlink" title="2.3 Google为什么要创建Go"></a>2.3 Google为什么要创建Go</h3><ul><li>计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多CPU的优势提升软件系统性能。</li><li>软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。<ul><li>现有编程语言存在：风格不统一、计算能力不够、处理大并发不够好</li></ul></li><li>企业运行维护很多c&#x2F;c++的项目，c&#x2F;c++程序运行速度虽然很快，但是编译速度确很慢，同时还存在内存泄漏的一系列的困扰需要解决。</li></ul><h3 id="2-4-Go语言发展历史"><a href="#2-4-Go语言发展历史" class="headerlink" title="2.4 Go语言发展历史"></a>2.4 Go语言发展历史</h3><ul><li>2007年，谷歌工程师Rob Pike，Ken Thompson和Robert Griesemer开始设计一门全新的语言，这是Go语言的最初原型。</li><li>2009年11月10日，Google将Go语言以开放源代码的方式向全球发布。</li><li>2015年8月19日，Go1.5版发布，本次更新中移除了”最后残余的c代码”</li><li>2017年2月17日，Go语言Go1.8版发布。</li><li>2017年8月24日，Go语言Go1.9版发布。</li><li>2018年2月16日，Go语言Go1.10版发布。</li></ul><h3 id="2-5-Go语言的特点"><a href="#2-5-Go语言的特点" class="headerlink" title="2.5 Go语言的特点"></a>2.5 Go语言的特点</h3><p>Go语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率，使用一个表达式来形容Go语言：Go&#x3D;C+Python，说明Go语言既有C静态语言程序的运行速度，又能达到Python动态语言的快速开发。</p><ul><li>从c语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等等，也保留了和C语言一样的编译执行方式及弱化的指针。</li></ul><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// go语言的指针使用特点</span><span class="token keyword">func</span> <span class="token function">testPtr</span><span class="token punctuation">(</span>num <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span><span class="token operator">*</span>num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>引入包的概念，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在。</li><li>垃圾回收机制，内存自动回收，不需开发人员管理 【稍微不注意就会出现内存泄漏】</li><li>天然并发【重要特点】<ul><li>从语言层面支持并发，实现简单</li><li>goroutine，轻量级线程，可实现大并发处理，高效利用多核。</li><li>基于CPS并发模型（Communicating Sequential Processes）实现</li></ul></li><li>吸收了管道通信机制，形成go语言特有的管道channel，通过管道channel，可以实现不同的goroute之间的相互通信</li><li>函数返回多个值（实例代码）</li><li>新的创新：比如切片slice，延时执行defer等</li></ul><h3 id="2-6-Hello-Go"><a href="#2-6-Hello-Go" class="headerlink" title="2.6 Hello Go"></a>2.6 Hello Go</h3><p>我们写一个最简单的入门代码，在控制台输出hello go！</p><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"hello golang"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>运行</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hj@DESKTOP-FBLS07J:~/work/golang/day01$ go run main.go hello golang<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115729354.png" alt="image-20240510115729354"></p><h3 id="2-7-Golang执行流程分析"><a href="#2-7-Golang执行流程分析" class="headerlink" title="2.7 Golang执行流程分析"></a>2.7 Golang执行流程分析</h3><p>我们可以通过以下命令来进行操作</p><ul><li>go build hello.go    -&gt; hello.exe</li><li>go  run  hello.go</li></ul><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718161111596.png" alt="image-20200718161111596"></p><h4 id="2-7-1-两种执行流程分析"><a href="#2-7-1-两种执行流程分析" class="headerlink" title="2.7.1 两种执行流程分析"></a>2.7.1 两种执行流程分析</h4><ul><li>如果我们先编译<code>生成了可执行文件</code>，那么我们可以将该可执行文件拷贝到<code>没有go开发环境的机器上，然可以运行</code></li><li>如果我们是直接<code>go run go源代码</code>，那么如果要在<code>另外一个机器上</code>这么运行，<code>也需要go开发环境</code>，否则无法执行。</li><li>在编译时，编译器会将程序运行依赖的库文件包含在可执行文件中，所以，可执行文件变大了很多。</li></ul><h4 id="2-7-2-什么是编译"><a href="#2-7-2-什么是编译" class="headerlink" title="2.7.2 什么是编译"></a>2.7.2 什么是编译</h4><ul><li>有了go源文件，通过编译器将其编译成机器可以识别的二进制码文件。</li><li>在该源文件目录下，通过go build 对hello.go文件进行编译。可以指定生成的可执行文件名，在windows下必须是.exe后缀。</li><li>如果程序没有错误，没有任何提示，会在当前目录下会出现一个可执行文件（windows下是.exe Linux下是一个可执行文件），该文件是二进制码文件，也是可以执行的程序。</li><li>如果程序有错误，编译时，会在错误的那行报错。</li></ul><blockquote><p>让我们来看下如何编写 Go 代码并执行它。步骤如下：</p></blockquote><ol><li><p>打开编辑器如Sublime2，将以上代码添加到编辑器中。</p></li><li><p>将以上代码保存为 <em>hello.go</em></p></li><li><p>打开命令行，并进入程序文件保存的目录中。</p></li><li><p>输入命令 <em>go run hello.go</em> 并按回车执行代码。</p></li><li><p>如果操作正确你将在屏幕上看到 <em>“Hello World!”</em> 字样的输出。</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> run hello<span class="token punctuation">.</span><span class="token keyword">go</span>Hello<span class="token punctuation">,</span> World<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>我们还可以使用 <strong>go build</strong> 命令来生成二进制文件：</p><pre class="line-numbers language-go" data-language="go"><code class="language-go">$ <span class="token keyword">go</span> build hello<span class="token punctuation">.</span><span class="token keyword">go</span> $ lshello    hello<span class="token punctuation">.</span><span class="token keyword">go</span>$ <span class="token punctuation">.</span><span class="token operator">/</span>hello Hello<span class="token punctuation">,</span> World<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-8-Go语言开发注意事项"><a href="#2-8-Go语言开发注意事项" class="headerlink" title="2.8 Go语言开发注意事项"></a>2.8 Go语言开发注意事项</h3><ul><li>Go源文件以“go”为扩展名</li><li>Go应用程序的执行入口是main()方法</li><li>Go语言严格区分大小写。</li><li>Go方法由一条条语句构成，每个语句后不需要分号（Go语言会在每行后自动加分号），这也体现出Golang的简洁性。</li><li>Go编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则报错</li><li>Go语言定义的变量或者import的包如果没有使用到，代码不能编译通过</li><li>大括号都是成对出现的，缺一不可。</li></ul><h3 id="2-9-Go语言中的转义字符"><a href="#2-9-Go语言中的转义字符" class="headerlink" title="2.9 Go语言中的转义字符"></a>2.9 Go语言中的转义字符</h3><p>GoLang常用的转义字符（escape char）</p><ul><li>\t：一个制表位，实现对齐的功能</li><li>\n：换行符</li><li>\：一个\</li><li>\r：一个回车</li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang基础环境配置</title>
      <link href="/2024/11/10/golang-ji-chu-huan-jing-pei-zhi/"/>
      <url>/2024/11/10/golang-ji-chu-huan-jing-pei-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Go环境安装"><a href="#1-Go环境安装" class="headerlink" title="1.Go环境安装"></a>1.Go环境安装</h2><p>这阵子因为以后工作的原因，所以开始了go语言的学习之旅，工欲善其事必先利其器，首先就得把go语言环境搭建完成</p><p>这里我看视屏是IT大地老师的课程:<a href="https://www.bilibili.com/video/BV14T4y1g7h9/?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV14T4y1g7h9/?spm_id_from=333.337.search-card.all.click</a></p><p>马哥教育也一块汇总到此</p><h3 id="1-1-Windows下Go语言的安装"><a href="#1-1-Windows下Go语言的安装" class="headerlink" title="1.1 Windows下Go语言的安装"></a>1.1 Windows下Go语言的安装</h3><blockquote><p>下载Go</p></blockquote><p>因为go语言的官网经常打不开，所以我就找了一个 <a href="https://studygolang.com/dl">镜像网站</a>，里面有很多版本的Go语言，选择自己合适的，比如我的是Windows电脑，所以我选中里面的Windows版本的</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111751694.png" alt="image-20200718111751694"></p><p>下载完成是一个安装文件，我们需要进行安装，同时需要注意的就是安装目录，因为事后还需要配置环境变量，下面是安装成功后的图片</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111822269.png" alt="image-20200718111822269"></p><blockquote><p>配置环境变量</p></blockquote><p>根据windows系统在查找可执行程序的原理，可以将Go所在路径定义到环境变量中，让系统帮我们去找运行的执行程序，这样在任何目录下都可以执行go指令，需要配置的环境变量有：</p><table><thead><tr><th>环境变量</th><th>说明</th></tr></thead><tbody><tr><td>GOROOT</td><td>指定SDK的安装目录</td></tr><tr><td>Path</td><td>添加SDK的&#x2F;binmulu</td></tr><tr><td>GOPATH</td><td>工作目录</td></tr></tbody></table><p>首先我们需要打开我们的环境变量，然后添加上GOROOT</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151418230.png" alt="image-20200718151418230"></p><p>然后我们在PATH上添加我们的bin目录</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151503318.png" alt="image-20200718151503318"></p><p>添加完成后，我们输入下面的命令，查看是否配置成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510113522780.png" alt="image-20240510113522780"></p><h3 id="1-2-linux下Go语言的安装"><a href="#1-2-linux下Go语言的安装" class="headerlink" title="1.2 linux下Go语言的安装"></a>1.2 linux下Go语言的安装</h3><p>这里我使用的是windows的wsl2子系统，安装方法通用</p><blockquote><p>1、找到<a href="https://so.csdn.net/so/search?q=linux&spm=1001.2101.3001.7020">linux</a> 版本go包 （<a href="https://golang.google.cn/dl/">Downloads - The Go Programming Language</a>）</p></blockquote><p>这里可以直接去官网下载后再上传到服务器</p><blockquote><p>这里直接使用wget 拉取下载</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://dl.google.com/go/go1.22.3.linux-amd64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>2、解压到&#x2F;usr&#x2F;local （官方推荐）</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> go1.22.3.linux-amd64.tar.gz <span class="token parameter variable">-C</span> /usr/local<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>3、添加到环境变量</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 习惯用vim，没有的话可以用命令`sudo apt-get install vim`安装一个</span><span class="token function">vim</span> /etc/profile<span class="token comment"># 在最后一行添加</span><span class="token comment"># Golang 环境变量设置</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">GOROOT</span><span class="token operator">=</span>/usr/local/go<span class="token builtin class-name">export</span> <span class="token assign-left variable">GOPATH</span><span class="token operator">=</span><span class="token environment constant">$HOME</span>/go<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$GOROOT</span>/bin:<span class="token variable">$GOPATH</span>/bin<span class="token comment"># 保存退出后source一下（vim 的使用方法可以自己搜索一下）</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>4、查看是否安装成功</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510114728267.png" alt="image-20240510114728267"></p><h3 id="1-3-Visual-Studio-Code-安装"><a href="#1-3-Visual-Studio-Code-安装" class="headerlink" title="1.3 Visual Studio Code 安装"></a>1.3 Visual Studio Code 安装</h3><p>官网：<a href="https://code.visualstudio.com/">Visual Studio Code - Code Editing. Redefined</a></p><blockquote><p>安装go插件</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115058408.png" alt="image-20240510115058408"></p><blockquote><p>解决VSCode安装Go tools失败的问题</p></blockquote><p><strong>测试环境</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hj@DESKTOP-FBLS07J:~$ go versiongo version go1.22.3 linux/amd64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装Go后，打开VS Code，按照提示安装了微软官方的GO插件。但在安装go tools时，出现了下面的一大堆错误（日志）。</p><blockquote><p>主要提示以下错误</p></blockquote><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">The “gopls“ command is not available<span class="token punctuation">.</span> Use “go get <span class="token operator">-</span>v golang<span class="token punctuation">.</span>org/x/tools/cmd/gopls“ to install<span class="token punctuation">.</span>解决<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>解决方案</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">go <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GO111MODULE</span><span class="token operator">=</span>ongo <span class="token function">env</span> <span class="token parameter variable">-w</span> <span class="token assign-left variable">GOPROXY</span><span class="token operator">=</span>https://goproxy.io,direct<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240509194134014.png" alt="image-20240509194134014"></p><p>设置完成后重启VS Code，按照提示安装即可。</p><p>参考<a href="https://l2m2.top/2020/05/26/2020-05-26-fix-golang-tools-failed-on-vscode/">https://l2m2.top/2020/05/26/2020-05-26-fix-golang-tools-failed-on-vscode/</a></p>]]></content>
      
      
      <categories>
          
          <category> 运维开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu基础配置(18.04)+Docker配置和使用+容器化centos7大数据环境准备</title>
      <link href="/2024/11/10/ubuntu-ji-chu-pei-zhi-18-04-docker-pei-zhi-he-shi-yong-rong-qi-hua-centos7-da-shu-ju-huan-jing-zhun-bei/"/>
      <url>/2024/11/10/ubuntu-ji-chu-pei-zhi-18-04-docker-pei-zhi-he-shi-yong-rong-qi-hua-centos7-da-shu-ju-huan-jing-zhun-bei/</url>
      
        <content type="html"><![CDATA[<h2 id="1-ubuntu-基础配置"><a href="#1-ubuntu-基础配置" class="headerlink" title="1.ubuntu 基础配置"></a>1.ubuntu 基础配置</h2><p>环境：<code>ubuntu 18.04</code></p><p>安装完Ubuntu之后，除了需要新建用户、设置密码之外，我们还要设置root密码，虽然Ubuntu默认有root超级管理员账户，但是具体的密码我们可以自行设置</p><h3 id="1-1设置root密码："><a href="#1-1设置root密码：" class="headerlink" title="1.1设置root密码："></a>1.1设置root密码：</h3><p>1.启动Ubuntu<br>启动Ubuntu，有图形界面的，启动终端即可</p><p>2.终端输入sudo passwd root</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">passwd</span> root<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324207.png" alt="image-20230320172400074"></p><p>验证测试：</p><p>验证：输入<strong>su -</strong> 后输入超级管理员账户的密码</p><h3 id="1-2-更换源："><a href="#1-2-更换源：" class="headerlink" title="1.2 更换源："></a>1.2 更换源：</h3><p>更换下载源，不更换的话安装docker时会很慢，可以选择阿里或者清华源</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">vim</span> <span class="token function">sudo</span> <span class="token function">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak备份<span class="token function">sudo</span> <span class="token function">vi</span> /etc/apt/sources.list    <span class="token comment">#添加清华源</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>清华源：</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse<span class="token comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><span class="token comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><span class="token comment"># # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span>deb http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse<span class="token comment"># deb-src http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse</span><span class="token comment"># 预发布软件源，不建议启用</span><span class="token comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><span class="token comment"># # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#更新源</span><span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-3-安装ssh服务："><a href="#1-3-安装ssh服务：" class="headerlink" title="1.3 安装ssh服务："></a>1.3 安装ssh服务：</h3><p>（方便连接xshell工具）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> openssh-server <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决windows Ubuntu 之间复制粘贴问题：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> autoremove open-vm-tools <span class="token parameter variable">-y</span>//卸载已有的工具<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> open-vm-tools <span class="token parameter variable">-y</span>//安装工具open-vm-tools<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> open-vm-tools-desktop <span class="token parameter variable">-y</span> //安装open-vm-tools-desktop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>ubuntu下安装asbru-cm工具：</p><p>Asbru-CM是一种开源的配置管理工具，用于管理和部署服务器配置。它提供了一个Web界面，使用户可以轻松地管理和监控多台服务器的配置。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> <span class="token function">curl</span> <span class="token parameter variable">-y</span><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://packagecloud.io/install/repositories/asbru-cm/asbru-cm/script.deb.sh <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">bash</span><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> asbru-cm <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-Docker配置"><a href="#2-Docker配置" class="headerlink" title="2. Docker配置"></a>2. Docker配置</h2><p>因为某些原因,国内已经访问不了docker官网,所以此处改成使用阿里源安装docker</p><p><a href="https://blog.csdn.net/single_0910/article/details/120562065">Ubuntu18.04使用阿里源镜像安装Docker并配置镜像加速【图文详细】_阿里的ubuntu镜像源安装-CSDN博客</a></p><h3 id="2-1-如果之前安装过docker，卸载旧版本docker"><a href="#2-1-如果之前安装过docker，卸载旧版本docker" class="headerlink" title="2.1 如果之前安装过docker，卸载旧版本docker"></a>2.1 如果之前安装过docker，卸载旧版本docker</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> remove <span class="token function">docker</span> docker-engine docker.io containerd runc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-更新及安装工具软件"><a href="#2-2-更新及安装工具软件" class="headerlink" title="2.2 更新及安装工具软件"></a>2.2 更新及安装工具软件</h3><h4 id="2-2-1-更新系统里的所有的能更新的软件"><a href="#2-2-1-更新系统里的所有的能更新的软件" class="headerlink" title="2.2.1 更新系统里的所有的能更新的软件"></a>2.2.1 更新系统里的所有的能更新的软件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-2-安装几个工具软件"><a href="#2-2-2-安装几个工具软件" class="headerlink" title="2.2.2 安装几个工具软件"></a>2.2.2 安装几个工具软件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> apt-transport-https ca-certificates <span class="token function">curl</span> gnupg lsb-release <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-3-增加一个docker的官方GPG-key："><a href="#2-2-3-增加一个docker的官方GPG-key：" class="headerlink" title="2.2.3 增加一个docker的官方GPG key："></a>2.2.3 增加一个docker的官方GPG key：</h4><p>gpgkey：是用来验证软件的真伪 ——防伪的</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">curl</span> <span class="token parameter variable">-fsSL</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class="token operator">|</span> <span class="token function">sudo</span> gpg <span class="token parameter variable">--dearmor</span> <span class="token parameter variable">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.2.4 下载仓库文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token builtin class-name">echo</span> <span class="token string">"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg<span class="token variable"><span class="token variable">$(</span>lsb_release <span class="token parameter variable">-cs</span><span class="token variable">)</span></span> stable"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/docker.list <span class="token operator">></span> /dev/null<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-安装docker"><a href="#2-3-安装docker" class="headerlink" title="2.3 安装docker"></a>2.3 安装docker</h3><h4 id="2-3-1-再次更新系统"><a href="#2-3-1-再次更新系统" class="headerlink" title="2.3.1 再次更新系统"></a>2.3.1 再次更新系统</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-3-2-安装docker-ce软件"><a href="#2-3-2-安装docker-ce软件" class="headerlink" title="2.3.2 安装docker-ce软件"></a>2.3.2 安装docker-ce软件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> docker-ce docker-ce-cli containerd.io <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-查看是否启动docker"><a href="#2-4-查看是否启动docker" class="headerlink" title="2.4 查看是否启动docker"></a>2.4 查看是否启动docker</h3><p>由于docker安装的时候自带设置启动，所以直接查看进程是否启动就可以了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">grep</span> <span class="token function">docker</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324877.png" alt="image-20230812180124831"></p><p>安装成功</p><h2 id="3-Docker-服务操作"><a href="#3-Docker-服务操作" class="headerlink" title="3. Docker 服务操作"></a>3. Docker 服务操作</h2><h3 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> start  <span class="token comment"># 启动Docker</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> stop  <span class="token comment"># 停止Docker</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> restart  <span class="token comment"># 重启Docker</span><span class="token function">sudo</span> <span class="token function">service</span> <span class="token function">docker</span> status  <span class="token comment"># 查看Docker状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看docker容器</span><span class="token function">docker</span> <span class="token function">ps</span>    <span class="token comment">#查看当前运行的容器</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>    <span class="token comment">#查看所有容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span>  <span class="token comment">#删除所有容器</span><span class="token function">docker</span> images  <span class="token comment">#查看docker镜像</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#导入镜像包,两者都会恢复为镜像</span><span class="token function">docker</span> load <span class="token operator">&lt;</span> /home/hj/大数据比赛环境包/bigdata.tar<span class="token function">docker</span> load <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span> /home/hj/大数据比赛环境包/bigdata.tar<span class="token comment">#导入容器包,两者都会恢复为镜像</span><span class="token function">docker</span> <span class="token function">import</span> 路径<span class="token comment">#删除镜像（镜像有创建过容器则需要删除容器才可以删除镜像）</span><span class="token function">docker</span> rmi 镜像名或镜像ID<span class="token comment">#删除所有容器</span><span class="token function">docker</span> <span class="token function">rm</span> <span class="token parameter variable">-f</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-aq</span><span class="token variable">)</span></span><span class="token function">docker</span> <span class="token function">rm</span> 容器<span class="token comment">#启动容器</span><span class="token function">docker</span> start 容器id<span class="token comment">#运行容器</span><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器id /bin/bash<span class="token comment">#将容器导成镜像</span><span class="token function">sudo</span> <span class="token function">docker</span> commit <span class="token parameter variable">-a</span> <span class="token string">"镜像作者"</span> <span class="token parameter variable">-m</span> <span class="token string">"提交成镜像的说明信息"</span> 容器的名称 新镜像名称:标签<span class="token function">docker</span> 上传文件到容器<span class="token function">docker</span> <span class="token function">cp</span> /home/hj/clickhouse-21.9.4.35（tgz） master:/opt/从容器中上传文件到本地<span class="token function">docker</span> <span class="token function">cp</span> master:/opt/ /home/hj<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-Docker-的镜像操作"><a href="#3-2-Docker-的镜像操作" class="headerlink" title="3.2 Docker 的镜像操作"></a>3.2 Docker 的镜像操作</h3><h4 id="3-2-1-列出镜像"><a href="#3-2-1-列出镜像" class="headerlink" title="3.2.1 列出镜像"></a>3.2.1 列出镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324626.png" alt="image-20230812180956921"></p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>REPOSITORY</td><td>镜像所在的仓库名称</td></tr><tr><td>TAG</td><td>镜像标签(版本)</td></tr><tr><td>IMAGEID</td><td>镜像ID</td></tr><tr><td>CREATED</td><td>镜像的创建日期(不是获取该镜像的日期)</td></tr><tr><td>SIZE</td><td>镜像大小</td></tr></tbody></table><h4 id="3-2-2-搜索镜像"><a href="#3-2-2-搜索镜像" class="headerlink" title="3.2.2 搜索镜像"></a>3.2.2 搜索镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> search 镜像名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-3-拉取镜像"><a href="#3-2-3-拉取镜像" class="headerlink" title="3.2.3 拉取镜像"></a>3.2.3 拉取镜像</h4><p>要想获取某个镜像，我们可以使用pull命令，从仓库中拉取镜像到本地。</p><p>如果下载镜像时不指定标签，则默认会下载仓库中最新版本的镜像，即选择标签为 latest 标签。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull 仓库名称/标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-2-4-删除镜像"><a href="#3-2-4-删除镜像" class="headerlink" title="3.2.4 删除镜像"></a>3.2.4 删除镜像</h4><p>镜像有创建过容器则需要删除容器才可以删除镜像（或者直接强制删除）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#普通删除</span><span class="token function">docker</span> rmi 镜像名或镜像ID<span class="token comment">#强制删除</span><span class="token function">docker</span> rmi <span class="token parameter variable">-f</span> 镜像名或镜像ID<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-5-导入镜像"><a href="#3-2-5-导入镜像" class="headerlink" title="3.2.5 导入镜像"></a>3.2.5 导入镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#方法1</span><span class="token function">docker</span> load <span class="token operator">&lt;</span> 镜像包<span class="token comment">#方法2</span><span class="token function">sudo</span> <span class="token function">docker</span> load <span class="token parameter variable">-i</span> 镜像包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-6-导出镜像"><a href="#3-2-6-导出镜像" class="headerlink" title="3.2.6 导出镜像"></a>3.2.6 导出镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> save –o /opt/导出名称.tar 镜像名称:标签<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-3-Docker容器操作"><a href="#3-3-Docker容器操作" class="headerlink" title="3.3 Docker容器操作"></a>3.3 Docker容器操作</h3><h4 id="3-3-1-创建容器"><a href="#3-3-1-创建容器" class="headerlink" title="3.3.1 创建容器"></a>3.3.1 创建容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token punctuation">[</span>option<span class="token punctuation">]</span> 镜像名:tag <span class="token punctuation">[</span>向启动容器中传入的命令<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 常用可选参数说明：</p><table><thead><tr><th>参数</th><th>意义</th></tr></thead><tbody><tr><td>-i</td><td>表示以“交互模式”运行容器</td></tr><tr><td>-t</td><td>表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</td></tr><tr><td>–name</td><td>为创建的容器命名</td></tr><tr><td>-v</td><td>表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。</td></tr><tr><td>-d</td><td>在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。</td></tr><tr><td>-p</td><td>表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射</td></tr><tr><td>-e</td><td>为容器设置环境变量</td></tr><tr><td>–network</td><td>指定网桥</td></tr></tbody></table><h4 id="3-3-2-进入已运行容器"><a href="#3-3-2-进入已运行容器" class="headerlink" title="3.3.2 进入已运行容器"></a>3.3.2 进入已运行容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> 容器名或容器ID /bin/bash<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-3-查看容器"><a href="#3-3-3-查看容器" class="headerlink" title="3.3.3 查看容器"></a>3.3.3 查看容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span>     <span class="token comment">#查看当前运行的容器</span><span class="token function">docker</span> <span class="token function">ps</span> –a    <span class="token comment">#查看当前所有的容器</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-3-4-启动容器"><a href="#3-3-4-启动容器" class="headerlink" title="3.3.4 启动容器"></a>3.3.4 启动容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> start 容器名或容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-5-停止容器"><a href="#3-3-5-停止容器" class="headerlink" title="3.3.5 停止容器"></a>3.3.5 停止容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> stop 容器名或容器ID<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-6-删除容器"><a href="#3-3-6-删除容器" class="headerlink" title="3.3.6 删除容器"></a>3.3.6 删除容器</h4><p>（运行中的容器不能删除）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">rm</span> 容器名或容器ID <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-7-将容器保存为镜像"><a href="#3-3-7-将容器保存为镜像" class="headerlink" title="3.3.7 将容器保存为镜像"></a>3.3.7 将容器保存为镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> commit <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">]</span>:<span class="token punctuation">[</span>TAG<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>OPTIONS说明：</p><p>-a :提交的镜像作者；</p><p>-c :使用Dockerfile指令来创建镜像；</p><p>-m :提交时的说明文字；</p><p>-p :在commit时，将容器暂停。</p><p>$ docker commit 容器名 镜像名:tag</p><h3 id="3-4-docker网络设置"><a href="#3-4-docker网络设置" class="headerlink" title="3.4 docker网络设置"></a>3.4 docker网络设置</h3><h4 id="3-4-1-Docker基本网络"><a href="#3-4-1-Docker基本网络" class="headerlink" title="3.4.1 Docker基本网络"></a>3.4.1 Docker基本网络</h4><p><code>Docker安装后自动创建3种网络：bridge、host、none</code></p><p>Docker在启动时会开启一个虚拟网桥设备docker0，默认的地址为172.17.0.1&#x2F;16，容器启动后都会被桥接到docker0上，并自动分配到一个ip地址。</p><table><thead><tr><th align="left">bridge 桥接网络模式：</th></tr></thead><tbody><tr><td align="left">1、为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，默认为该模式</td></tr><tr><td align="left">2、为容器分配独立IP，具有很好的网络隔离性，服务不会跟宿主机上的服务发送端口冲突问题</td></tr><tr><td align="left">3、主机和容器间通过桥接的方式进行通信</td></tr><tr><td align="left">4、只能单机使用，不适合跨主机docker服务间通信</td></tr></tbody></table><table><thead><tr><th align="left">host 主机本地网络模式：</th></tr></thead><tbody><tr><td align="left">1、docker容器共享主机的ip、端口号等等网络资源，如果单机部署</td></tr><tr><td align="left">2、只能单机使用，不适合跨主机docker服务间通信</td></tr><tr><td align="left">3、这种网络模式效率最高</td></tr></tbody></table><table><thead><tr><th align="left">overlay 集群网络模式：</th></tr></thead><tbody><tr><td align="left">多节点集群下统一分配服务独立ip</td></tr><tr><td align="left">跨机器节点上的docker服务间能互相通信</td></tr><tr><td align="left">支持主机节点和集群网络内的节点间互相通信</td></tr><tr><td align="left">支持节点间加密通信 注：windows机器节点不支持加密通信</td></tr></tbody></table><p><code>添加网桥，创建容器时可以指定网桥，不使用默认网桥</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> network <span class="token function">ls</span>            <span class="token comment">#查看所有网络</span><span class="token function">docker</span> network inspect 网络   <span class="token comment">#查看网络的相关信息</span><span class="token comment">#自定义创建的默认default bridge   </span><span class="token function">docker</span> network create <span class="token parameter variable">--driver</span> bridge <span class="token parameter variable">--subnet</span> <span class="token number">192.168</span>.1.1/24 <span class="token parameter variable">--gateway</span> <span class="token number">192.168</span>.1.1 mynet <span class="token comment">#自定义创建一个网络mynet</span><span class="token function">docker</span> network <span class="token function">rm</span> 网络id  <span class="token comment">#删除网络</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Docker封装Centos7大数据环境"><a href="#4-Docker封装Centos7大数据环境" class="headerlink" title="4.Docker封装Centos7大数据环境"></a>4.Docker封装Centos7大数据环境</h2><h3 id="4-1-编写Dockerfile"><a href="#4-1-编写Dockerfile" class="headerlink" title="4.1 编写Dockerfile"></a>4.1 编写Dockerfile</h3><p>Pull一个centos7镜像，在此镜像基础上安装ssh服务，开放端口，上传jdk、hadoop等组件等操作，封装成hadoop大数据环境</p><blockquote><p>已经封装好的镜像:</p><pre class="line-numbers language-none"><code class="language-none">registry.cn-hangzhou.aliyuncs.com&#x2F;shangguan-hj&#x2F;bigdata:gxjzy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>拉取</p><pre class="line-numbers language-none"><code class="language-none">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;510_repo&#x2F;bigdata:gxjzy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="4-1-2-编写第一个dockerfile，封装一个新的镜像"><a href="#4-1-2-编写第一个dockerfile，封装一个新的镜像" class="headerlink" title="4.1.2 编写第一个dockerfile，封装一个新的镜像"></a>4.1.2 编写第一个dockerfile，封装一个新的镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 选择一个已有的os镜像作为基础  </span>FROM centos:7<span class="token comment"># 安装openssh-server和sudo软件包  </span>RUN yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span> openssh-server <span class="token function">sudo</span><span class="token comment">#安装openssh-clients</span>RUN yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span> openssh-clients<span class="token comment"># 修改ssh配置文件，方便后面通过root用户进行ssh远程登录</span>RUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g'</span> /etc/ssh/sshd_configRUN <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g'</span> /etc/ssh/sshd_config<span class="token comment">#安装initscripts，方便 ip addr 查询网络状态</span>RUN yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span> initscripts<span class="token comment">#安装防火墙 </span>RUN yum <span class="token function">install</span> firewalld <span class="token parameter variable">-y</span><span class="token comment">#安装which  hadoop版本号查看需要用到  </span>RUN yum <span class="token function">install</span> <span class="token function">which</span> <span class="token parameter variable">-y</span><span class="token comment">#mysql 初始化报错 ，缺少libnuma.so.1情况，缺啥补啥 </span>RUN yum <span class="token function">install</span> numactl <span class="token parameter variable">-y</span>RUN yum <span class="token function">install</span> libaio <span class="token parameter variable">-y</span>RUN yum <span class="token function">install</span> libnuma.so.1 <span class="token parameter variable">-y</span><span class="token comment"># 添加用户root，密码123，并且将此用户添加到sudoers里  </span>RUN <span class="token builtin class-name">echo</span> <span class="token string">"root:123"</span> <span class="token operator">|</span> chpasswdRUN <span class="token builtin class-name">echo</span> <span class="token string">"root   ALL=(ALL)       ALL"</span> <span class="token operator">>></span> /etc/sudoers<span class="token comment"># 启动sshd服务并且暴露22端口  </span>RUN <span class="token function">mkdir</span> /var/run/sshdEXPOSE <span class="token number">22</span>CMD <span class="token punctuation">[</span><span class="token string">"/usr/sbin/sshd"</span>, <span class="token string">"-D"</span><span class="token punctuation">]</span>RUN <span class="token function">mkdir</span> /opt/<span class="token punctuation">&#123;</span>software,module<span class="token punctuation">&#125;</span><span class="token comment">#封装：docker build -t"centos-ssh-root" . </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑好脚本后，使用build命令开始运行</p><p>格式：docker build -t”镜像名称” . </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build -t<span class="token string">"centos-ssh-root"</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行效果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324924.png" alt="image-20230812190933232"></p><p>查看创建的镜像：</p><p> <img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324183.png" alt="image-20230812191126430"></p><h4 id="4-1-3-编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像"><a href="#4-1-3-编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像" class="headerlink" title="4.1.3 编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像"></a>4.1.3 编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像</h4><p>封装的系统只是完成了ssh服务的安装，开放22端口，配置root用户。并没有达到大数据环境的使用要求，接下来在这个封装好的系统上，再进行封装，上传大数据环境需要的组件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#软件包根据自己所需的填写</span>FROM centos-ssh-rootCOPY apache-flume-1.9.0-bin.tar.gz /opt/software/COPY apache-hive-3.1.2-bin.tar.gz /opt/software/COPY flink-1.14.0-bin-scala_2.12.tgz /opt/software/COPY hadoop-3.1.3.tar.gz /opt/software/COPY hbase-2.2.3-bin.tar.gz /opt/software/COPY jdk-8u162-linux-x64.tar.gz /opt/software/COPY kafka_2.12-2.4.1.tgz /opt/software/COPY maxwell-1.29.0.tar.gz /opt/software/COPY redis-6.2.6.tar.gz /opt/software/COPY scala-2.12.0.tgz /opt/software/COPY spark-3.1.1-bin-hadoop3.2.tgz /opt/software/COPY clickhouse-21.9.4.35 /opt/software/COPY mysql /opt/software/COPY zookeeper-3.4.6.tar.gz /opt/software/COPY sqoop-1.4.2.bin__hadoop-2.0.0-alpha.tar.gz /opt/software/<span class="token comment">#封装：docker build -t"bigdata" . </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编辑好脚本后，使用build命令开始运行</p><p>格式：docker build -t”镜像名称” . </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> build -t<span class="token string">"bigdata"</span> <span class="token builtin class-name">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行效果：<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324473.png" alt="image-20230812191358805"></p><p>查看新封装的镜像：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324220.png" alt="image-20230812192151801"></p><h4 id="4-1-4-star-镜像优化"><a href="#4-1-4-star-镜像优化" class="headerlink" title="4.1.4 :star:镜像优化"></a>4.1.4 :star:镜像优化</h4><blockquote><p>综合上面两个dockerfile进行镜像优化</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">FROM centos:7RUN yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span> openssh-server <span class="token function">sudo</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span> openssh-clients <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g'</span> /etc/ssh/sshd_config <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">sed</span> <span class="token parameter variable">-i</span> <span class="token string">'s/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g'</span> /etc/ssh/sshd_config <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    yum <span class="token function">install</span> <span class="token parameter variable">-y</span> <span class="token parameter variable">--nogpgcheck</span> initscripts <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    yum <span class="token function">install</span> <span class="token function">which</span> <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    yum <span class="token function">install</span> numactl libaio libnuma.so.1 <span class="token parameter variable">-y</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token builtin class-name">echo</span> <span class="token string">"root:1"</span> <span class="token operator">|</span> chpasswd <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token builtin class-name">echo</span> <span class="token string">"root   ALL=(ALL)       ALL"</span> <span class="token operator">>></span> /etc/sudoers <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">mkdir</span> /var/run/sshd <span class="token operator">&amp;&amp;</span> <span class="token punctuation">\</span>    <span class="token function">mkdir</span> /opt/<span class="token punctuation">&#123;</span>software,module<span class="token punctuation">&#125;</span> COPY <span class="token builtin class-name">.</span> /opt/software EXPOSE <span class="token number">22</span>CMD <span class="token punctuation">[</span><span class="token string">"/usr/sbin/sshd"</span>, <span class="token string">"-D"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>开始构建</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker-server ~/bigdata<span class="token punctuation">]</span><span class="token comment"># docker build -t bigdata .</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>查看构建的镜像</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker-server ~/bigdata<span class="token punctuation">]</span><span class="token comment"># docker images | grep bigdata</span>bigdata                                                  latest    78d3e81ed5ac   <span class="token number">4</span> hours ago   <span class="token number">5</span>.57GB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2-Hadoop配置容器启动："><a href="#4-2-Hadoop配置容器启动：" class="headerlink" title="4.2 Hadoop配置容器启动："></a>4.2 Hadoop配置容器启动：</h3><p><strong>集群规划，一主两从</strong></p><blockquote><p>master:</p></blockquote><p>测试:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--name</span> master <span class="token parameter variable">--hostname</span> master <span class="token parameter variable">--net</span> mynet <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class="token parameter variable">-P</span> <span class="token parameter variable">-p</span> <span class="token number">50070</span>:50070 <span class="token parameter variable">-p</span> <span class="token number">8088</span>:8088 bigdata /usr/sbin/init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>:star: 实战:</p><p>自定义创建docker网络:</p><p>(这会创建一个自定义网络，允许在该网络内分配IP地址，并且子网为<code>192.168.1.0/24</code>)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> network create <span class="token parameter variable">--subnet</span><span class="token operator">=</span><span class="token number">192.168</span>.1.0/24 mynet<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一个名为master的容器,ip为192.168.1.10:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--name</span> master <span class="token parameter variable">--hostname</span> master <span class="token parameter variable">--network</span> mynet <span class="token parameter variable">--ip</span> <span class="token number">192.168</span>.1.10 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">16010</span>:16010 <span class="token parameter variable">-p</span> <span class="token number">2181</span>:2181 <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">-p</span> <span class="token number">8031</span>:8031 <span class="token parameter variable">-p</span> <span class="token number">8032</span>:8032 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">8033</span>:8033 <span class="token parameter variable">-p</span> <span class="token number">8080</span>:8080 <span class="token parameter variable">-p</span> <span class="token number">8081</span>:8081 <span class="token parameter variable">-p</span> <span class="token number">8020</span>:8020 <span class="token parameter variable">-p</span> <span class="token number">8088</span>:8088 <span class="token parameter variable">-p</span> <span class="token number">8123</span>:8123 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">9000</span>:9000 <span class="token parameter variable">-p</span> <span class="token number">9083</span>:9083 <span class="token parameter variable">-p</span> <span class="token number">9092</span>:9092 <span class="token parameter variable">-p</span> <span class="token number">9866</span>:9866 <span class="token parameter variable">-p</span> <span class="token number">9870</span>:9870 <span class="token parameter variable">-p</span> <span class="token number">10000</span>:10000 <span class="token punctuation">\</span>  <span class="token parameter variable">-p</span> <span class="token number">60010</span>:60010 <span class="token parameter variable">-p</span> <span class="token number">12321</span>:12321 <span class="token parameter variable">-p</span> <span class="token number">4040</span>:4040 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class="token punctuation">\</span>  bigdata:gxjzy /usr/sbin/init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>slave1:</p></blockquote><p>测试:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--name</span> slave1 <span class="token parameter variable">--hostname</span> slave1 <span class="token parameter variable">--net</span> mynet <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-P</span> bigdata /usr/sbin/init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>:star: 实战:</p><p>创建一个名为master的容器,ip为192.168.1.10:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--name</span> slave1 <span class="token parameter variable">--hostname</span> slave1 <span class="token parameter variable">--network</span> mynet <span class="token parameter variable">--ip</span> <span class="token number">192.168</span>.1.20 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class="token punctuation">\</span>  bigdata:gxjzy /usr/sbin/init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>slave2:</p></blockquote><p>测试:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-id</span> <span class="token parameter variable">--name</span> slave2 <span class="token parameter variable">--hostname</span> slave2 <span class="token parameter variable">--net</span> mynet <span class="token parameter variable">--privileged</span><span class="token operator">=</span>true <span class="token parameter variable">-P</span> bigdata /usr/sbin/init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>:star: 实战:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> run <span class="token parameter variable">-d</span> <span class="token parameter variable">--privileged</span> <span class="token parameter variable">--name</span> slave2 <span class="token parameter variable">--hostname</span> slave2 <span class="token parameter variable">--network</span> mynet <span class="token parameter variable">--ip</span> <span class="token number">192.168</span>.1.30 <span class="token punctuation">\</span>  <span class="token parameter variable">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class="token punctuation">\</span>  bigdata:gxjzy /usr/sbin/init<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看创建情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080117475.png" alt="image-20240108011713901"></p><p>iptables端口映射（略）(后续添加端口映射需要使用)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-vnL</span>  <span class="token comment">#查看端口映射</span>iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-A</span> DOCKER <span class="token parameter variable">-p</span> tcp <span class="token parameter variable">--dport</span> <span class="token number">8089</span> <span class="token parameter variable">-j</span> DNAT --to-destination <span class="token number">192.168</span>.12.10:8088  <span class="token comment">#添加端口映射</span>iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-vnL</span> DOCKER --line-number <span class="token comment">#显示端口行号</span>iptables <span class="token parameter variable">-t</span> nat <span class="token parameter variable">-D</span> DOCKER <span class="token punctuation">&#123;</span>行号<span class="token punctuation">&#125;</span>  <span class="token comment">#删除规则</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入容器：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> master <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-使用docker-compose编排工具快速建立基础环境"><a href="#5-使用docker-compose编排工具快速建立基础环境" class="headerlink" title="5. 使用docker-compose编排工具快速建立基础环境"></a>5. 使用docker-compose编排工具快速建立基础环境</h2><blockquote><p>首先安装好docker-compose编排工具(略)</p></blockquote><h3 id="5-1-编写docker-compose-yml"><a href="#5-1-编写docker-compose-yml" class="headerlink" title="5.1 编写docker-compose.yml"></a>5.1 编写docker-compose.yml</h3><p>自定义容器ip:</p><table><thead><tr><th>容器</th><th>ip</th></tr></thead><tbody><tr><td>master</td><td>192.168.1.10</td></tr><tr><td>slave1</td><td>192.168.1.20</td></tr><tr><td>slave2</td><td>192.168.1.30</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker-server ~/bigdata-work<span class="token punctuation">]</span><span class="token comment"># vim docker-compose.yml </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"2.2"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">master</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/shangguan<span class="token punctuation">-</span>hj/bigdata<span class="token punctuation">:</span>gxjzy    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> master    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> master    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">mynet</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> <span class="token string">"192.168.1.10"</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 1022<span class="token punctuation">:</span><span class="token number">22</span>      <span class="token punctuation">-</span> 50070<span class="token punctuation">:</span><span class="token number">50070</span>      <span class="token punctuation">-</span> 8088<span class="token punctuation">:</span><span class="token number">8088</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /sys/fs/cgroup<span class="token punctuation">:</span>/sys/fs/cgroup    <span class="token key atrule">command</span><span class="token punctuation">:</span> /usr/sbin/init  <span class="token key atrule">slave1</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/shangguan<span class="token punctuation">-</span>hj/bigdata<span class="token punctuation">:</span>gxjzy    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> slave1    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> slave1    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">mynet</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> <span class="token string">"192.168.1.20"</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 1023<span class="token punctuation">:</span><span class="token number">22</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /sys/fs/cgroup<span class="token punctuation">:</span>/sys/fs/cgroup    <span class="token key atrule">command</span><span class="token punctuation">:</span> /usr/sbin/init      <span class="token key atrule">slave2</span><span class="token punctuation">:</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always    <span class="token key atrule">image</span><span class="token punctuation">:</span> registry.cn<span class="token punctuation">-</span>hangzhou.aliyuncs.com/shangguan<span class="token punctuation">-</span>hj/bigdata<span class="token punctuation">:</span>gxjzy    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> slave2    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> slave2    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token key atrule">mynet</span><span class="token punctuation">:</span>        <span class="token key atrule">ipv4_address</span><span class="token punctuation">:</span> <span class="token string">"192.168.1.30"</span>    <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 1024<span class="token punctuation">:</span><span class="token number">22</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> /sys/fs/cgroup<span class="token punctuation">:</span>/sys/fs/cgroup    <span class="token key atrule">command</span><span class="token punctuation">:</span> /usr/sbin/init<span class="token comment"># 连接外部网络</span><span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">mynet</span><span class="token punctuation">:</span>    <span class="token key atrule">ipam</span><span class="token punctuation">:</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">subnet</span><span class="token punctuation">:</span> 192.168.1.0/24<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-启动docker容器"><a href="#5-2-启动docker容器" class="headerlink" title="5.2 启动docker容器"></a>5.2 启动docker容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker-server ~/bigdata-work<span class="token punctuation">]</span><span class="token comment"># docker-compose up -d</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111500849.png" alt="image-20231211150006708"></p><h3 id="5-3-查看创建情况"><a href="#5-3-查看创建情况" class="headerlink" title="5.3 查看创建情况"></a>5.3 查看创建情况</h3><h4 id="5-3-1-方式一-了解"><a href="#5-3-1-方式一-了解" class="headerlink" title="5.3.1 方式一(了解):"></a>5.3.1 方式一(了解):</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker-server ~/bigdata-work<span class="token punctuation">]</span><span class="token comment"># docker-compose ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111501626.png" alt="image-20231211150148532"></p><h4 id="5-3-2-方式二"><a href="#5-3-2-方式二" class="headerlink" title="5.3.2 方式二:"></a>5.3.2 方式二:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker-server ~/bigdata-work<span class="token punctuation">]</span><span class="token comment"># docker ps</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111502108.png" alt="image-20231211150204022"></p><h3 id="5-4-进入容器"><a href="#5-4-进入容器" class="headerlink" title="5.4 进入容器"></a>5.4 进入容器</h3><p><strong>master:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker-server ~/bigdata-work<span class="token punctuation">]</span><span class="token comment"># docker exec -it master bash</span><span class="token punctuation">[</span>root@master /<span class="token punctuation">]</span><span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever<span class="token number">96</span>: eth0@if97: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default     link/ether 02:42:c0:a8:01:02 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>    inet <span class="token number">192.168</span>.1.2/24 brd <span class="token number">192.168</span>.1.255 scope global eth0       valid_lft forever preferred_lft forever<span class="token punctuation">[</span>root@master /<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>slave1:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker-server ~/bigdata-work<span class="token punctuation">]</span><span class="token comment"># docker exec -it slave1 bash</span><span class="token punctuation">[</span>root@slave1 /<span class="token punctuation">]</span><span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever<span class="token number">34</span>: eth0@if35: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default     link/ether 02:42:c0:a8:01:04 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>    inet <span class="token number">192.168</span>.1.4/24 brd <span class="token number">192.168</span>.1.255 scope global eth0       valid_lft forever preferred_lft forever<span class="token punctuation">[</span>root@slave1 /<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>slave2:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@docker-server ~/bigdata-work<span class="token punctuation">]</span><span class="token comment"># docker exec -it slave2 bash</span><span class="token punctuation">[</span>root@slave2 /<span class="token punctuation">]</span><span class="token comment"># ip a</span><span class="token number">1</span>: lo: <span class="token operator">&lt;</span>LOOPBACK,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class="token number">1000</span>    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet <span class="token number">127.0</span>.0.1/8 scope <span class="token function">host</span> lo       valid_lft forever preferred_lft forever<span class="token number">32</span>: eth0@if33: <span class="token operator">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class="token operator">></span> mtu <span class="token number">1500</span> qdisc noqueue state UP group default     link/ether 02:42:c0:a8:01:03 brd ff:ff:ff:ff:ff:ff link-netnsid <span class="token number">0</span>    inet <span class="token number">192.168</span>.1.3/24 brd <span class="token number">192.168</span>.1.255 scope global eth0       valid_lft forever preferred_lft forever<span class="token punctuation">[</span>root@slave2 /<span class="token punctuation">]</span><span class="token comment"># </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-连接客户端工具xshell"><a href="#5-5-连接客户端工具xshell" class="headerlink" title="5.5 连接客户端工具xshell"></a>5.5 连接客户端工具xshell</h3><p>&#x3D;&#x3D;注意定义的ssh端口&#x3D;&#x3D;</p><blockquote><p>master</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111517302.png"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111515957.png" alt="image-20231211151542886"></p><blockquote><p>slave1</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516827.png" alt="image-20231211151638743"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516374.png" alt="image-20231211151651296"></p><blockquote><p>slave2</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518533.png" alt="image-20231211151809445"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518365.png" alt="image-20231211151826289"></p><p>完成</p><h2 id="6-asbru-cm工具的使用"><a href="#6-asbru-cm工具的使用" class="headerlink" title="6. asbru-cm工具的使用"></a>6. asbru-cm工具的使用</h2><p>1、</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134495.png" alt="image-20230320175907854"></p><p>2、</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134744.png" alt="image-20230320180309740"></p>]]></content>
      
      
      <categories>
          
          <category> 大数据运维系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bigdata </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop环境配置合集</title>
      <link href="/2024/11/10/hadoop-huan-jing-pei-zhi-he-ji/"/>
      <url>/2024/11/10/hadoop-huan-jing-pei-zhi-he-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><h2 id="1-Hadoop-概述"><a href="#1-Hadoop-概述" class="headerlink" title="1.Hadoop 概述"></a>1.Hadoop 概述</h2><p><strong>1.1 Hadoop 是什么</strong></p><p>（1）Hadoop是一个由Apache基金会所开发的<font color="red" size="3">分布式系统基础架构</font> </p><p>（2）主要解决海量数据的<font color="red" size="3">存储</font>和海量数据的<font color="red" size="3">分析计算</font>问题 </p><p>（3）广义上来说，Hadoop通常是指一个更广泛的概念——<font color="red" size="3">Hadoop生态圈</font></p><p><strong>1.2 Hadoop 优势</strong></p><p>（1）<strong>高可靠性</strong>：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。 </p><p>（2）<strong>高扩展性</strong>：在集群间分配任务数据，可方便的扩展数以千计的节点。 </p><p>（3）<strong>高效性</strong>：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。 </p><p>（4）<strong>高容错性</strong>：能够自动将失败的任务重新分配。</p><p><strong>1.3 Hadoop 组成（面试重点）</strong></p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527570.png" alt="在这里插入图片描述"> <p>在Hadoop1.x 时代，Hadoop中的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大。 在Hadoop2.x时代，增加了Yarn。Yarn只负责资源的调度，MapReduce 只负责运算。 &#x3D;&#x3D;Hadoop3.x在组成上没有变化。&#x3D;&#x3D;</p><p><strong>1.3.1 HDFS 架构概述</strong></p><p>Hadoop Distributed File System，简称<font color="red" size="3">HDFS</font>，是一个分布式文件系统。</p><p>（1）<code>NameNode</code>（nn）：存储文件的<strong>元数据</strong>，如<strong>文件名</strong>，<strong>文件目录结构</strong>，<strong>文件属性</strong>（生成时间、副本数、文件权限），以及每个文件的<strong>块列表</strong>和<strong>块所在的DataNode</strong>等。 </p><p>（2）<code>DataNode</code>(dn)：在本地文件系统<strong>存储文件块数据</strong>，以及<strong>块数据的校验和</strong>。 </p><p>（3）<code>Secondary NameNode</code>(2nn)：<strong>每隔一段时间对NameNode元数据备份</strong>。</p><p><strong>1.3.2 YARN 架构概述</strong></p><p>Yet Another Resource Negotiator 简称YARN ，另一种资源协调者，是Hadoop 的资源管理器。</p> <img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111625192.png" alt="在这里插入图片描述"><p><code>ResourceManager</code>(RM)：整个集群资源（内存、CPU等）的管理者 </p><p><code>NodeManager</code>(NM)：单个节点服务器资源的管理者。 </p><p><code>ApplicationMaster</code>(AM)：单个任务运行的管理者。 </p><p><code>Container</code>：容器，相当于一台独立的服务器，里面封装了任务运行所需要的资源，如<strong>内存、CPU、磁盘、网络</strong>等。</p><p>说明： </p><p>（1）客户端可以有多个 </p><p>（2）集群上可以运行多个ApplicationMaster </p><p>（3）每个NodeManager上可以有多个Container</p><p><strong>1.3.3 MapReduce 架构概述</strong></p><p>MapReduce 将计算过程分为两个阶段：Map 和Reduce 1）Map 阶段并行处理输入数据 2）Reduce 阶段对Map 结果进行汇总 </p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527808.png" alt="在这里插入图片描述"><p><strong>1.3.4 HDFS、YARN、MapReduce 三者关系</strong></p><p>如图所示：</p> <img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527601.png" alt="在这里插入图片描述"><p><strong>1.3.5 大数据技术生态体系</strong></p><p>如图所示： <img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527584.png" alt="在这里插入图片描述"> </p><p>图中涉及的技术名词解释如下：</p><p>（1）<code>Sqoop</code>：Sqoop 是一款开源的工具，主要用于在Hadoop、Hive 与传统的数据库（MySQL）间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop 的HDFS 中，也可以将HDFS 的数据导进到关系型数据库中。 </p><p>（2）<code>Flume</code>：Flume 是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据。 （3）<code>Kafka</code>：Kafka 是一种高吞吐量的分布式发布订阅消息系统。 </p><p>（4）<code>Spark</code>：Spark 是当前最流行的开源大数据内存计算框架。可以基于Hadoop 上存储的大数据进行计算。</p><p>（5）<code>Flink</code>：Flink 是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多。 </p><p>（6）<code>Oozie</code>：Oozie 是一个管理Hadoop 作业（job）的工作流程调度管理系统。 </p><p>（7）<code>Hbase</code>：HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。 </p><p>（8）<code>Hive</code>：Hive 是基于Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL 查询功能，可以将SQL 语句转换为MapReduce 任务进行运行。其优点是学习成本低，可以通过类SQL 语句快速实现简单的MapReduce 统计，不必开发专门的MapReduce 应用，十分适合数据仓库的统计分析。 </p><p>（9）<code>ZooKeeper</code>：它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。</p><p><strong>1.3.6 推荐系统框架图</strong></p><p>推荐系统项目框架</p> <img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527591.png" alt="在这里插入图片描述"><p><strong>1.3.7 常用端口号说明</strong></p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111537682.png" alt="在这里插入图片描述"><h2 id="2-Hadoop-完全分部署运行环境搭建"><a href="#2-Hadoop-完全分部署运行环境搭建" class="headerlink" title="2. Hadoop 完全分部署运行环境搭建"></a>2. Hadoop 完全分部署运行环境搭建</h2><p>环境说明:</p><table><thead><tr><th>容器</th><th>容器ip</th></tr></thead><tbody><tr><td>master</td><td>192.168.1.10</td></tr><tr><td>slave1</td><td>192.168.1.20</td></tr><tr><td>slave2</td><td>192.168.1.30</td></tr></tbody></table><h3 id="2-1-配置主机名"><a href="#2-1-配置主机名" class="headerlink" title="2.1 配置主机名"></a>2.1 配置主机名</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hostnamectl set-hostname master <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span>hostnamectl set-hostname slave1 <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span>hostnamectl set-hostname slave2 <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-2-修改hosts，添加映射，关闭防火墙"><a href="#2-2-修改hosts，添加映射，关闭防火墙" class="headerlink" title="2.2 修改hosts，添加映射，关闭防火墙"></a>2.2 修改hosts，添加映射，关闭防火墙</h3><blockquote><p>所有节点执行</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cat /etc/hosts</span><span class="token number">127.0</span>.0.1localhost::1localhost ip6-localhost ip6-loopbackfe00::0ip6-localnetff00::0ip6-mcastprefixff02::1ip6-allnodesff02::2ip6-allrouters<span class="token number">192.168</span>.1.10master<span class="token number">192.168</span>.1.20slave1<span class="token number">192.168</span>.1.30slave2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">systemctl stop firewalldsystemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-3-设置三台主机的免密登录"><a href="#2-3-设置三台主机的免密登录" class="headerlink" title="2.3 设置三台主机的免密登录"></a>2.3 设置三台主机的免密登录</h3><h4 id="2-3-1-生成免密公钥"><a href="#2-3-1-生成免密公钥" class="headerlink" title="2.3.1 生成免密公钥"></a>2.3.1 生成免密公钥</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen -t rsa#然后一直回车</span>或者<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># ssh-keygen -f ~/.ssh/id_rsa -P '' #免回车</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607877.png" alt="image-20230321114300354"></p><h4 id="2-3-2-复制公钥到服务器"><a href="#2-3-2-复制公钥到服务器" class="headerlink" title="2.3.2 复制公钥到服务器"></a>2.3.2 复制公钥到服务器</h4><pre class="line-numbers language-hss" data-language="hss"><code class="language-hss">ssh-copy-id masterssh-copy-id slave1ssh-copy-id slave2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607997.png" alt="image-20230321115337762"></p><p>(另外两个节点也是如此操作，这里就不演示了)</p><h3 id="2-4-JDK配置"><a href="#2-4-JDK配置" class="headerlink" title="2.4 JDK配置"></a>2.4 JDK配置</h3><p>解压文件到相应的位置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf /opt/software/jdk-8u162-linux-x64.tar.gz -C /opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cd /opt/module/#进入解压目录，可以给解压后的文件改个名字，方便记忆</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># mv jdk1.8.0_162/ jdk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>设置jdk环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># vi /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾添加如下配置：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#JAVA_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/module/jdk<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin:<span class="token variable">$JAVA_HOME</span>/jre/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>刷新环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># source /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置完后即可查看jdk版本号：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># java -version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617633.png" alt="image-20230321122027954"></p><p>分发JDK和环境变量到两个副节点：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp /etc/profile root@slave1:/etc/profile</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp /etc/profile root@slave2:/etc/profile</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp -rq jdk/ root@slave1:/opt/module/</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp -rq jdk/ root@slave2:/opt/module/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617652.png" alt="image-20230321122308314"></p><p>分发到两个副节点后，刷新环境变量，查看JAVA版本：</p><p>slave1节点：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617692.png" alt="image-20230321122633530"></p><p>slave2节点：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617803.png" alt="image-20230321122717175"></p><p>基础环境搭建完成！！</p><blockquote><p>添加jpsall脚本(可选)</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> <span class="token variable">$JAVA_HOME</span>/bin/jpsall<span class="token function">chmod</span> +x <span class="token variable">$JAVA_HOME</span>/bin/jpsall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>脚本内容如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">hostname</span> <span class="token keyword">in</span> master slave1 slave2<span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token variable">$hostname</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>  <span class="token function">ssh</span> <span class="token variable">$hostname</span> <span class="token string">". /etc/profile; jps"</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-Hadoop环境搭建"><a href="#2-5-Hadoop环境搭建" class="headerlink" title="2.5 Hadoop环境搭建"></a>2.5 Hadoop环境搭建</h3><blockquote><p>前提：已完成3个节点的免密登录，jdk配置</p></blockquote><h4 id="2-5-1-解压包到相应位置："><a href="#2-5-1-解压包到相应位置：" class="headerlink" title="2.5.1 解压包到相应位置："></a>2.5.1 解压包到相应位置：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># tar -zxvf /opt/software/hadoop-3.1.3.tar.gz -C /opt/module/</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># mv hadoop-3.1.3/ hadoop#改一下名字，方便记忆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-5-2-添加hadoop环境变量"><a href="#2-5-2-添加hadoop环境变量" class="headerlink" title="2.5.2 添加hadoop环境变量"></a>2.5.2 添加hadoop环境变量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># vi /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在末尾添加以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HADOOP</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/opt/module/hadoop<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HADOOP_HOME</span>/bin:<span class="token variable">$HADOOP_HOME</span>/sbin<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_CLASSPATH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span>$HADOOP_HOME/bin/hadoop classpath<span class="token variable">`</span></span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_NAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_DATANODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_SECONDARYNAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_RESOURCEMANAGER_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_NODEMANAGER_USER</span><span class="token operator">=</span>root<span class="token comment">#备注：3.0后的版本需要指定服务用户</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>：wq 保存退出后，刷新环境变量：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># source /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置好后，即可直接查看hadoop 版本号</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># hadoop version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111621421.png" alt="image-20230321124056646"></p><h3 id="2-6-修改6个主配置文件"><a href="#2-6-修改6个主配置文件" class="headerlink" title="2.6 修改6个主配置文件"></a>2.6 修改6个主配置文件</h3><ul><li>:one: core.site.xml </li><li>:two: hdfs-site.xml </li><li>:three: mapred-site.xml </li><li>:four:yarn-site.xml </li><li>:five: hadoop-env.sh </li><li>:six: workers</li></ul><p>&#x3D;&#x3D;配置参考官方文档&#x3D;&#x3D;</p><blockquote><p>目录:<code>\hadoop-3.1.3\share\doc\hadoop</code></p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042227312.png" alt="image-20240104222735234"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042226052.png" alt="image-20240104222630568"></p><p>或直接查看官方配置文件:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> ./ <span class="token parameter variable">-name</span> <span class="token string">"core-de*"</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-name</span> <span class="token string">"hdfs-de*"</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-name</span> <span class="token string">"mapred-de*"</span> <span class="token parameter variable">-o</span> <span class="token parameter variable">-name</span> <span class="token string">"yarn-de*"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051527779.png" alt="image-20240105152739131"></p><p>(记住主要参数名即可)</p><h4 id="2-6-1先进入配置目录"><a href="#2-6-1先进入配置目录" class="headerlink" title="2.6.1先进入配置目录"></a>2.6.1先进入配置目录</h4><pre class="line-numbers language-SH" data-language="SH"><code class="language-SH">[root@master module]# cd hadoop&#x2F;etc&#x2F;hadoop&#x2F;[root@master hadoop]# ll<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以看到如下文件：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630756.png" alt="image-20230321124310396"></p><p>我们只用修改其中的6条</p><h4 id="2-6-2-hadoop-env-sh配置："><a href="#2-6-2-hadoop-env-sh配置：" class="headerlink" title="2.6.2 hadoop-env.sh配置："></a>2.6.2 hadoop-env.sh配置：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi hadoop-env.sh #告诉hadoop jdk在哪里</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630692.png" alt="image-20230321124524896"></p><h4 id="2-6-3-workers配置"><a href="#2-6-3-workers配置" class="headerlink" title="2.6.3 workers配置"></a>2.6.3 workers配置</h4><p>（根据自己的集群来进行配置）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi workers</span>masterslave1slave2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630688.png" alt="image-20230321124806539"></p><h4 id="2-6-4-core-site-xml配置："><a href="#2-6-4-core-site-xml配置：" class="headerlink" title="2.6.4 core.site.xml配置："></a>2.6.4 core.site.xml配置：</h4><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042229494.png" alt="image-20240104222915427"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi core-site.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- hdfs的地址名称：schame,ip,port--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-5-hdfs-site-xml"><a href="#2-6-5-hdfs-site-xml" class="headerlink" title="2.6.5 hdfs.site.xml:"></a>2.6.5 hdfs.site.xml:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi hdfs-site.xml </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- namenode守护进程管理的元数据文件fsimage存储的位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 块的副本数--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 块的大小(128M),下面的单位是字节--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.blocksize<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>134217728<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- secondarynamenode守护进程的http地址：主机名和端口号。参考守护进程布局--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:9868<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- namenode守护进程的http地址：主机名和端口号。参考守护进程布局--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--是否开通HDFS的Web接口，3.0版本后默认端口是9870--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.webhdfs.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-6-mapred-site-xml"><a href="#2-6-6-mapred-site-xml" class="headerlink" title="2.6.6 mapred-site.xml:"></a>2.6.6 mapred-site.xml:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi mapred-site.xml </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 指定mapreduce使用yarn资源管理器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置作业历史服务器的地址--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置作业历史服务器的http地址--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.app.mapreduce.am.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.map.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.reduce.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-7-yarn-site-xml"><a href="#2-6-7-yarn-site-xml" class="headerlink" title="2.6.7 yarn-site.xml:"></a>2.6.7 yarn-site.xml:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vi yarn-site.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Site specific YARN configuration properties --></span><span class="token comment">&lt;!-- NodeManager获取数据的方式shuffle --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 指定YARN的ResourceManager的地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- yarn的web访问地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:8088<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.webapp.https.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:8090<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 设置聚合日志在hdfs上的保存时间 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation.retain-seconds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>604800<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以前hadoop 2.X 版本，访问web界面，hdfs端口号是50070，现在3.X版本，端口号是9870（最好自己指定端口号）</p><h4 id="2-6-8-配置好后分发到副节点（别忘了环境变量也要再次分发）："><a href="#2-6-8-配置好后分发到副节点（别忘了环境变量也要再次分发）：" class="headerlink" title="2.6.8 配置好后分发到副节点（别忘了环境变量也要再次分发）："></a>2.6.8 配置好后分发到副节点（别忘了环境变量也要再次分发）：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp /etc/profile root@slave1:/etc/profile</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp /etc/profile root@slave2:/etc/profile</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/hadoop root@slave1:/opt/module</span><span class="token punctuation">[</span>root@master module<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/hadoop root@slave2:/opt/module</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分发完后去副节点刷新环境变量</p><h4 id="2-6-9-初始化namenode："><a href="#2-6-9-初始化namenode：" class="headerlink" title="2.6.9 初始化namenode："></a>2.6.9 初始化namenode：</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hdfs namenode -format</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630315.png" alt="image-20230320183413920"></p><h4 id="2-6-10-开启集群："><a href="#2-6-10-开启集群：" class="headerlink" title="2.6.10 开启集群："></a>2.6.10 开启集群：</h4><p>简易启动：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># start-all.sh </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看结果:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">方法1:jps方法2:<span class="token punctuation">(</span>手动添加脚本<span class="token punctuation">)</span>jpsall<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630752.png"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051740271.png" alt="image-20240105174003166"></p><h3 id="2-7-web端口访问测试"><a href="#2-7-web端口访问测试" class="headerlink" title="2.7 web端口访问测试"></a>2.7 web端口访问测试</h3><p><a href="http://ip:9870/">http://ip:9870</a></p><p><a href="http://ip:8088/">http://ip:8088</a></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531566.png" alt="image-20240105153102460"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531631.png" alt="image-20240105153114530"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531093.png" alt="image-20240105153148000"></p><p>完成</p><h2 id="3-Hadoop-HA"><a href="#3-Hadoop-HA" class="headerlink" title="3. Hadoop HA"></a>3. Hadoop HA</h2><h3 id="3-1-部署zookeeper集群"><a href="#3-1-部署zookeeper集群" class="headerlink" title="3.1 部署zookeeper集群"></a>3.1 部署zookeeper集群</h3><h4 id="3-1-1-解压所需压缩包并重命名"><a href="#3-1-1-解压所需压缩包并重命名" class="headerlink" title="3.1.1 解压所需压缩包并重命名"></a>3.1.1 解压所需压缩包并重命名</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf /opt/software/zookeeper-3.4.6.tar.gz -C /opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># mv /opt/module/zookeeper-3.4.6/ /opt/module/zookeeper</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>创建数据目录和日志目录</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#数据目录</span><span class="token function">mkdir</span> /opt/module/zookeeper/data<span class="token comment">#日志目录</span><span class="token function">mkdir</span> /opt/module/zookeeper/logs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-2-配置环境变量"><a href="#3-1-2-配置环境变量" class="headerlink" title="3.1.2 配置环境变量"></a>3.1.2 配置环境变量</h4><blockquote><p>所有节点添加</p></blockquote><p>添加环境变量:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#zookeeper</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">ZK_HOME</span><span class="token operator">=</span>/opt/module/zookeeper<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$ZK_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> <span class="token operator">>></span>/etc/profile<span class="token operator">&lt;&lt;</span><span class="token string">EOF#zookeeperexport ZK_HOME=/opt/module/zookeeperexport PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$ZK_HOME</span>/binEOF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>刷新生效:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-1-3-配置zoo-cfg文件"><a href="#3-1-3-配置zoo-cfg文件" class="headerlink" title="3.1.3 配置zoo.cfg文件"></a>3.1.3 配置zoo.cfg文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">创建数据目录和日志目录<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># mkdir /opt/module/zookeeper/&#123;data,logs&#125;</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cp /opt/module/zookeeper/conf/zoo_sample.cfg /opt/module/zookeeper/conf/zoo.cfg</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># vi /opt/module/zookeeper/conf/zoo.cfg</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置内容如下:</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># cat zoo.cfg </span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/module/zookeeper/data<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/opt/module/zookeeper/logs<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token assign-left variable">server.1</span><span class="token operator">=</span>master:2888:3888<span class="token assign-left variable">server.2</span><span class="token operator">=</span>slave1:2888:3888<span class="token assign-left variable">server.3</span><span class="token operator">=</span>slave2:2888:3888<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置详解:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@kafka1 opt<span class="token punctuation">]</span><span class="token comment"># grep -Ev "#|^$" /usr/local/zookeeper/conf/zoo.cfg </span><span class="token assign-left variable">tickTime</span><span class="token operator">=</span><span class="token number">2000</span><span class="token assign-left variable">initLimit</span><span class="token operator">=</span><span class="token number">10</span><span class="token assign-left variable">syncLimit</span><span class="token operator">=</span><span class="token number">5</span><span class="token assign-left variable">dataDir</span><span class="token operator">=</span>/opt/module/zookeeper/data<span class="token assign-left variable">dataLogDir</span><span class="token operator">=</span>/opt/module/zookeeper/logs<span class="token assign-left variable">clientPort</span><span class="token operator">=</span><span class="token number">2181</span><span class="token assign-left variable">maxClientCnxns</span><span class="token operator">=</span><span class="token number">4096</span><span class="token comment">#(可选)</span><span class="token assign-left variable">autopurge.snapRetainCount</span><span class="token operator">=</span><span class="token number">128</span>   <span class="token comment"># /opt/zookeeper里保存快照的最大数量(可选)</span><span class="token assign-left variable">autopurge.purgeInterval</span><span class="token operator">=</span><span class="token number">1</span>   <span class="token comment"># 几小时清理一次(可选)</span><span class="token comment"># 可以用主机名，因为设置了映射</span><span class="token assign-left variable">server.1</span><span class="token operator">=</span>master:2888:3888<span class="token assign-left variable">server.2</span><span class="token operator">=</span>slave1:2888:3888<span class="token assign-left variable">server.3</span><span class="token operator">=</span>slave2:2888:3888配置参数解读：<span class="token assign-left variable">server.A</span><span class="token operator">=</span>B:C:DA是一个数字，表示这个是第几号服务器。myid中的编号就是这个值。zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。B是这个服务器的地址。C是这个服务器Follower与集群中的Leader服务器交换信息的端口。D是万一集群中的leader服务器挂了，需要一个端口来重新进行选举，选举一个新的leader，而这个端口就是用来执行选举时服务器相互通信的端口。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201018515.png" alt="image-20240105162313246"></p><h4 id="3-1-4-配置myid文件"><a href="#3-1-4-配置myid文件" class="headerlink" title="3.1.4 配置myid文件"></a>3.1.4 配置<code>myid</code>文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master zookeeper<span class="token punctuation">]</span><span class="token comment"># echo 1 > $ZK_HOME/data/myid</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-1-5-分发文件给子节点并分别修改myid文件"><a href="#3-1-5-分发文件给子节点并分别修改myid文件" class="headerlink" title="3.1.5 分发文件给子节点并分别修改myid文件"></a>3.1.5 分发文件给子节点并分别修改myid文件</h4><blockquote><p>:warning:注意:如果子节点没有配置环境变量,也要一同分发</p></blockquote><p>分发:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/zookeeper/ root@slave1:/opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># scp -r /opt/module/zookeeper/ root@slave2:/opt/module/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改myid文件:</p><p>slave1:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@slave1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > /opt/module/zookeeper/data/myid</span><span class="token punctuation">[</span>root@slave1 ~<span class="token punctuation">]</span><span class="token comment"># echo 2 > $ZK_HOME/data/myid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>slave2:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@slave2 ~<span class="token punctuation">]</span><span class="token comment"># echo 3 > /opt/module/zookeeper/data/myid</span><span class="token punctuation">[</span>root@slave2 ~<span class="token punctuation">]</span><span class="token comment"># echo 3 > $ZK_HOME/data/myid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="3-1-6-启动zk服务"><a href="#3-1-6-启动zk服务" class="headerlink" title="3.1.6 启动zk服务"></a>3.1.6 启动zk服务</h4><p>所有节点启动:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/module/zookeeper/bin/zkServer.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看启动状态:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/opt/module/zookeeper/bin/zkServer.sh status<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>master:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020411.png" alt="image-20240105165336746"></p><p>slave1:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020560.png" alt="image-20240105165353343"></p><p>slave2:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020484.png" alt="image-20240105165433958"></p><h3 id="3-2-配置Hadoop-HA"><a href="#3-2-配置Hadoop-HA" class="headerlink" title="3.2 配置Hadoop HA"></a>3.2 配置Hadoop HA</h3><p>操作步骤和完全分布式一样，主要修改配置文件，这里从<code>2.6</code>开始</p><h4 id="3-2-1-hadoop-env-sh配置"><a href="#3-2-1-hadoop-env-sh配置" class="headerlink" title="3.2.1 hadoop-env.sh配置"></a>3.2.1 hadoop-env.sh配置</h4><p>添加以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/opt/module/jdk1.8.0_162<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_NAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_DATANODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_SECONDARYNAMENODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_RESOURCEMANAGER_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">YARN_NODEMANAGER_USER</span><span class="token operator">=</span>root<span class="token comment">#ha新增</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_JOURNALNODE_USER</span><span class="token operator">=</span>root<span class="token builtin class-name">export</span> <span class="token assign-left variable">HDFS_ZKFC_USER</span><span class="token operator">=</span>root<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202007642.png" alt="image-20240220200709576"></p><h4 id="3-2-2-workers配置"><a href="#3-2-2-workers配置" class="headerlink" title="3.2.2 workers配置"></a>3.2.2 workers配置</h4><p>添加集群信息：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># cat workers</span>masterslave1slave2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-3-core-site-xml配置"><a href="#3-3-3-core-site-xml配置" class="headerlink" title="3.3.3 core-site.xml配置"></a>3.3.3 core-site.xml配置</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vim core-site.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下配置：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- hdfs的地址名称：schame,ip,port--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://master:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.tmp.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/tmp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- ha.zookeeper.quorum 指定zookeeper服务,新增配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>ha.zookeeper.quorum<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:2181,slave1:2181,slave2:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-4-hdfs-site-xml配置-star"><a href="#3-3-4-hdfs-site-xml配置-star" class="headerlink" title="3.3.4 hdfs-site.xml配置:star:"></a>3.3.4 hdfs-site.xml配置:star:</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hadoop<span class="token punctuation">]</span><span class="token comment"># vim hdfs-site.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>添加以下内容：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- namenode是一个组，指定namenode的组名称，自己可以定义--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.nameservices<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 指定namenode组的成员--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.namenodes.mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>nn1,nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 角色1 的rpc 地址及端口号--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.mycluster.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 角色2 的rpc 地址及端口号--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.rpc-address.mycluster.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>slave1:9000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Namenode 1 的地址及端口号--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.mycluster.nn1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- Namenode 2 的地址及端口号--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address.mycluster.nn2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>slave1:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span> <span class="token comment">&lt;!--JournalNode 的地址及端口号--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.shared.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>qjournal://master:8485;slave1:8485;slave2:8485/mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- namenode守护进程管理的元数据文件fsimage存储的位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/dfs/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/dfs/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--JournalNode 的数据存放地址--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.journalnode.edits.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/hadoopdir/journal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Failover 类服务名--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.client.failover.proxy.provider.mycluster<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--远程管理方式，sshfence 使用 ssh 远程管理--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.methods<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>               <span class="token comment">&lt;!-- &lt;value>sshfence&lt;/value>--></span>               <span class="token comment">&lt;!--但如果只配置sshfence，如果在机器宕机后不可达，则sshfence会返回false，即fence失败，所以得要配置成--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>shell(true)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--ssh 私钥的位置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.fencing.ssh.private-key-files<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/root/.ssh/id_rsa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--配置自动故障切换，true【自动故障切换】，false【手动故障切换】--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.ha.automatic-failover.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--文件副本数量--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.replication<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-5-mapred-site-xml配置"><a href="#3-3-5-mapred-site-xml配置" class="headerlink" title="3.3.5 mapred-site.xml配置"></a>3.3.5 mapred-site.xml配置</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 指定mapreduce使用yarn资源管理器--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置作业历史服务器的地址--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 配置作业历史服务器的http地址--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.app.mapreduce.am.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.map.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.reduce.env<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-6-yarn-site-xml配置-star"><a href="#3-3-6-yarn-site-xml配置-star" class="headerlink" title="3.3.6 yarn-site.xml配置:star:"></a>3.3.6 yarn-site.xml配置:star:</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- NodeManager获取数据的方式shuffle --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--激活HA 配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 管理节点状态自动恢复 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.recovery.enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 定义数据状态保持介质 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.store.class<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--指定zookeeper的服务地址，为了防止单节点故障，指定三个节点--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.zk-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master:2181,slave1:2181,slave2:2181<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--集群 ID--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.cluster-id<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn-ha<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--定义两个 resourcemanager 角色--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.ha.rm-ids<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>rm1,rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>  <span class="token comment">&lt;!--角色1 对应主机地址--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname.rm1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>master<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!--角色2 对应主机地址--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname.rm2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>slave1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>         <span class="token comment">&lt;!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 (可选)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 设置聚合日志在hdfs上的保存时间（可选） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation.retain-seconds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>604800<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>配置完成之后分发到子节点,再进行服务启动准备:warning:</p></blockquote><h3 id="3-3-服务启动准备"><a href="#3-3-服务启动准备" class="headerlink" title="3.3 服务启动准备"></a>3.3 服务启动准备</h3><h4 id="3-3-1-启动journalnode服务"><a href="#3-3-1-启动journalnode服务" class="headerlink" title="3.3.1 启动journalnode服务"></a>3.3.1 启动journalnode服务</h4><blockquote><p><code>所有节点</code>启动journalnode</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop-daemon.sh start journalnode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-3-2-初始化namenode"><a href="#3-3-2-初始化namenode" class="headerlink" title="3.3.2 初始化namenode"></a>3.3.2 初始化namenode</h4><blockquote><p>master(<code>nn1</code>)节点初始化namenode</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hdfs namenode <span class="token parameter variable">-format</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201950935.png" alt="image-20240220195039832"></p><blockquote><p>同步元数据到<code>nn2</code>（slave1）</p></blockquote><p>:one: 方式1: 直接从主节点(<code>nn1</code>)发送到主节点(<code>nn2</code>)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> <span class="token parameter variable">-r</span> hadoopdir/dfs/ root@slave1:/root/hadoopdir<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201951392.png"></p><p>:two: 方式2:在主节点(<code>nn2</code>)使用指令同步</p><p>首先需要在主几点(<code>nn1</code>)启动namenode服务,否则在主节点(<code>nn2</code>)节点中同步元数据会失败,</p><p>提示找不到<code>master</code>的namenode服务,如下图:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062328858.png" alt="image-20241006232852729"></p><p>关键错误是<code>“Connection refused”</code>，这表明备用NameNode无法连接到活动NameNode（192.168.10.11:9000）。</p><p><strong>正确步骤如下:</strong></p><p>1.在master(nn1)启动namenode服务:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hdfs --daemon start namenode</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.在slave1(nn2)使用指令同步元数据</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@slave1 ~<span class="token punctuation">]</span><span class="token comment"># hdfs namenode -bootstrapStandby</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062326234.png" alt="image-20241006232636095"></p><p>同步需要进一步确定是否成功,可以直接查看<code>/root/hadoopdir</code>数据目录下是否成功同步过来,如下图:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062332270.png" alt="image-20241006233249156"></p><p>(方式2和方式1一样,所以我觉得直接使用scp更高效点ovO…)</p><h4 id="3-3-3-master节点初始化zk"><a href="#3-3-3-master节点初始化zk" class="headerlink" title="3.3.3 master节点初始化zk"></a>3.3.3 master节点初始化zk</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hdfs zkfc <span class="token parameter variable">-formatZK</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062356870.png" alt="image-20241006235656731"></p><h4 id="3-3-4-启动集群"><a href="#3-3-4-启动集群" class="headerlink" title="3.3.4 启动集群"></a>3.3.4 启动集群</h4><p>在主节点（master）执行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">start-all.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>所有节点启动(已启动则忽略):</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hadoop-daemon.sh start journalnode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动后的进程如下：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201954941.png" alt="image-20240220195417889"></p><h3 id="3-4-使用命令分别查看服务nn2与rm2进程状态"><a href="#3-4-使用命令分别查看服务nn2与rm2进程状态" class="headerlink" title="3.4 使用命令分别查看服务nn2与rm2进程状态"></a>3.4 使用命令分别查看服务nn2与rm2进程状态</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hdfs haadmin -getServiceState nn2</span>active<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141257798.png" alt="image-20240314125738637"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># yarn rmadmin -getServiceState rm2</span>active<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141259321.png" alt="image-20240314125900240"></p><p>全部服务状态：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># yarn rmadmin -getServiceState rm1</span>standby<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># yarn rmadmin -getServiceState rm2</span>active<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hdfs haadmin -getServiceState nn1</span>standby<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hdfs haadmin -getServiceState nn2</span>active<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141300299.png" alt="image-20240314130004169"></p><h3 id="3-5-测试HA"><a href="#3-5-测试HA" class="headerlink" title="3.5 测试HA"></a>3.5 测试HA</h3><p>单服务启动的方式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hdfs <span class="token parameter variable">--daemon</span> start namenode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>进入192.168.10.10:9870 &#x2F; master:9870  <code>主节点</code></p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201957420.png" alt="image-20240220195746352"></p><blockquote><p>进入192.168.10.20:9870 &#x2F; slave1:9870<code>备用节点</code></p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201959110.png" alt="image-20240220195931025"></p><blockquote><p>kill 掉master的namenode服务刷新slave1的web端查看</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202001326.png" alt="image-20240220200123248"></p><p>master的web端口：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202002860.png" alt="image-20240220200224797"></p><p>发现此时的master节点的namenode已经无法访问，这里手动启动namenode服务：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hdfs --daemon start namenode</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202004994.png" alt="image-20240220200436908"></p><p>Hadoop HA部署完成</p><h2 id="4-HDFS-操作指令"><a href="#4-HDFS-操作指令" class="headerlink" title="4. HDFS 操作指令"></a>4. HDFS 操作指令</h2><p>常用指令:</p><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>hdfs dfs -cat</td><td>用于查看分布式文件系统中指定文件里面的内容</td></tr><tr><td>hdfs dfs -chmod -R</td><td>对分布式文件系统中的文件进行授权</td></tr><tr><td>hdfs dfs -copyFromLocal -f -l -p</td><td>把本地的文件复制到 HDFS 路径中</td></tr><tr><td>hdfs dfs -copyToLocal -p -ignoreCrc</td><td>把分布式文件系统中的文件复制到本地路径中</td></tr><tr><td>hdfs dfs -put (-f -p -l)</td><td>用于来将本地的文件上传到HDFS分布式文件系统中</td></tr><tr><td>Hdfs dfs -find</td><td>作用是用于查询分布式文件系统中的文件</td></tr><tr><td>hdfs dfs -help</td><td>用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书</td></tr><tr><td>hdfs dfs -mv</td><td>将分布式文件系统中的文件进行移动</td></tr><tr><td>hdfs dfs -moveFromLocal</td><td>把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）</td></tr><tr><td>hdfs dfs -moveToLocal</td><td>把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地）</td></tr><tr><td>hdfs dfs -mkdir -p</td><td>用来创建HDFS分布式文件系统中的文件</td></tr><tr><td>hdfs dfs -rm -f -r</td><td>将分布式文件系统中的文件进行删除</td></tr><tr><td>hdfs dfs -rmdir</td><td>用来进行递归删除文件&#x2F;文件夹，文件夹中有文件也能删除</td></tr></tbody></table><p>全部指令:</p><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">1、hdfs dfs <span class="token operator">-</span><span class="token function">cat</span> ：用于查看分布式文件系统中指定文件里面的内容2、hdfs dfs <span class="token operator">-</span>checksum：用来查看指定文件的MD5值3、hdfs dfs <span class="token operator">-</span>chmod <span class="token operator">-</span>R：对分布式文件系统中的文件进行授权4、Hdfs dfs <span class="token operator">-</span>copyFromLocal <span class="token operator">-</span>f <span class="token operator">-</span>l <span class="token operator">-</span>p：把本地的文件复制到 HDFS 路径中5、Hdfs dfs <span class="token operator">-</span>copyToLocal <span class="token operator">-</span>p <span class="token operator">-</span>ignoreCrc ：把分布式文件系统中的文件复制到本地路径中6、Hdfs dfs <span class="token operator">-</span>count <span class="token operator">-</span>q <span class="token operator">-</span>h：用来进行统计计数操作7、dfs dfs <span class="token operator">-</span>count <span class="token operator">-</span>q <span class="token operator">-</span>h：用来进行统计计数操作8、Hdfs dfs <span class="token operator">-</span><span class="token function">cp</span> <span class="token operator">-</span>f <span class="token operator">-</span>p：该命令的作用相当于我们windwos下的复制命令，作用是从 HDFS 的一个路径复制（拷贝）到 HDFS 的另一个路径9、Hdfs dfs <span class="token operator">-</span>createSnapshot ：用来创建分布式文件系统的快照10、Hdfs dfs <span class="token operator">-</span>deleteSnapshot：作用是用于删除分布式文件系统的快照11、Hdfs dfs <span class="token operator">-</span>df <span class="token operator">-</span>h：用于查看分布式文件系统硬盘的使用情况12、Hdfs dfs <span class="token operator">-</span>du <span class="token operator">-</span>s <span class="token operator">-</span>h：用来查看分布式文件系统中指定文件的大小13、Hdfs dfs <span class="token operator">-</span>expunge：用来对分布式文件系统中垃圾箱进行清空操作14、Hdfs dfs <span class="token operator">-</span>find：作用是用于查询分布式文件系统中的文件15、Hdfs dfs <span class="token operator">-</span>get <span class="token operator">-</span>p <span class="token operator">-</span>crc <span class="token operator">-</span>ignoreCrc：作用是将分布式文件系统中的文件传输到本地机器上，相当于下载16、hdfs dfs <span class="token operator">-</span>getfacl <span class="token operator">-</span>R：获取对象或目录的 ACL（访问控制列表）17、hdfs dfs <span class="token operator">-</span>getfatter <span class="token operator">-</span>R：获取对象或目录的扩展属性18、hdfs dfs <span class="token operator">-</span>getmerge <span class="token operator">-</span>nl：获取对象属性19、hdfs dfs <span class="token operator">-</span>help：用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书20、hdfs dfs <span class="token operator">-</span><span class="token function">ls</span> <span class="token operator">-</span>d <span class="token operator">-</span>h <span class="token operator">-</span>R ：该命令的作用是列出分布式文件系统中指定路径下的文件列表21、hdfs dfs <span class="token operator">-</span>mkdir <span class="token operator">-</span>p：用来创建HDFS分布式文件系统中的文件22、hdfs dfs <span class="token operator">-</span>moveFromLocal：把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）23、hdfs dfs <span class="token operator">-</span>moveToLocal：把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地）24、hdfs dfs <span class="token operator">-</span><span class="token function">mv</span>：将分布式文件系统中的文件进行移动25、hdfs dfs <span class="token operator">-</span>put <span class="token punctuation">(</span><span class="token operator">-</span>f <span class="token operator">-</span>p <span class="token operator">-</span>l<span class="token punctuation">)</span>：用于来将本地的文件上传到HDFS分布式文件系统中26、hdfs dfs <span class="token operator">-</span>renameSnapshot：用于对分布式文件系统中的快照进行更名27、hdfs dfs <span class="token operator">-</span><span class="token function">rm</span> <span class="token operator">-</span>f <span class="token operator">-</span>r：将分布式文件系统中的文件进行删除28、hdfs dfs <span class="token operator">-</span><span class="token function">rmdir</span> ：用来进行递归删除文件<span class="token operator">/</span>文件夹，文件夹中有文件也能删除29、hdfs dfs <span class="token operator">-</span>setfacl <span class="token operator">-</span>R：设置对象或目录的 ACL（访问控制列表）30、hdfs dfs <span class="token operator">-</span>setfattr <span class="token operator">-</span>n：设置对象或目录的扩展属性31、hdfs dfs <span class="token operator">-</span>setrep <span class="token operator">-</span>R：用来设置 HDFS 中文件的副本数量32、hdfs dfs <span class="token operator">-</span>stat：根据格式显示指定对象的信息33、hdfs dfs <span class="token operator">-</span>tail <span class="token operator">-</span>f：作用是显示指定文件的末尾34、hdfs dfs <span class="token operator">-</span>test：用来判断指定文件的类型35、hdfs dfs <span class="token operator">-</span>text：作用是以字符形式打印一个文件的内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据运维系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bigdata </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL数据备份</title>
      <link href="/2024/11/10/mysql-shu-ju-bei-fen/"/>
      <url>/2024/11/10/mysql-shu-ju-bei-fen/</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL-备份实战"><a href="#MYSQL-备份实战" class="headerlink" title="MYSQL 备份实战"></a>MYSQL 备份实战</h1><h2 id="1-备份需求："><a href="#1-备份需求：" class="headerlink" title="1. 备份需求："></a>1. 备份需求：</h2><ol><li><strong>每日凌晨2时对数据做有一次全备，包含binlog,需要对备份文件远程存放。</strong></li><li><strong>备份备份历史文件本地保留7日，远程目录保留3个月。</strong></li></ol><h2 id="2-实现步骤："><a href="#2-实现步骤：" class="headerlink" title="2. 实现步骤："></a>2. 实现步骤：</h2><p>:one: 全库备份脚本<br>:two: binlog 备份脚本<br>:three: 压缩和同步脚本<br>:four: 配置定时任务</p><p>示例脚本如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 定义变量</span><span class="token assign-left variable">BACKUP_DIR</span><span class="token operator">=</span><span class="token string">"/path/to/backup"</span>               <span class="token comment"># 本地备份目录</span><span class="token assign-left variable">BINLOG_DIR</span><span class="token operator">=</span><span class="token string">"/path/to/binlog_backup"</span>        <span class="token comment"># 本地 binlog 备份目录</span><span class="token assign-left variable">REMOTE_SERVER</span><span class="token operator">=</span><span class="token string">"user@remote_server:/remote/backup/directory"</span>  <span class="token comment"># 远程备份服务器及目录（建议提前配置好ssh互信）</span><span class="token assign-left variable">MYSQL_USER</span><span class="token operator">=</span><span class="token string">"your_mysql_user"</span>               <span class="token comment"># MySQL 用户名</span><span class="token assign-left variable">MYSQL_PASSWORD</span><span class="token operator">=</span><span class="token string">"your_mysql_password"</span>       <span class="token comment"># MySQL 用户密码</span><span class="token assign-left variable">MYSQL_HOST</span><span class="token operator">=</span><span class="token string">"localhost"</span>                     <span class="token comment"># MySQL 主机地址</span><span class="token assign-left variable">MYSQL_PORT</span><span class="token operator">=</span><span class="token string">"3306"</span>                          <span class="token comment"># MySQL 端口号</span><span class="token assign-left variable">DATE</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">date</span> +<span class="token string">"%Y%m%d%H%M"</span><span class="token variable">)</span></span>                 <span class="token comment"># 当前日期时间，用于创建唯一的备份目录</span><span class="token comment"># 创建备份目录</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$BACKUP_DIR</span>/<span class="token variable">$DATE</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$BINLOG_DIR</span>/<span class="token variable">$DATE</span><span class="token comment"># 全备份</span><span class="token builtin class-name">echo</span> <span class="token string">"Starting full backup..."</span>mysqldump <span class="token parameter variable">-u</span> <span class="token variable">$MYSQL_USER</span> -p<span class="token variable">$MYSQL_PASSWORD</span> <span class="token parameter variable">-h</span> <span class="token variable">$MYSQL_HOST</span> <span class="token parameter variable">-P</span> <span class="token variable">$MYSQL_PORT</span> --all-databases <span class="token operator">></span> <span class="token variable">$BACKUP_DIR</span>/<span class="token variable">$DATE</span>/full_backup.sql<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Full backup successful!"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Full backup failed!"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token comment"># binlog 备份</span><span class="token builtin class-name">echo</span> <span class="token string">"Starting binlog backup..."</span>mysqladmin <span class="token parameter variable">-u</span> <span class="token variable">$MYSQL_USER</span> -p<span class="token variable">$MYSQL_PASSWORD</span> flush-logs<span class="token function">cp</span> /data/mysql/binlog/mysql-bin.* <span class="token variable">$BINLOG_DIR</span>/<span class="token variable">$DATE</span>     <span class="token comment">#找到binlog文件位置</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Binlog backup successful!"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Binlog backup failed!"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token comment"># 压缩备份文件</span><span class="token builtin class-name">echo</span> <span class="token string">"Compressing backup files..."</span><span class="token function">tar</span> <span class="token parameter variable">-czf</span> <span class="token variable">$BACKUP_DIR</span>/<span class="token variable">$DATE</span>/full_backup.tar.gz <span class="token parameter variable">-C</span> <span class="token variable">$BACKUP_DIR</span>/<span class="token variable">$DATE</span> full_backup.sql<span class="token function">tar</span> <span class="token parameter variable">-czf</span> <span class="token variable">$BINLOG_DIR</span>/<span class="token variable">$DATE</span>/binlog_backup.tar.gz <span class="token parameter variable">-C</span> <span class="token variable">$BINLOG_DIR</span>/<span class="token variable">$DATE</span> <span class="token builtin class-name">.</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Compression successful!"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Compression failed!"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token comment"># 同步到远程服务器</span><span class="token builtin class-name">echo</span> <span class="token string">"Syncing backups to remote server..."</span><span class="token function">rsync</span> <span class="token parameter variable">-avz</span> <span class="token variable">$BACKUP_DIR</span>/<span class="token variable">$DATE</span>/full_backup.tar.gz <span class="token variable">$REMOTE_SERVER</span><span class="token function">rsync</span> <span class="token parameter variable">-avz</span> <span class="token variable">$BINLOG_DIR</span>/<span class="token variable">$DATE</span>/binlog_backup.tar.gz <span class="token variable">$REMOTE_SERVER</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-eq</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Backup sync successful!"</span><span class="token keyword">else</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Backup sync failed!"</span>  <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token comment"># 清理本地 7 天前的备份</span><span class="token builtin class-name">echo</span> <span class="token string">"Cleaning up local backups older than 7 days..."</span><span class="token function">find</span> <span class="token variable">$BACKUP_DIR</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-mtime</span> +7 <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token function">find</span> <span class="token variable">$BINLOG_DIR</span> <span class="token parameter variable">-type</span> d <span class="token parameter variable">-mtime</span> +7 <span class="token parameter variable">-exec</span> <span class="token function">rm</span> <span class="token parameter variable">-rf</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token punctuation">;</span><span class="token comment"># 清理远程 3 个月前的备份</span><span class="token builtin class-name">echo</span> <span class="token string">"Cleaning up remote backups older than 3 months..."</span><span class="token function">ssh</span> user@remote_server <span class="token string">"find /remote/backup/directory -type f -mtime +90 -exec rm -f &#123;&#125; \;"</span><span class="token builtin class-name">echo</span> <span class="token string">"All backup tasks completed successfully!"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用说明</p></blockquote><ol><li><p><strong>变量定义</strong>：</p></li><li><ul><li><code>BACKUP_DIR</code>：定义本地全备份的存储目录。</li><li><code>BINLOG_DIR</code>：定义本地 binlog 备份的存储目录。</li><li><code>REMOTE_SERVER</code>：定义远程服务器的用户名、地址和备份目录。</li><li><code>MYSQL_USER</code>：定义 MySQL 用户名。</li><li><code>MYSQL_PASSWORD</code>：定义 MySQL 用户密码。</li><li><code>MYSQL_HOST</code>：定义 MySQL 主机地址。</li><li><code>MYSQL_PORT</code>：定义 MySQL 端口号。</li><li><code>DATE</code>：获取当前日期时间，用于创建唯一的备份目录。</li></ul></li><li><p><strong>备份操作</strong>：</p></li><li><ul><li><strong>创建备份目录</strong>：使用 <code>mkdir</code> 命令创建用于存储全备份和 binlog 备份的目录。</li><li><strong>全备份</strong>：使用 <code>mysqldump</code> 命令进行全备份，并将结果保存到备份目录。</li><li><strong>binlog 备份</strong>：使用 <code>mysqladmin flush-logs</code> 刷新 binlog，然后使用 <code>cp</code> 命令将 binlog 文件拷贝到备份目录。</li><li><strong>压缩备份文件</strong>：使用 <code>tar</code> 命令压缩全备份和 binlog 备份文件。</li><li><strong>同步到远程服务器</strong>：使用 <code>rsync</code> 命令将压缩的备份文件同步到远程服务器。</li></ul></li><li><p><strong>清理旧备份</strong>：</p></li><li><ul><li><strong>清理本地备份</strong>：使用 <code>find</code> 命令删除本地 7 天前的备份。</li><li><strong>清理远程备份</strong>：使用 <code>ssh</code> 和 <code>find</code> 命令删除远程 3 个月前的备份。</li></ul></li></ol><h2 id="3-配置定时任务"><a href="#3-配置定时任务" class="headerlink" title="3. 配置定时任务"></a>3. 配置定时任务</h2><p>使用 <code>cron</code> 配置定时任务，确保脚本在指定时间运行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编辑 cron 任务</span><span class="token function">crontab</span> <span class="token parameter variable">-e</span><span class="token comment"># 添加以下内容，每天两点进行备份</span><span class="token number">0</span> <span class="token number">2</span> * * * /path/to/backup_script.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存并退出后，<code>cron</code> 会在每天凌晨两点自动执行备份脚本。根据实际情况调整脚本中的路径和变量。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据运维系列 </category>
          
          <category> 数据库系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive之Hiveserver2 metastore环境部署</title>
      <link href="/2024/11/09/hive-zhi-hiveserver2-metastore-huan-jing-bu-shu/"/>
      <url>/2024/11/09/hive-zhi-hiveserver2-metastore-huan-jing-bu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h1><h2 id="1-Hive入门"><a href="#1-Hive入门" class="headerlink" title="1. Hive入门"></a>1. Hive入门</h2><h3 id="1-1-什么是Hive"><a href="#1-1-什么是Hive" class="headerlink" title="1.1 什么是Hive"></a>1.1 什么是Hive</h3><p>Hive：由Facebook开源用于解决海量结构化日志的数据统计。</p><p>Hive是基于Hadoop的一个<code>数据仓库工具</code>，可以将<code>结构化的数据文件映射为一张表</code>，并提供<code>类SQL</code>查询功能。</p><p><code>本质是：将HQL转化成MapReduce程序</code></p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511957.png" alt="image-20200916135459253"><p>1）Hive处理的数据存储在HDFS</p><p>2）Hive分析数据底层的实现是MapReduce</p><p>3）执行程序运行在Yarn上</p><h3 id="1-2-Hive的优缺点"><a href="#1-2-Hive的优缺点" class="headerlink" title="1.2 Hive的优缺点"></a>1.2 Hive的优缺点</h3><h4 id="1-2-1-优点"><a href="#1-2-1-优点" class="headerlink" title="1.2.1 优点"></a>1.2.1 优点</h4><ol><li>操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。 </li><li>避免了去写MapReduce，减少开发人员的学习成本。 </li><li>Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。 </li><li>Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。</li><li>Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</li></ol><h4 id="1-2-2-缺点"><a href="#1-2-2-缺点" class="headerlink" title="1.2.2 缺点"></a>1.2.2 缺点</h4><p>1．Hive的HQL表达能力有限</p><p>（1）迭代式算法无法表达</p><p>（2）数据挖掘方面不擅长</p><p>2．Hive的效率比较低</p><p>（1）Hive自动生成的MapReduce作业，通常情况下不够智能化</p><p>（2）Hive调优比较困难，粒度较粗</p><h3 id="1-3Hive架构原理"><a href="#1-3Hive架构原理" class="headerlink" title="1.3Hive架构原理"></a>1.3Hive架构原理</h3><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511001.png" alt="img"><p><strong>1．用户接口：Client</strong></p><p>CLI（hive shell）、JDBC&#x2F;ODBC(java访问hive)、WEBUI（浏览器访问hive）</p><p><strong>2．元数据：Metastore</strong></p><p>元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列&#x2F;分区字段、表的类型（是否是外部表）、表的数据所在目录等；</p><p><code>默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore</code></p><p><strong>3．Hadoop</strong></p><p>使用HDFS进行存储，使用MapReduce进行计算。</p><p><strong>4．驱动器：Driver</strong></p><p>（1）解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。</p><p>（2）编译器（Physical Plan）：将AST编译生成逻辑执行计划。</p><p>（3）优化器（Query Optimizer）：对逻辑执行计划进行优化。</p><p>（4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR&#x2F;Spark。</p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511219.png" alt="image-20200916140721644"><p>Hive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。</p><h2 id="2-Hive组件快速安装配置"><a href="#2-Hive组件快速安装配置" class="headerlink" title="2. Hive组件快速安装配置"></a>2. Hive组件快速安装配置</h2><p><strong>实验环境</strong>:</p><table><thead><tr><th>容器系统</th><th>容器主机名</th><th>容器ip</th><th>容器用户名</th></tr></thead><tbody><tr><td>centos7</td><td>master</td><td>192.168.1.10</td><td>root</td></tr><tr><td>centos7</td><td>slave1</td><td>192.168.1.20</td><td>root</td></tr><tr><td>centos7</td><td>slave2</td><td>192.168.1.30</td><td>root</td></tr></tbody></table><p><strong>组件版本</strong></p><table><thead><tr><th>组件</th><th>版本</th></tr></thead><tbody><tr><td>java</td><td>1.8</td></tr><tr><td>Hadoop</td><td>3.1.3</td></tr><tr><td>Hive</td><td>3.1.2</td></tr><tr><td>Mysql</td><td>5.7</td></tr></tbody></table><p><strong>数据库信息</strong></p><table><thead><tr><th>数据库</th><th>用户名</th><th>密码</th></tr></thead><tbody><tr><td>mysql</td><td>root</td><td>123456</td></tr></tbody></table><h3 id="2-1-mysql部署"><a href="#2-1-mysql部署" class="headerlink" title="2.1 mysql部署"></a>2.1 mysql部署</h3><h4 id="2-1-1-rpm方式部署"><a href="#2-1-1-rpm方式部署" class="headerlink" title="2.1.1 rpm方式部署"></a>2.1.1 rpm方式部署</h4><blockquote><p> (1) 进入mysql资源文件夹，加载所有安装包：</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071524098.png" alt="image-20240107152437021"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span> *.rpm <span class="token parameter variable">--nodeps</span> <span class="token parameter variable">--force</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071525227.png" alt="image-20240107152542173"></p><blockquote><p>(2) 查看安装情况：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> -qa<span class="token operator">|</span><span class="token function">grep</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果:<img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071526546.png" alt="image-20240107152611487"></p><blockquote><p>(3) 数据库初始化：</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysqld <span class="token comment">--initialize --user=mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>(4) 查看临时产生的root用户密码：</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">grep</span> <span class="token string">'temporary password'</span> /var/log/mysqld.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071527022.png" alt="image-20240107152701968"></p><blockquote><p>(5) 启动Mysql服务，然后登陆数据库，输入临时密码</p></blockquote><p>启动:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master mysql<span class="token punctuation">]</span><span class="token comment"># systemctl start mysqld</span><span class="token punctuation">[</span>root@master mysql<span class="token punctuation">]</span><span class="token comment"># systemctl status mysqld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071528386.png" alt="image-20240107152816325"></p><p>登录数据库:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master mysql<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p'zDfW:um0hgdi'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071530387.png" alt="image-20240107153027330"></p><blockquote><p>(6) 修改root用户密码</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">set</span> password <span class="token operator">=</span><span class="token string">"123456"</span><span class="token punctuation">;</span>Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>(7) 修改MySQL库下的user表中的root用户允许任意ip连接：</p></blockquote><p><strong>方法1:</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>  <span class="token comment">#刷新MySQL的系统权限相关表，否则会拒绝访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>方法2:</strong></p><p>查看 MySQL 数据库中存在的用户及其允许连接的主机:</p><p>&#x3D;&#x3D;(修改后一定要刷新权限表)&#x3D;&#x3D;</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#可以看出root用户只允许本地连接</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> <span class="token keyword">user</span>          <span class="token operator">|</span> host      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span><span class="token keyword">session</span> <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>sys     <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> root          <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改root用户允许任意ip连接:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">UPDATE</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span> <span class="token keyword">SET</span> host <span class="token operator">=</span> <span class="token string">'%'</span> <span class="token keyword">WHERE</span> <span class="token keyword">user</span> <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次查看用户信息:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> mysql<span class="token punctuation">.</span><span class="token keyword">user</span><span class="token punctuation">;</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> <span class="token keyword">user</span>          <span class="token operator">|</span> host      <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token operator">|</span> root          <span class="token operator">|</span> <span class="token operator">%</span>         <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span><span class="token keyword">session</span> <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">|</span> mysql<span class="token punctuation">.</span>sys     <span class="token operator">|</span> localhost <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">---------------+-----------+</span><span class="token number">3</span> <span class="token keyword">rows</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改成功</p><p><strong>测试远程连接:</strong></p><p>(如果是docker部署,记得开放端口)</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071600539.png" alt="image-20240107160016412"></p><blockquote><p>:warning::warning::warning:可能会遇到的问题:</p></blockquote><p><code>问题1</code>：在配置Mysql时候，需要授权出现密码不满足当前政策要求（密码安全等级）</p><p>首先查看一下密码安全设置：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">'validate_password%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果不是最低权限，设置为最低权限：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_policy<span class="token operator">=</span>LOW<span class="token punctuation">;</span>  \\等级<span class="token keyword">set</span> <span class="token keyword">global</span> validate_password_length<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>   \\长度mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>  <span class="token comment">#刷新MySQL的系统权限相关表，否则会拒绝访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重新授权：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">mysql<span class="token operator">></span> <span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span>  <span class="token comment">#刷新MySQL的系统权限相关表，否则会拒绝访问</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>问题2</code>: mysql安装失败：</p><p>卸载MySQL：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum remove mysql* <span class="token parameter variable">-y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除MySQL的安装残留文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"mysql*"</span>  <span class="token comment">#查询所有mysql的文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-name</span> <span class="token string">"*mysql*"</span><span class="token operator">|</span><span class="token function">xargs</span> <span class="token function">rm</span> <span class="token parameter variable">-rfv</span>  <span class="token comment">#删除所有查询到的mysql目录，安装包也会被删除</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>清理后重新安装</p><p><strong>rpm 常用命令：</strong></p><p>1.安装一个包 （展示正在安装的文件信息以及安装进度）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-ivh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.升级一个包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-Uvh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.卸载一个包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rpm</span> <span class="token parameter variable">-e</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.安装参数 –force &#x2F; -–nodeps</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-–force 即使覆盖属于其它包的文件也强迫安装-–nodeps 如果该RPM包的安装依赖其它包，即使其它包没装，也强迫安装（不检查依赖直接安装）。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-1-2-Docker-一键部署MySQL"><a href="#2-1-2-Docker-一键部署MySQL" class="headerlink" title="2.1.2 Docker 一键部署MySQL"></a>2.1.2 Docker 一键部署MySQL</h4><blockquote><p>(1) 拉取MySQL镜像</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bigdata ~<span class="token punctuation">]</span><span class="token comment"># docker pull mysql/mysql-server:5.7</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>(2) 启动MySQL</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_PASSWORD</span><span class="token operator">=</span><span class="token number">123456</span> <span class="token parameter variable">-e</span> <span class="token assign-left variable">MYSQL_ROOT_HOST</span><span class="token operator">=</span>% <span class="token parameter variable">-p</span> <span class="token number">3306</span>:3306 <span class="token parameter variable">--name</span><span class="token operator">=</span>mysql1 <span class="token parameter variable">-d</span> mysql/mysql-server:5.7 --character-set-server<span class="token operator">=</span>utf8mb4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>参数详解:</p><ul><li><code>docker run</code>: Docker 命令，用于运行一个新的容器。</li><li><code>-e MYSQL_ROOT_PASSWORD=123456</code>: 设置 MySQL 根用户的密码为 <code>123456</code>。这是通过环境变量设置的。</li><li><code>-e MYSQL_ROOT_HOST=%</code>: 允许 MySQL 根用户从任何主机连接。这是通过环境变量设置的，<code>%</code> 表示通配符，表示所有主机。</li><li><code>-p 3306:3306</code>: 将容器内的 MySQL 端口 <code>3306</code> 映射到宿主机的端口 <code>3307</code>。这是用于让外部应用程序能够连接到 MySQL 服务器。</li><li><code>--name=mysql1</code>: 为容器命名为 <code>mysql1</code>。</li><li><code>-d</code>: 让容器在后台运行（detach 模式）。</li><li><code>mysql/mysql-server:5.7</code>: 使用的 MySQL Docker 镜像及其版本。</li><li><code>--character-set-server=utf8mb4</code>: 设置 MySQL 服务器的字符集为 <code>utf8mb4</code>。</li></ul><p><strong>测试:</strong></p><p>安装mariadb客户端:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bigdata ~<span class="token punctuation">]</span><span class="token comment"># yum install mariadb -y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用测试:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@bigdata ~<span class="token punctuation">]</span><span class="token comment"># mysql -uroot -p123456 -h 192.168.10.81 -P 3308 -e "show databases;"</span>+--------------------+<span class="token operator">|</span> Database           <span class="token operator">|</span>+--------------------+<span class="token operator">|</span> information_schema <span class="token operator">|</span><span class="token operator">|</span> mysql              <span class="token operator">|</span><span class="token operator">|</span> performance_schema <span class="token operator">|</span><span class="token operator">|</span> sys                <span class="token operator">|</span>+--------------------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MySQL部署完成</p><h3 id="2-2-Hive部署"><a href="#2-2-Hive部署" class="headerlink" title="2.2 Hive部署"></a>2.2 Hive部署</h3><h4 id="2-2-1-解压并重命名"><a href="#2-2-1-解压并重命名" class="headerlink" title="2.2.1 解压并重命名"></a>2.2.1 解压并重命名</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># tar -zxvf /opt/software/apache-hive-3.1.2-bin.tar.gz -C /opt/module/</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># mv /opt/module/apache-hive-3.1.2-bin/ /opt/module/hive</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-2-2-添加环境变量"><a href="#2-2-2-添加环境变量" class="headerlink" title="2.2.2 添加环境变量"></a>2.2.2 添加环境变量</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#HIVE_HOME</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_HOME</span><span class="token operator">=</span>/opt/module/hive<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$HIVE_HOME</span>/bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#命令行写入环境变量</span><span class="token function">cat</span> <span class="token operator">>></span>/etc/profile<span class="token operator">&lt;&lt;</span><span class="token string">EOF#HIVEexport HIVE_HOME=/opt/module/hiveexport PATH=\<span class="token environment constant">$PATH</span>:\<span class="token variable">$HIVE_HOME</span>/binEOF</span><span class="token comment">#重新载入环境变量</span><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-添加MySQL驱动"><a href="#2-2-3-添加MySQL驱动" class="headerlink" title="2.2.3 添加MySQL驱动"></a>2.2.3 添加MySQL驱动</h4><p>将MySQL的JDBC驱动拷贝到Hive的lib目录下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cp /opt/software/mysql/mysql-connector-java-5.1.44-bin.jar $HIVE_HOME/lib</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看是否拷贝成功:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># ll $HIVE_HOME/lib | grep mysql</span>-rw-r--r-- <span class="token number">1</span> root root   <span class="token number">999635</span> Jan  <span class="token number">7</span> 09:19 mysql-connector-java-5.1.44-bin.jar-rw-r--r-- <span class="token number">1</span> root root    <span class="token number">10476</span> Nov <span class="token number">15</span>  <span class="token number">2018</span> mysql-metadata-storage-0.12.0.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071721497.png" alt="image-20240107172131324"></p><p>在HDFS中的user新建hive目录（<code>Hive的数据表实际存储在hadoop中</code>，所以需要先在hdfs中配置数据目录）：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">创建目录:<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hdfs dfs -mkdir -p /user/hive/warehouse </span>查看是否创建成功:<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hdfs dfs -ls /user/hive </span>Found <span class="token number">1</span> itemsdrwxr-xr-x   - root supergroup          <span class="token number">0</span> <span class="token number">2024</span>-01-07 09:23 /user/hive/warehouse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071724272.png" alt="image-20240107172405192"></p><h4 id="2-2-4-解决guava版本问题-高版本替换低版本"><a href="#2-2-4-解决guava版本问题-高版本替换低版本" class="headerlink" title="2.2.4 解决guava版本问题(高版本替换低版本)"></a>2.2.4 解决guava版本问题(高版本替换低版本)</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.删除旧的guava-19.0.jar,将hadoop中的guava-27.0-jre.jar拷贝过来<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># rm -rf $HIVE_HOME/lib/guava-19.0.jar</span><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cp $HADOOP_HOME/share/hadoop/common/lib/guava-27.0-jre.jar $HIVE_HOME/lib</span><span class="token number">2</span>.查看是否拷贝成功<span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># ll $HIVE_HOME/lib/guava-27.0-jre.jar </span>-rw-r--r-- <span class="token number">1</span> root root <span class="token number">2747878</span> Jan  <span class="token number">7</span> 09:27 /opt/module/hive/lib/guava-27.0-jre.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-5-配置hive-site-xml配置文件"><a href="#2-2-5-配置hive-site-xml配置文件" class="headerlink" title="2.2.5 配置hive-site.xml配置文件"></a>2.2.5 配置<code>hive-site.xml</code>配置文件</h4><blockquote><p>方式1:直接修改官方模板</p><p>&#x3D;&#x3D;测试环境部署(方便测试)&#x3D;&#x3D;</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># cd $HIVE_HOME/conf</span><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># cp hive-default.xml.template hive-site.xml</span><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># vi hive-site.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>需要修改的配置位置如下:</strong></p><!-- jdbc 连接的 password --> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">568     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>569     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071742987.png" alt="image-20240107174234563"></p><!-- jdbc 连接的 URL --><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">583<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>584<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>连接参数:jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false&amp;amp转义字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071759521.png" alt="image-20240107175939389"></p><p>参数解释:</p><ul><li><code>jdbc:mysql://</code>: 指定 JDBC 驱动程序类型，这里是 MySQL 的 JDBC 驱动。</li><li><code>192.168.1.10</code>: 数据库服务器的 IP 地址或主机名。</li><li><code>3306</code>: MySQL 服务器的端口号，默认是 <code>3306</code>。</li><li><code>metastore</code>: 数据库的名称（也称为数据库实例）。</li><li><code>?createDatabaseIfNotExist=true</code>: 如果数据库不存在，则创建数据库。这是一个额外的参数，用于在连接时创建数据库。</li><li><code>&amp;amp</code>: 这是 HTML 实体编码中的 <code>&amp;</code> 符号，用于分隔不同的连接参数。</li><li><code>useSSL=false</code>: 禁用 SSL 连接，可以提高连接性能。</li></ul><p>综合起来，这个连接字符串表示你要连接到位于 <code>192.168.1.10</code> 主机上，端口为 <code>3306</code> 的 MySQL 数据库，数据库名称为 <code>metastore</code>。如果数据库不存在，它将尝试创建一个新的数据库。同时，它禁用了 SSL 连接。</p><!-- jdbc 连接的 Driver 驱动--><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1101<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>1102<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071800309.png" alt="image-20240107180037239"></p><!-- jdbc 连接的 username(用户)--> <pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">1126<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>1127<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071802628.png" alt="image-20240107180202550"></p><p>修改数据路径,在配置文件中修改所有的数据路径    4404</p><p>所有${system:java.io.tmpdir}&#x2F;${system:user.name}</p><p>改成&#x2F;home&#x2F;hive&#x2F;tmp&#x2F;root</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shift+:进入末行模式<span class="token builtin class-name">:</span> %s@<span class="token variable">$&#123;system<span class="token operator">:</span>user.name&#125;</span>@root@g<span class="token builtin class-name">:</span> %s@<span class="token variable">$&#123;system<span class="token operator">:</span>java.io.tmpdir&#125;</span>@/home/hive/tmp@g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>删掉非法字符：&amp;#8   3215行</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071807782.png" alt="image-20240107180735702"></p><p>完成！</p><blockquote><p>方式2:手动编写配置</p><p>&#x3D;&#x3D;生产环境推荐(文档下面的新增配置都是以此配置为基础)&#x3D;&#x3D;</p></blockquote><p>配置如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> <span class="token variable">$HIVE_HOME</span>/conf/hive-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--连接数据库URL--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--连接数据驱动--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--数据库连接用户名 jdbc 连接的 username--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--数据库连接密码 jdbc 连接的 password--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- Hive 元数据存储版本的验证 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.schema.verification<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 元数据存储授权 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.event.db.notification.api.auth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--本机表的默认位置的URI Hive 默认在 HDFS 的工作目录--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.warehouse.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/user/hive/warehouse<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-6-编辑hive-env-sh配置文件"><a href="#2-2-6-编辑hive-env-sh配置文件" class="headerlink" title="2.2.6 编辑hive-env.sh配置文件"></a>2.2.6 编辑hive-env.sh配置文件</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># cp hive-env.sh.template hive-env.sh</span><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># vi hive-env.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加以下配置(告诉hive Hadoop在哪里):</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/opt/module/hadoop<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-7-初始化HIVE元数据库"><a href="#2-2-7-初始化HIVE元数据库" class="headerlink" title="2.2.7 初始化HIVE元数据库"></a>2.2.7 初始化HIVE元数据库</h4><p>将hive写入mysql</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master hive<span class="token punctuation">]</span><span class="token comment"># schematool -dbType mysql -initSchema </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下为成功:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812254.png" alt="image-20240107181236159"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812841.png" alt="image-20240107181250765"></p><p>竞赛使用:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">schematool <span class="token parameter variable">-dbType</span> mysql <span class="token parameter variable">-initSchema</span> <span class="token operator">></span> hive.log<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-2-8-查询数据库"><a href="#2-2-8-查询数据库" class="headerlink" title="2.2.8 查询数据库"></a>2.2.8 查询数据库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># hive -e "show databases;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071814990.png" alt="image-20240107181433907"></p><blockquote><p>发现hive shell中有许多日志信息的解决办法（hive-3.1.2）</p></blockquote><p>解决：</p><p>需要在hive的安装目录下：<code>/opt/module/hive/conf/</code> 创建<code>log4j.properties</code>日志的配置文件，然后写入以下信息就可以了：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">方式1:<span class="token function">vi</span> /opt/module/hive/conf/log4j.properties方式2:<span class="token function">vi</span> <span class="token variable">$HIVE_HOME</span>/conf/log4j.properties<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加以下内容:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">log4j.rootLogger</span><span class="token operator">=</span>WARN, CA<span class="token assign-left variable">log4j.appender.CA</span><span class="token operator">=</span>org.apache.log4j.ConsoleAppender<span class="token assign-left variable">log4j.appender.CA.layout</span><span class="token operator">=</span>org.apache.log4j.PatternLayout<span class="token assign-left variable">log4j.appender.CA.layout.ConversionPattern</span><span class="token operator">=</span>%-4r <span class="token punctuation">[</span>%t<span class="token punctuation">]</span> %-5p %c %x - %m%n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>添加好后保存退出，重启hive即可解决</p><p><strong>重新查询数据库:</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hive -e "show databases;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071819758.png" alt="image-20240107181919652"></p><h3 id="2-3-Hive-生产环境部署"><a href="#2-3-Hive-生产环境部署" class="headerlink" title="2.3 Hive 生产环境部署"></a>2.3 Hive 生产环境部署</h3><h4 id="2-3-1-Hiveserver2-服务"><a href="#2-3-1-Hiveserver2-服务" class="headerlink" title="2.3.1 Hiveserver2 服务"></a>2.3.1 Hiveserver2 服务</h4><p>​Hive的hiveserver2服务的作用是提供jdbc&#x2F;odbc接口，为用户提供远程访问Hive数据的功能，例如用户期望在个人电脑中访问远程服务中的Hive数据，就需要用到Hiveserver2。</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131536469.png" alt="image-20240113153640372"></p><blockquote><p>(1)用户说明</p></blockquote><p>​在远程访问Hive数据时，客户端并未直接访问Hadoop集群，而是由Hivesever2代理访问。由于Hadoop集群中的数据具备访问权限控制，所以此时需考虑一个问题：那就是访问Hadoop集群的用户身份是谁？是Hiveserver2的启动用户？还是客户端的登录用户？</p><p>​答案是都有可能，具体是谁，由Hiveserver2的hive.server2.enable.doAs参数决定，该参数的含义是是否启用Hiveserver2用户模拟的功能。若启用，则Hiveserver2会模拟成客户端的登录用户去访问Hadoop集群的数据，不启用，则Hivesever2会直接使用启动用户访问Hadoop集群数据。模拟用户的功能，默认是开启的。</p><p>具体逻辑如下：</p><p>:one: 未开启用户模拟功能：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131543845.png" alt="image-20240113154316776"></p><p>:two:开启用户模拟功能：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131544123.png" alt="image-20240113154438046"></p><p><strong>生产环境，<code>推荐开启用户模拟功能</code>，因为开启后才能保证各用户之间的权限隔离</strong>。</p><blockquote><p>(2) Hiveserver2部署</p></blockquote><p>:one:Hadoop端配置</p><p>​hivesever2的模拟用户功能，依赖于Hadoop提供的proxy user（代理用户功能），只有Hadoop中的代理用户才能模拟其他用户的身份访问Hadoop集群。因此，需要<code>将hiveserver2的启动用户设置为Hadoop的代理用户</code>，配置方式如下：</p><ol><li><strong><code>修改</code>配置文件core-site.xml，然后记得<code>分发</code>三台机器,然后再<code>重启</code>hadoop服务</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> <span class="token variable">$HADOOP_HOME</span>/etc/hadoop/core-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><strong>增加如下配置:</strong></li></ol><pre class="line-numbers language-XML" data-language="XML"><code class="language-XML">&lt;!--配置所有节点的root用户都可作为代理用户--&gt;&lt;property&gt;&lt;name&gt;hadoop.proxyuser.root.hosts&lt;&#x2F;name&gt;&lt;value&gt;*&lt;&#x2F;value&gt;&lt;&#x2F;property&gt;&lt;!--配置root用户能够代理的用户组为任意组--&gt;&lt;property&gt;&lt;name&gt;hadoop.proxyuser.root.groups&lt;&#x2F;name&gt;&lt;value&gt;*&lt;&#x2F;value&gt;&lt;&#x2F;property&gt;&lt;!--配置root用户能够代理的用户为任意用户--&gt;&lt;property&gt;&lt;name&gt;hadoop.proxyuser.root.users&lt;&#x2F;name&gt;&lt;value&gt;*&lt;&#x2F;value&gt;&lt;&#x2F;property&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:two:Hive端配置</p><ol><li><strong>在 hive-site.xml 文件中添加以下配置信息</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># vim $HIVE_HOME/conf/hive-site.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--指定 hiveserver2 连接的 host (使用主机名需要添加本地映射)--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.thrift.bind.host<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>192.168.1.10<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- 指定 hiveserver2 连接的端口号 --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.thrift.port<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>10000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>:three:测试</p><ol><li><strong>启动hiveserver2</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hive --service hiveserver2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131608356.png" alt="image-20240113160812261"></p><p>查看端口是否已经存在,存在则成功启动hiveserver2</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># ss -tunlp |grep 10000</span>tcp    LISTEN     <span class="token number">0</span>      <span class="token number">50</span>        *:10000                 *:*                   users:<span class="token variable"><span class="token punctuation">((</span>"java"<span class="token punctuation">,</span>pid<span class="token operator">=</span><span class="token number">9885</span><span class="token punctuation">,</span>fd<span class="token operator">=</span><span class="token number">511</span><span class="token punctuation">))</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131607826.png" alt="image-20240113160740747"></p><ol start="2"><li><strong>新打开一个终端,使用命令行客户端beeline进行远程访问</strong></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">beeline <span class="token parameter variable">-u</span> jdbc:hive2://master:10000 <span class="token parameter variable">-n</span> atguigu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><code>beeline</code>：用于与Hive进行交互的命令行工具。</li><li><code>-u jdbc:hive2://master:10000</code>：指定JDBC连接URL，其中<code>master</code>是Hive服务器的主机名，<code>10000</code>是端口号。</li><li><code>-n atguigu</code>：指定连接时使用的Hive用户名（<code>atguigu</code>）。</li></ol><p>或</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">beeline <span class="token parameter variable">-u</span> jdbc:hive2://master:10000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>-u</code>标志用于指定JDBC连接URL，为Beeline提供连接到Hive服务器所需的信息。</li></ul><p>结果如下:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132021126.png" alt="image-20240113202132033"></p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132020816.png" alt="image-20240113202033694"></p><ol start="4"><li><strong>使用Datagrip图形化客户端进行远程访问</strong></li></ol><p>(1)创建连接:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132122559.png" alt="image-20240113212219461"></p><p>(2)配置连接属性</p><p>​有属性配置，和Hive的beeline客户端配置一致即可。初次使用，配置过程会提示缺少JDBC驱动，按照提示下载即可</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132123984.png" alt="image-20240113212331886"></p><p>（3）界面介绍</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134380.png" alt="image-20240113213409280"></p><p>（4）测试sql执行</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134593.png" alt="image-20240113213430503"></p><p>（5）修改数据库</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134412.png" alt="image-20240113213449337"></p><blockquote><p><strong>hiveserver2可能出现的报错:(可忽略)</strong></p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401111119587.png" alt="image-20240111111958040"></p><p>参考: <a href="https://www.cnblogs.com/tianlingqun/p/16322927.html">https://www.cnblogs.com/tianlingqun/p/16322927.html</a></p><p>参考添加以下配置</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 启动hive的高可用性,默认false --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.server2.active.passive.ha.enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-metastore服务"><a href="#2-3-2-metastore服务" class="headerlink" title="2.3.2 metastore服务"></a>2.3.2 metastore服务</h4><p>​Hive的metastore服务的作用是为Hive CLI或者Hiveserver2提供元数据访问接口。</p><p>:one:<strong>metastore</strong>运行模式</p><p>metastore有两种运行模式，分别为嵌入式模式和独立服务模式。下面分别对两种模式进行说明：</p><blockquote><p>(1)嵌入式模式</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137976.png" alt="image-20240113213712903"></p><blockquote><p>(2)独立服务模式</p></blockquote><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137270.png" alt="image-20240113213743201"></p><p>生产环境中，<code>不推荐使用嵌入式模式</code>。因为其存在以下两个问题：</p><p>  (1）嵌入式模式下，每个Hive CLI都需要直接连接元数据库，当Hive CLI较多时，数据库压力会比较大。</p><p>（2）每个客户端都需要用户元数据库的读写权限，元数据库的安全得不到很好的保证。</p><p>:two:<strong>metastore部署</strong></p><blockquote><p>(1）嵌入式模式</p></blockquote><p>嵌入式模式下，只需保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中<code>包含连接元数据库所需要的以下参数即可</code>(前面部署时已添加)：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">   <span class="token comment">&lt;!-- jdbc连接的URL --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- jdbc连接的Driver--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- jdbc连接的username--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- jdbc连接的password --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>（2）独立服务模式</p></blockquote><p>独立服务模式需做以下配置：</p><p>首先，保证metastore服务的配置文件hive-site.xml中包含连接元数据库所需的以下参数：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">   <span class="token comment">&lt;!-- jdbc连接的URL --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionURL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class="token entity named-entity" title="&amp;">&amp;amp;</span>useSSL=false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>      <span class="token comment">&lt;!-- jdbc连接的Driver--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionDriverName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>com.mysql.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- jdbc连接的username--></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionUserName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>   <span class="token comment">&lt;!-- jdbc连接的password --></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>javax.jdo.option.ConnectionPassword<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其次，保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中<code>包含访问metastore服务</code>所需的以下参数：</p><p>(<code>添加以下参数</code>)</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 指定metastore服务的地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hive.metastore.uris<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>thrift://master:9083<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：主机名需要改为metastore服务所在节点，端口号无需修改，metastore服务的默认端口就是9083。</p><blockquote><p>(3) <strong>测试</strong></p></blockquote><p>此时启动Hive CLI，执行shou databases语句，会出现一下错误提示信息：</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132252589.png" alt="image-20240113225247501"></p><p>​这是因为我们在Hive CLI的配置文件中配置了hive.metastore.uris参数，此时Hive CLI会去<code>请求我们执行的metastore服务地址</code>，所以<code>必须启动metastore服务</code>才能正常使用。</p><p><strong>metastore服务的启动命令如下：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hive <span class="token parameter variable">--service</span> metastore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：启动后该窗口不能再操作，需打开一个新的Xshell窗口来对Hive操作</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132255816.png" alt="image-20240113225511730"></p><p>新开一个终端,重新启动 Hive CLI，并执行shou databases语句，就能正常访问了:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132256079.png" alt="image-20240113225647991"></p><h4 id="2-3-3-修改hive日志默认路径"><a href="#2-3-3-修改hive日志默认路径" class="headerlink" title="2.3.3 修改hive日志默认路径"></a>2.3.3 修改hive日志默认路径</h4><p>需要修改的文件模板如下:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142111810.png" alt="image-20240114211120713"></p><p>如果初次配置,在conf文件夹下，复制一份模板</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># cp hive-exec-log4j2.properties.template hive-log4j2.properties</span><span class="token punctuation">[</span>root@master conf<span class="token punctuation">]</span><span class="token comment"># vim hive-log4j2.properties</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改property.hive.log.dir<br><code>property.hive.log.dir = $&#123;sys:java.io.tmpdir&#125;/$&#123;sys:user.name&#125;</code>这个会解析成&#x2F;tmp&#x2F;启动hive用户名称&#x2F;hive.log<br>配置的时候可以写成绝对路径</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142113949.png" alt="image-20240114211359832"></p><p>修改结果如下:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># list of properties</span>property.hive.log.level <span class="token operator">=</span> INFOproperty.hive.root.logger <span class="token operator">=</span> DRFA<span class="token comment">#property.hive.log.dir = $&#123;sys:java.io.tmpdir&#125;/$&#123;sys:user.name&#125;</span>property.hive.log.dir <span class="token operator">=</span> /opt/module/apache-hive-3.1.2/logsproperty.hive.log.file <span class="token operator">=</span> hive.logproperty.hive.perflogger.log.level <span class="token operator">=</span> INFO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-4-编写Hive服务启动脚本"><a href="#2-3-4-编写Hive服务启动脚本" class="headerlink" title="2.3.4 编写Hive服务启动脚本"></a>2.3.4 编写Hive服务启动脚本</h4><ul><li><p>nohup：放在命令开头，表示不挂起，也就是关闭终端进程也继续保持运行状态</p></li><li><p>&#x2F;dev&#x2F;null：是Linux文件系统中的一个文件，被称为黑洞，所有写入该文件的内容都会被自动丢弃</p></li><li><p>2&gt;&amp;1：表示将错误重定向到标准输出上</p></li><li><p>&amp;：放在命令结尾，表示后台运行</p></li></ul><p>一般会组合使用：nohup [xxx命令操作]&gt; file 2&gt;&amp;1 &amp;，表示将xxx命令运行的结果输出到file中，并保持命令启动的进程在后台运行。</p><blockquote><p>启动命令如下:</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> hive <span class="token parameter variable">--service</span> metastore <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token function">nohup</span> hive <span class="token parameter variable">--service</span> hiveserver2 <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>添加启动脚本(了解)</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.编辑启动脚本<span class="token function">vi</span> <span class="token variable">$HIVE_HOME</span>/bin/hiveservices.sh<span class="token number">2</span>.编辑完后添加可执行权限<span class="token function">chmod</span> +x <span class="token variable">$HIVE_HOME</span>/bin/hiveservices.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>脚本内容如下:</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">HIVE_LOG_DIR</span><span class="token operator">=</span><span class="token variable">$HIVE_HOME</span>/logs<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token parameter variable">-d</span> <span class="token variable">$HIVE_LOG_DIR</span> <span class="token punctuation">]</span><span class="token keyword">then</span><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> <span class="token variable">$HIVE_LOG_DIR</span><span class="token keyword">fi</span><span class="token comment">#检查进程是否运行正常，参数1为进程名，参数2为进程端口</span><span class="token keyword">function</span> <span class="token function-name function">check_process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token assign-left variable">pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">ps</span> <span class="token parameter variable">-ef</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-v</span> <span class="token function">grep</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> $1 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $2&#125;'</span><span class="token variable">)</span></span>    <span class="token assign-left variable">ppid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>ss <span class="token parameter variable">-nltp</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null <span class="token operator">|</span> <span class="token function">grep</span> $2 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'&#123;print $7&#125;'</span> <span class="token operator">|</span> <span class="token function">cut</span> <span class="token parameter variable">-d</span> <span class="token string">'/'</span> <span class="token parameter variable">-f</span> <span class="token number">1</span><span class="token variable">)</span></span>    <span class="token builtin class-name">echo</span> <span class="token variable">$pid</span>    <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$pid</span>"</span> <span class="token operator">=~</span> <span class="token string">"<span class="token variable">$ppid</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$ppid</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token builtin class-name">return</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">hive_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token assign-left variable">metapid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>check_process HiveMetastore <span class="token number">9083</span><span class="token variable">)</span></span>    <span class="token assign-left variable">cmd</span><span class="token operator">=</span><span class="token string">"nohup hive --service metastore ><span class="token variable">$HIVE_LOG_DIR</span>/metastore.log 2>&amp;1 &amp;"</span>    <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$metapid</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">eval</span> <span class="token variable">$cmd</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Metastroe服务已启动"</span>    <span class="token assign-left variable">server2pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>check_process HiveServer2 <span class="token number">10000</span><span class="token variable">)</span></span>    <span class="token assign-left variable">cmd</span><span class="token operator">=</span><span class="token string">"nohup hive --service hiveserver2 ><span class="token variable">$HIVE_LOG_DIR</span>/hiveServer2.log 2>&amp;1 &amp;"</span>    <span class="token punctuation">[</span> <span class="token parameter variable">-z</span> <span class="token string">"<span class="token variable">$server2pid</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">eval</span> <span class="token variable">$cmd</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"HiveServer2服务已启动"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">hive_stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token assign-left variable">metapid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>check_process HiveMetastore <span class="token number">9083</span><span class="token variable">)</span></span>    <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$metapid</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">kill</span> <span class="token variable">$metapid</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"Metastore服务未启动"</span>    <span class="token assign-left variable">server2pid</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span>check_process HiveServer2 <span class="token number">10000</span><span class="token variable">)</span></span>    <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$server2pid</span>"</span> <span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">kill</span> <span class="token variable">$server2pid</span> <span class="token operator">||</span> <span class="token builtin class-name">echo</span> <span class="token string">"HiveServer2服务未启动"</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function-name function">hive_status</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  ss <span class="token parameter variable">-tunlp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">10000</span> <span class="token operator">></span> /dev/null  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token function">sleep</span> <span class="token number">3</span>    <span class="token builtin class-name">echo</span> <span class="token string">"HiveServer2服务运行异常"</span>  <span class="token keyword">else</span>    <span class="token function">sleep</span> <span class="token number">3</span>    <span class="token builtin class-name">echo</span> <span class="token string">"HiveServer2服务运行正常"</span>  <span class="token keyword">fi</span>  ss <span class="token parameter variable">-tunlp</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token number">9083</span> <span class="token operator">></span> /dev/null  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$?</span> <span class="token parameter variable">-ne</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Metastore服务运行异常"</span>  <span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">"Metastore服务运行正常"</span>  <span class="token keyword">fi</span><span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span>    hive_start    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span>    hive_stop    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"restart"</span><span class="token punctuation">)</span>    hive_stop    <span class="token function">sleep</span> <span class="token number">2</span>    hive_start    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"status"</span><span class="token punctuation">)</span><span class="token comment">#    check_process HiveMetastore 9083 >/dev/null &amp;&amp; echo "Metastore服务运行正常" || echo "Metastore服务运行异常"</span><span class="token comment">#    check_process HiveServer2 10000 >/dev/null &amp;&amp; echo "HiveServer2服务运行正常" || echo "HiveServer2服务运行异常"</span>    hive_status    <span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>    <span class="token builtin class-name">echo</span> Invalid Args<span class="token operator">!</span>    <span class="token builtin class-name">echo</span> <span class="token string">'Usage: '</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $0<span class="token variable">)</span></span><span class="token string">' start|stop|restart|status'</span>    <span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>脚本启动测试</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@master ~<span class="token punctuation">]</span><span class="token comment"># hiveservices.sh start</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看端口号是否已启动:</p><p><img src="https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401141130477.png" alt="image-20240114113057354"></p><p>脚本启动成功!</p><p>部署完成!!!</p><h3 id="2-4-Hive使用技巧"><a href="#2-4-Hive使用技巧" class="headerlink" title="2.4  Hive使用技巧"></a>2.4  Hive使用技巧</h3><h4 id="2-4-1-Hive常用交互命令"><a href="#2-4-1-Hive常用交互命令" class="headerlink" title="2.4.1 Hive常用交互命令"></a>2.4.1 Hive常用交互命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">查看帮助:<span class="token punctuation">[</span>root@master hive<span class="token punctuation">]</span>$ bin/hive <span class="token parameter variable">-help</span>usage: hive -d,--define <span class="token operator">&lt;</span>key<span class="token operator">=</span>value<span class="token operator">></span>          Variable subsitution to apply to hive                                  commands. e.g. <span class="token parameter variable">-d</span> <span class="token assign-left variable">A</span><span class="token operator">=</span>B or <span class="token parameter variable">--define</span> <span class="token assign-left variable">A</span><span class="token operator">=</span>B    <span class="token parameter variable">--database</span> <span class="token operator">&lt;</span>databasename<span class="token operator">></span>     Specify the database to use <span class="token parameter variable">-e</span> <span class="token operator">&lt;</span>quoted-query-string<span class="token operator">></span>         SQL from <span class="token builtin class-name">command</span> line <span class="token parameter variable">-f</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span>                      SQL from files -H,--help                        Print <span class="token builtin class-name">help</span> information    <span class="token parameter variable">--hiveconf</span> <span class="token operator">&lt;</span>property<span class="token operator">=</span>value<span class="token operator">></span>   Use value <span class="token keyword">for</span> given property    <span class="token parameter variable">--hivevar</span> <span class="token operator">&lt;</span>key<span class="token operator">=</span>value<span class="token operator">></span>         Variable subsitution to apply to hive                                  commands. e.g. <span class="token parameter variable">--hivevar</span> <span class="token assign-left variable">A</span><span class="token operator">=</span>B <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>filename<span class="token operator">></span>                    Initialization SQL <span class="token function">file</span> -S,--silent                      Silent mode <span class="token keyword">in</span> interactive shell -v,--verbose                     Verbose mode <span class="token punctuation">(</span>echo executed SQL to the console<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例1:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>）在Hive命令行里创建一个表student，并插入<span class="token number">1</span>条数据hive <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">create</span> <span class="token keyword">table</span> student<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name string<span class="token punctuation">)</span><span class="token punctuation">;</span>OK<span class="token keyword">Time</span> taken: <span class="token number">1.291</span> secondshive <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">table</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hive <span class="token punctuation">(</span><span class="token keyword">default</span><span class="token punctuation">)</span><span class="token operator">></span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>OKstudent<span class="token punctuation">.</span>idstudent<span class="token punctuation">.</span>name<span class="token number">1</span>zhangsan<span class="token keyword">Time</span> taken: <span class="token number">0.144</span> seconds<span class="token punctuation">,</span> Fetched: <span class="token number">1</span> <span class="token keyword">row</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token number">2</span>）“<span class="token operator">-</span>e”不进入hive的交互窗口执行hql语句<span class="token punctuation">[</span>root<span class="token variable">@master</span> hive<span class="token punctuation">]</span>$ bin<span class="token operator">/</span>hive <span class="token operator">-</span>e <span class="token string">"select id from student;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">3</span>）“-f”执行脚本中的hql语句（1）在/opt/module/hive/下创建datas目录并在datas目录下创建hivef.sql文件<span class="token punctuation">[</span>atguigu@master hive<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> datas<span class="token punctuation">[</span>atguigu@master datas<span class="token punctuation">]</span>$ <span class="token function">vim</span> hivef.sql（2）文件中写入正确的hql语句<span class="token keyword">select</span> * from student<span class="token punctuation">;</span>（3）执行文件中的hql语句<span class="token punctuation">[</span>atguigu@master hive<span class="token punctuation">]</span>$ bin/hive <span class="token parameter variable">-f</span> /opt/module/hive/datas/hivef.sql（4）执行文件中的hql语句并将结果写入文件中<span class="token punctuation">[</span>atguigu@master hive<span class="token punctuation">]</span>$ bin/hive <span class="token parameter variable">-f</span> /opt/module/hive/datas/hivef.sql  <span class="token operator">></span> /opt/module/hive/datas/hive_result.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例2:</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">if</span>  <span class="token operator">not</span> <span class="token keyword">exists</span> orders<span class="token punctuation">(</span>id string<span class="token punctuation">,</span>userno string<span class="token punctuation">,</span>password string<span class="token punctuation">,</span>email string<span class="token punctuation">,</span>phone string<span class="token punctuation">,</span>name string<span class="token punctuation">,</span>idcard string<span class="token punctuation">,</span><span class="token keyword">status</span> <span class="token keyword">int</span><span class="token punctuation">,</span>depid string<span class="token punctuation">)</span><span class="token keyword">row</span> format  delimited <span class="token keyword">fields</span> <span class="token keyword">terminated</span> <span class="token keyword">by</span> <span class="token string">','</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从本地将csv文件导入hive(需要提前建好表)：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">load data <span class="token builtin class-name">local</span> inpath <span class="token string">'文件路径'</span> into table 表名<span class="token punctuation">;</span>load data <span class="token builtin class-name">local</span> inpath <span class="token string">'/opt/user.csv'</span> into table orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将hdfs中的文件导入hive：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">load data inpath ‘hdfs中csv文件路径’ into table 表名<span class="token punctuation">;</span>load data inpath <span class="token string">'/data081/order.csv'</span> into table orders<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>导入完成</p><p>执行导入语句说明：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"> load data inpath ‘/tmp/fun_user.txt’ into table fun_user_external<span class="token punctuation">;</span> load data <span class="token builtin class-name">local</span> inpath ‘/tmp/fun_user.txt’ into table fun_user_external<span class="token punctuation">;</span>上面两条数据导入语句，如果有local这个关键字，则这个路径应该为本地文件系统路径，数据会被拷贝到目标位置；如果省略掉local关键字，那么这个路径应该是分布式文件系统中的路径，这种情况下，数据是从这个路径转移到目标位置的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大数据运维系列 </category>
          
          <category> 数据库系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bigdata </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
