{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/dark.css","path":"css/dark.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","path":"css/gallery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","path":"css/indexcover.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/post.css","path":"css/post.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/reward.css","path":"css/reward.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","path":"js/crypto-js.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","path":"js/gallery-encrypt.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","path":"libs/aplayer/Meting.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","path":"libs/fancybox/fancybox.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","path":"libs/fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","path":"libs/jquery/jquery-3.6.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","path":"libs/justifiedGallery/justifiedGallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","path":"libs/justifiedGallery/justifiedGallery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","path":"libs/mermaid/mermaid.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","path":"libs/mermaid/mermaid.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","path":"libs/mermaid/mermaid.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","path":"libs/others/TencentCaptcha.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","path":"libs/others/sakura-half.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","path":"libs/others/sakura-reduce.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","path":"libs/others/sakura-small.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","path":"libs/others/sakura.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","path":"libs/others/snow.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","path":"libs/others/star.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","path":"libs/prism/prism.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","path":"libs/prism/prism.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","path":"libs/typed/typed.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","path":"libs/waline/Waline.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","path":"medias/images/01.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","path":"medias/images/02.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","path":"medias/images/03.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","path":"libs/awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","path":"libs/awesome/webfonts/fa-v4compatibility.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","path":"libs/awesome/webfonts/fa-v4compatibility.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.md","hash":"250f6497af39f8055b58bd18b963ea5a8e3b9348","modified":1731328065480},{"_id":"source/_data/friends.json","hash":"7caebb5b439565e89f7f10a6f6f9b211cbbdb636","modified":1731328065480},{"_id":"source/_posts/Golang发展史.md","hash":"3d7999471e75352ba97e0e80c90e7090c4b53e43","modified":1731328065480},{"_id":"source/_posts/Golang基础环境配置.md","hash":"02ef2250d509c5fe918a0e752c5321c934041238","modified":1731328065480},{"_id":"source/_posts/Go语言中的变量和常量.md","hash":"72aea11fde01ece60d49059c25888df6e6581107","modified":1731328065481},{"_id":"source/_posts/Hadoop环境配置合集.md","hash":"8ccf164c9aed4aab0ec80fc5fb515735e33a17f8","modified":1731328065481},{"_id":"source/_posts/Hive之Hiveserver2-metastore环境部署.md","hash":"585f0e94ec5e3444904f9c2e1cb23f68a68f7c1b","modified":1731328065481},{"_id":"source/_posts/MYSQL数据备份.md","hash":"ebd756cae67bffabf9f3576cb8d1d15cc9823dd1","modified":1731328065481},{"_id":"source/_posts/Ubuntu基础配置-18-04-Docker配置和使用-容器化centos7大数据环境准备.md","hash":"90907108fbb8db9516021b8dfa684351b6860f79","modified":1731328065482},{"_id":"source/about/index.md","hash":"cbb98221c1f3778729c2b9bcbd8d7e29965fd20c","modified":1731328065482},{"_id":"source/categories/index.md","hash":"b5f8959b97d12efb346b0523f2bbdbcdc34c5991","modified":1731328065482},{"_id":"source/friends/index.md","hash":"a5402a5395f85ceaebe49182fee831156cf31f42","modified":1731328065482},{"_id":"source/tags/index.md","hash":"cc3eb57df5de341b42663d1d7a50d5184dc5a759","modified":1731328065482},{"_id":"themes/hexo-theme-matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1731328065482},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1731328065482},{"_id":"themes/hexo-theme-matery/CNAME","hash":"a2a2169c572180da7b8ff04c0c0204eccfd00ea9","modified":1731328065482},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1731328065482},{"_id":"themes/hexo-theme-matery/README.md","hash":"9d98fe84a60bd6b222740f238d83f0999eaa77a3","modified":1731328065484},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"497c6645c55dce9f190ec7625de76083262e1707","modified":1731328065484},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"f7b3e88255e32b2d50d3e1a7bded2241039a3bef","modified":1731328065485},{"_id":"themes/hexo-theme-matery/package.json","hash":"65e479c76534f44e9f228146f7919b259a363919","modified":1731328065490},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1731328065485},{"_id":"themes/hexo-theme-matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1731328065485},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1731328065485},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1731328065490},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1731328065490},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"94c2fee85418370ca8f7d54050c852267e924eb7","modified":1731328065490},{"_id":"themes/hexo-theme-matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1731328065490},{"_id":"themes/hexo-theme-matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1731328065490},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1731328065490},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1731328065490},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1731328065490},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1731328065491},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"9e6b10d5cf4b5faf0d851f4777f75a7297ce68b9","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1731328065485},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"e8958bc066b3c2fcd4152604cc12f30020106848","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"f5c00f21af281a09dc7de89e82a3b442903451a7","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"e8b44268b59add61af44b7338527523d10d9d742","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"0953217f4e19a51dfc5a0ffc7d066406df18060b","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"70fccaea75ce48364222c4e5de0496e556b01cb1","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"6261f8191c3c1159f63ec7f9293bb93f7d2a3dbb","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"236668e72b01db91f5bf29eec4c79e34e2746d98","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1731328065486},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1731328065487},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1731328065488},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1731328065488},{"_id":"themes/hexo-theme-matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1731328065490},{"_id":"themes/hexo-theme-matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1731328065490},{"_id":"themes/hexo-theme-matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1731328065490},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1731328065490},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1731328065490},{"_id":"themes/hexo-theme-matery/source/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/css/indexcover.css","hash":"00f4f498ae8514022004f2281cab8ff304cd0f37","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1731328065556},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1731328065563},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1731328065571},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1731328065577},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1731328065493},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1731328065493},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1731328065507},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1731328065508},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1731328065513},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1731328065513},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1731328065513},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1731328065513},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1731328065515},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1731328065534},{"_id":"themes/hexo-theme-matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1731328065542},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1731328065541},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1731328065542},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1731328065542},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1731328065542},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1731328065542},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1731328065543},{"_id":"themes/hexo-theme-matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1731328065543},{"_id":"themes/hexo-theme-matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1731328065543},{"_id":"themes/hexo-theme-matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1731328065543},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1731328065543},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1731328065547},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1731328065549},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1731328065549},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1731328065551},{"_id":"themes/hexo-theme-matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1731328065551},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1731328065563},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1731328065563},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1731328065563},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1731328065563},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1731328065564},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1731328065565},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1731328065565},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1731328065565},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1731328065567},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1731328065568},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1731328065568},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1731328065568},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1731328065568},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1731328065570},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1731328065570},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1731328065571},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1731328065578},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1731328065578},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1731328065497},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1731328065497},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1731328065547},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1731328065547},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1731328065547},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1731328065547},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1731328065547},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1731328065549},{"_id":"themes/hexo-theme-matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1731328065507},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1731328065513},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1731328065558},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1731328065515},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1731328065514},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1731328065547},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1731328065559},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1731328065563},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1731328065564},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1731328065564},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1731328065565},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1731328065565},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1731328065565},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1731328065565},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1731328065567},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1731328065567},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1731328065570},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1731328065570},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1731328065571},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1731328065494},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1731328065497},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1731328065559},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1731328065563},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1731328065502},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1731328065515},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1731328065516},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1731328065553},{"_id":"themes/hexo-theme-matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1731328065556},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1731328065558},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1731328065563},{"_id":"themes/hexo-theme-matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1731328065575},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1731328065494},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1731328065497},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1731328065500},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1731328065562},{"_id":"themes/hexo-theme-matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1731328065491},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1731328065555},{"_id":"themes/hexo-theme-matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1731328065577},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1731328065560},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1731328065499},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1731328065551},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1731328065547},{"_id":"themes/hexo-theme-matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1731328065573},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1731328065506},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1731328065511},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1731328065541},{"_id":"themes/hexo-theme-matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1731328065534},{"_id":"public/404.html","hash":"c8d9fadafcbe61d2e2835b5f7730a5604623f5a6","modified":1731328449185},{"_id":"public/about/index.html","hash":"4936d152fc7a5f7c8925efc16f6e7de9f2c4ebd2","modified":1731328449185},{"_id":"public/categories/index.html","hash":"e3cb663b1926ee67bb0c4fdf4c9afa0ca1bef6f4","modified":1731328449185},{"_id":"public/friends/index.html","hash":"09c1349c19d205af1f1d4cffd14471ddf629084d","modified":1731328449185},{"_id":"public/tags/index.html","hash":"c982fc5ab25bfefee92dc224cbefde929c802739","modified":1731328449185},{"_id":"public/2024/11/10/Go语言中的变量和常量/index.html","hash":"88981ca562d95995e945799e828de2d4fb18791e","modified":1731328449185},{"_id":"public/2024/11/10/Golang发展史/index.html","hash":"b45959ea69c3ae921a219f703b30132861a64b5b","modified":1731328449185},{"_id":"public/2024/11/10/Golang基础环境配置/index.html","hash":"f501cb68791eb90e39c4d97167ecd7ad079568d1","modified":1731328449185},{"_id":"public/2024/11/10/Ubuntu基础配置-18-04-Docker配置和使用-容器化centos7大数据环境准备/index.html","hash":"5e6040dc1c592eeb8483ae4eeff3d4e78a481f65","modified":1731328449185},{"_id":"public/2024/11/10/Hadoop环境配置合集/index.html","hash":"b2ab3d9033e26411e3d44ece0c5d90f472b9bd45","modified":1731328449185},{"_id":"public/2024/11/10/MYSQL数据备份/index.html","hash":"9f55b0f7109a641f7dc1dc3637d655960d65a96b","modified":1731328449185},{"_id":"public/2024/11/09/Hive之Hiveserver2-metastore环境部署/index.html","hash":"1469cb30f9533d6080b782669c974f1f4caccc16","modified":1731328449185},{"_id":"public/archives/index.html","hash":"d3f0c9c6292fe534d1958daf1b7963e23958ebc6","modified":1731328449185},{"_id":"public/archives/2024/index.html","hash":"b1077dc2fc424561817b5fd78fae46768fa699ec","modified":1731328449185},{"_id":"public/archives/2024/11/index.html","hash":"75217b24745b3a9e60e0505ccaec8d194d2b17d2","modified":1731328449185},{"_id":"public/categories/运维开发/index.html","hash":"1ef8a548cbede03ff4bc1174819255ec0892e50b","modified":1731328449185},{"_id":"public/categories/大数据运维系列/index.html","hash":"301e9a217ff0d014c23c7d2b348f7af1da6e9026","modified":1731328449185},{"_id":"public/categories/运维开发/云原生/index.html","hash":"9a0a5769af71a8fe487ea32f345dbbc7f888d702","modified":1731328449185},{"_id":"public/categories/数据库系列/index.html","hash":"d98a40631f9a0bc31a1c8f1954655b889b44ef39","modified":1731328449185},{"_id":"public/index.html","hash":"2d2e504b48a8f159fe562e4f58def41a55791d5b","modified":1731328449185},{"_id":"public/tags/Golang/index.html","hash":"bd5077ea26e30ccc470db9025902ec496c96eec9","modified":1731328449185},{"_id":"public/tags/Bigdata/index.html","hash":"8ee0e8449847ccd87e8a301545a5f2b264ec18e7","modified":1731328449185},{"_id":"public/tags/Mysql/index.html","hash":"55b4f692c3d078874bbd85edf1e8bba25ff6b66b","modified":1731328449185},{"_id":"public/tags/Docker/index.html","hash":"11583a192cd23145399ef11e194d598620ae3154","modified":1731328449185},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1731328449185},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1731328449185},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1731328449185},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1731328449185},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1731328449185},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1731328449185},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1731328449185},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1731328449185},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1731328449185},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1731328449185},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1731328449185},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1731328449185},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1731328449185},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1731328449185},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1731328449185},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1731328449185},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1731328449185},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1731328449185},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1731328449185},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1731328449185},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1731328449185},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1731328449185},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1731328449185},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1731328449185},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1731328449185},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1731328449185},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1731328449185},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1731328449185},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1731328449185},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1731328449185},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1731328449185},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1731328449185},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1731328449185},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1731328449185},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1731328449185},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1731328449185},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1731328449185},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1731328449185},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1731328449185},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1731328449185},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1731328449185},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1731328449185},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1731328449185},{"_id":"public/css/indexcover.css","hash":"bd027eb8192b4d1b0dc9b4f965fa264e8437f847","modified":1731328449185},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1731328449185},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1731328449185},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1731328449185},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1731328449185},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1731328449185},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1731328449185},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1731328449185},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1731328449185},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1731328449185},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1731328449185},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1731328449185},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1731328449185},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1731328449185},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1731328449185},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1731328449185},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1731328449185},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1731328449185},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1731328449185},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1731328449185},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1731328449185},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1731328449185},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1731328449185},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1731328449185},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1731328449185},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1731328449185},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1731328449185},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1731328449185},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1731328449185},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1731328449185},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1731328449185},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1731328449185},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1731328449185},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1731328449185},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1731328449185},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1731328449185},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1731328449185},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1731328449185},{"_id":"public/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1731328449185},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1731328449185},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1731328449185},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1731328449185},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1731328449185},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1731328449185},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1731328449185},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1731328449185},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1731328449185},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1731328449185},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1731328449185},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1731328449185},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1731328449185},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1731328449185},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1731328449185},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1731328449185},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1731328449185},{"_id":"public/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1731328449185},{"_id":"public/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1731328449185},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1731328449185},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1731328449185},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1731328449185},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1731328449185},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1731328449185},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1731328449185},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1731328449185},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1731328449185},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1731328449185},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1731328449185},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1731328449185},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1731328449185},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1731328449185},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1731328449185},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1731328449185},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1731328449185},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1731328449185},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1731328449185},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1731328449185},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1731328449185},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1731328449185},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1731328449185},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1731328449185},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1731328449185},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1731328449185},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1731328449185},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1731328449185},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1731328449185},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1731328449185},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1731328449185},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1731328449185},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1731328449185},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1731328449185},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1731328449185},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1731328449185},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1731328449185},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1731328449185},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1731328449185},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1731328449185},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1731328449185},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1731328449185},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1731328449185},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1731328449185},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1731328449185},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1731328449185},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1731328449185}],"Category":[{"name":"运维开发","_id":"cm3d099fx0004e1mj8w9f84kc"},{"name":"大数据运维系列","_id":"cm3d099g8000ke1mj0di9asdg"},{"name":"云原生","parent":"cm3d099fx0004e1mj8w9f84kc","_id":"cm3d099g9000ne1mj983f9rpy"},{"name":"数据库系列","_id":"cm3d099gb000ue1mj4k9ofyko"}],"Data":[{"_id":"friends","data":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}],"Page":[{"title":"404","date":"2024-11-09T16:31:03.000Z","type":"404","layout":"404","description":"Cannot find the page you want :(","_content":"","source":"404.md","raw":"---\ntitle: 404\ndate: 2024-11-10 00:31:03\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Cannot find the page you want :(\"\n---","updated":"2024-11-11T12:27:45.480Z","path":"404.html","comments":1,"_id":"cm3d099fn0000e1mja02z0udp","content":"","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":""},{"title":"about","date":"2024-11-09T16:32:31.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-11-10 00:32:31\ntype: \"about\"\nlayout: \"about\"\n---","updated":"2024-11-11T12:27:45.482Z","path":"about/index.html","comments":1,"_id":"cm3d099fu0002e1mj3mou1ocx","content":"","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":""},{"title":"categories","date":"2024-11-09T16:31:51.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-11-10 00:31:51\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2024-11-11T12:27:45.482Z","path":"categories/index.html","comments":1,"_id":"cm3d099fz0006e1mj9u9tegr5","content":"","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":""},{"title":"friends","date":"2024-11-09T16:33:14.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2024-11-10 00:33:14\ntype: \"friends\"\nlayout: \"friends\"\n---","updated":"2024-11-11T12:27:45.482Z","path":"friends/index.html","comments":1,"_id":"cm3d099g10008e1mj87ah0w8h","content":"","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":""},{"title":"tags","date":"2024-11-09T16:33:14.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-11-10 00:33:14\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2024-11-11T12:27:45.482Z","path":"tags/index.html","comments":1,"_id":"cm3d099g2000ae1mj0qm61gvu","content":"","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":""}],"Post":[{"title":"Go语言发展史","date":"2024-11-10T15:53:58.000Z","_content":"## 2.Go语言发展简史\n\n### 2.1 开发文档\n\nhttps://studygolang.com/pkgdoc\n\n### 2.2 Go语言核心开发团队\n\nKen Thompson（肯·汤普森）：1983年图灵奖（Turing Award）和1998年美国国家技术奖（National Medal of Technology）得主。他与Dennis Ritchie是Unix的原创者。Thompson也发明了后来衍生出C语言的B程序语言，同时也是C语言的主要发明人。\n\nRob Pike（罗布-派克）：曾是贝尔实验室（Bell Labs）的Unix团队，和Plan 9操作系统计划的成员。\n他与Thompson共事多年，并共创出广泛使用的UTF-8字元编码。\n\nRobert Griesemer：曾协助制作Java的HotSpot编译器，和Chrome浏览器的JavaScript引擎V8\n\n![image-20200718103112309](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718103112309.png)\n\n\n\n### 2.3 Google为什么要创建Go\n\n- 计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多CPU的优势提升软件系统性能。\n- 软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。\n  - 现有编程语言存在：风格不统一、计算能力不够、处理大并发不够好\n- 企业运行维护很多c/c++的项目，c/c++程序运行速度虽然很快，但是编译速度确很慢，同时还存在内存泄漏的一系列的困扰需要解决。\n\n\n\n### 2.4 Go语言发展历史\n\n- 2007年，谷歌工程师Rob Pike，Ken Thompson和Robert Griesemer开始设计一门全新的语言，这是Go语言的最初原型。\n- 2009年11月10日，Google将Go语言以开放源代码的方式向全球发布。\n- 2015年8月19日，Go1.5版发布，本次更新中移除了”最后残余的c代码”\n- 2017年2月17日，Go语言Go1.8版发布。\n- 2017年8月24日，Go语言Go1.9版发布。\n- 2018年2月16日，Go语言Go1.10版发布。\n\n### 2.5 Go语言的特点\n\nGo语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率，使用一个表达式来形容Go语言：Go=C+Python，说明Go语言既有C静态语言程序的运行速度，又能达到Python动态语言的快速开发。\n\n- 从c语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等等，也保留了和C语言一样的编译执行方式及弱化的指针。\n\n```go\n// go语言的指针使用特点\nfunc testPtr(num *int)  {\n\t*num = 20\n}\n```\n\n- 引入包的概念，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在。\n- 垃圾回收机制，内存自动回收，不需开发人员管理 【稍微不注意就会出现内存泄漏】\n- 天然并发【重要特点】\n  - 从语言层面支持并发，实现简单\n  - goroutine，轻量级线程，可实现大并发处理，高效利用多核。\n  - 基于CPS并发模型（Communicating Sequential Processes）实现\n- 吸收了管道通信机制，形成go语言特有的管道channel，通过管道channel，可以实现不同的goroute之间的相互通信\n- 函数返回多个值（实例代码）\n- 新的创新：比如切片slice，延时执行defer等\n\n### 2.6 Hello Go\n\n我们写一个最简单的入门代码，在控制台输出hello go！\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello golang\")\n}\n```\n\n> 运行\n\n```sh\nhj@DESKTOP-FBLS07J:~/work/golang/day01$ go run main.go \nhello golang\n```\n\n![image-20240510115729354](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115729354.png)\n\n### 2.7 Golang执行流程分析\n\n我们可以通过以下命令来进行操作\n\n- go build hello.go    -> hello.exe\n- go  run  hello.go\n\n![image-20200718161111596](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718161111596.png)\n\n#### 2.7.1 两种执行流程分析\n\n- 如果我们先编译`生成了可执行文件`，那么我们可以将该可执行文件拷贝到`没有go开发环境的机器上，然可以运行`\n- 如果我们是直接`go run go源代码`，那么如果要在`另外一个机器上`这么运行，`也需要go开发环境`，否则无法执行。\n- 在编译时，编译器会将程序运行依赖的库文件包含在可执行文件中，所以，可执行文件变大了很多。\n\n#### 2.7.2 什么是编译\n\n- 有了go源文件，通过编译器将其编译成机器可以识别的二进制码文件。\n- 在该源文件目录下，通过go build 对hello.go文件进行编译。可以指定生成的可执行文件名，在windows下必须是.exe后缀。\n- 如果程序没有错误，没有任何提示，会在当前目录下会出现一个可执行文件（windows下是.exe Linux下是一个可执行文件），该文件是二进制码文件，也是可以执行的程序。\n- 如果程序有错误，编译时，会在错误的那行报错。\n\n> 让我们来看下如何编写 Go 代码并执行它。步骤如下：\n\n1. 打开编辑器如Sublime2，将以上代码添加到编辑器中。\n\n2. 将以上代码保存为 *hello.go*\n\n3. 打开命令行，并进入程序文件保存的目录中。\n\n4. 输入命令 *go run hello.go* 并按回车执行代码。\n\n5. 如果操作正确你将在屏幕上看到 *\"Hello World!\"* 字样的输出。\n\n   ```go\n   $ go run hello.go\n   Hello, World!\n   ```\n\n6. 我们还可以使用 **go build** 命令来生成二进制文件：\n\n   ```go\n   $ go build hello.go \n   $ ls\n   hello    hello.go\n   $ ./hello \n   Hello, World!\n   ```\n\n### 2.8 Go语言开发注意事项\n\n- Go源文件以“go”为扩展名\n- Go应用程序的执行入口是main()方法\n- Go语言严格区分大小写。\n- Go方法由一条条语句构成，每个语句后不需要分号（Go语言会在每行后自动加分号），这也体现出Golang的简洁性。\n- Go编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则报错\n- Go语言定义的变量或者import的包如果没有使用到，代码不能编译通过\n- 大括号都是成对出现的，缺一不可。\n\n### 2.9 Go语言中的转义字符\n\nGoLang常用的转义字符（escape char）\n\n- \\t：一个制表位，实现对齐的功能\n- \\n：换行符\n- \\\\：一个\\\n- \\r：一个回车","source":"_posts/Golang发展史.md","raw":"---\ntitle: Go语言发展史\ndate: 2024-11-10 23:53:58\ntags:\n  - Golang\ncategories: \n  - 运维开发\n  - 云原生\n---\n## 2.Go语言发展简史\n\n### 2.1 开发文档\n\nhttps://studygolang.com/pkgdoc\n\n### 2.2 Go语言核心开发团队\n\nKen Thompson（肯·汤普森）：1983年图灵奖（Turing Award）和1998年美国国家技术奖（National Medal of Technology）得主。他与Dennis Ritchie是Unix的原创者。Thompson也发明了后来衍生出C语言的B程序语言，同时也是C语言的主要发明人。\n\nRob Pike（罗布-派克）：曾是贝尔实验室（Bell Labs）的Unix团队，和Plan 9操作系统计划的成员。\n他与Thompson共事多年，并共创出广泛使用的UTF-8字元编码。\n\nRobert Griesemer：曾协助制作Java的HotSpot编译器，和Chrome浏览器的JavaScript引擎V8\n\n![image-20200718103112309](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718103112309.png)\n\n\n\n### 2.3 Google为什么要创建Go\n\n- 计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多CPU的优势提升软件系统性能。\n- 软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。\n  - 现有编程语言存在：风格不统一、计算能力不够、处理大并发不够好\n- 企业运行维护很多c/c++的项目，c/c++程序运行速度虽然很快，但是编译速度确很慢，同时还存在内存泄漏的一系列的困扰需要解决。\n\n\n\n### 2.4 Go语言发展历史\n\n- 2007年，谷歌工程师Rob Pike，Ken Thompson和Robert Griesemer开始设计一门全新的语言，这是Go语言的最初原型。\n- 2009年11月10日，Google将Go语言以开放源代码的方式向全球发布。\n- 2015年8月19日，Go1.5版发布，本次更新中移除了”最后残余的c代码”\n- 2017年2月17日，Go语言Go1.8版发布。\n- 2017年8月24日，Go语言Go1.9版发布。\n- 2018年2月16日，Go语言Go1.10版发布。\n\n### 2.5 Go语言的特点\n\nGo语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率，使用一个表达式来形容Go语言：Go=C+Python，说明Go语言既有C静态语言程序的运行速度，又能达到Python动态语言的快速开发。\n\n- 从c语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等等，也保留了和C语言一样的编译执行方式及弱化的指针。\n\n```go\n// go语言的指针使用特点\nfunc testPtr(num *int)  {\n\t*num = 20\n}\n```\n\n- 引入包的概念，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在。\n- 垃圾回收机制，内存自动回收，不需开发人员管理 【稍微不注意就会出现内存泄漏】\n- 天然并发【重要特点】\n  - 从语言层面支持并发，实现简单\n  - goroutine，轻量级线程，可实现大并发处理，高效利用多核。\n  - 基于CPS并发模型（Communicating Sequential Processes）实现\n- 吸收了管道通信机制，形成go语言特有的管道channel，通过管道channel，可以实现不同的goroute之间的相互通信\n- 函数返回多个值（实例代码）\n- 新的创新：比如切片slice，延时执行defer等\n\n### 2.6 Hello Go\n\n我们写一个最简单的入门代码，在控制台输出hello go！\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tfmt.Println(\"hello golang\")\n}\n```\n\n> 运行\n\n```sh\nhj@DESKTOP-FBLS07J:~/work/golang/day01$ go run main.go \nhello golang\n```\n\n![image-20240510115729354](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115729354.png)\n\n### 2.7 Golang执行流程分析\n\n我们可以通过以下命令来进行操作\n\n- go build hello.go    -> hello.exe\n- go  run  hello.go\n\n![image-20200718161111596](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718161111596.png)\n\n#### 2.7.1 两种执行流程分析\n\n- 如果我们先编译`生成了可执行文件`，那么我们可以将该可执行文件拷贝到`没有go开发环境的机器上，然可以运行`\n- 如果我们是直接`go run go源代码`，那么如果要在`另外一个机器上`这么运行，`也需要go开发环境`，否则无法执行。\n- 在编译时，编译器会将程序运行依赖的库文件包含在可执行文件中，所以，可执行文件变大了很多。\n\n#### 2.7.2 什么是编译\n\n- 有了go源文件，通过编译器将其编译成机器可以识别的二进制码文件。\n- 在该源文件目录下，通过go build 对hello.go文件进行编译。可以指定生成的可执行文件名，在windows下必须是.exe后缀。\n- 如果程序没有错误，没有任何提示，会在当前目录下会出现一个可执行文件（windows下是.exe Linux下是一个可执行文件），该文件是二进制码文件，也是可以执行的程序。\n- 如果程序有错误，编译时，会在错误的那行报错。\n\n> 让我们来看下如何编写 Go 代码并执行它。步骤如下：\n\n1. 打开编辑器如Sublime2，将以上代码添加到编辑器中。\n\n2. 将以上代码保存为 *hello.go*\n\n3. 打开命令行，并进入程序文件保存的目录中。\n\n4. 输入命令 *go run hello.go* 并按回车执行代码。\n\n5. 如果操作正确你将在屏幕上看到 *\"Hello World!\"* 字样的输出。\n\n   ```go\n   $ go run hello.go\n   Hello, World!\n   ```\n\n6. 我们还可以使用 **go build** 命令来生成二进制文件：\n\n   ```go\n   $ go build hello.go \n   $ ls\n   hello    hello.go\n   $ ./hello \n   Hello, World!\n   ```\n\n### 2.8 Go语言开发注意事项\n\n- Go源文件以“go”为扩展名\n- Go应用程序的执行入口是main()方法\n- Go语言严格区分大小写。\n- Go方法由一条条语句构成，每个语句后不需要分号（Go语言会在每行后自动加分号），这也体现出Golang的简洁性。\n- Go编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则报错\n- Go语言定义的变量或者import的包如果没有使用到，代码不能编译通过\n- 大括号都是成对出现的，缺一不可。\n\n### 2.9 Go语言中的转义字符\n\nGoLang常用的转义字符（escape char）\n\n- \\t：一个制表位，实现对齐的功能\n- \\n：换行符\n- \\\\：一个\\\n- \\r：一个回车","slug":"Golang发展史","published":1,"updated":"2024-11-11T12:27:45.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm3d099fq0001e1mj00pa5rcm","content":"<h2 id=\"2-Go语言发展简史\"><a href=\"#2-Go语言发展简史\" class=\"headerlink\" title=\"2.Go语言发展简史\"></a>2.Go语言发展简史</h2><h3 id=\"2-1-开发文档\"><a href=\"#2-1-开发文档\" class=\"headerlink\" title=\"2.1 开发文档\"></a>2.1 开发文档</h3><p><a href=\"https://studygolang.com/pkgdoc\">https://studygolang.com/pkgdoc</a></p>\n<h3 id=\"2-2-Go语言核心开发团队\"><a href=\"#2-2-Go语言核心开发团队\" class=\"headerlink\" title=\"2.2 Go语言核心开发团队\"></a>2.2 Go语言核心开发团队</h3><p>Ken Thompson（肯·汤普森）：1983年图灵奖（Turing Award）和1998年美国国家技术奖（National Medal of Technology）得主。他与Dennis Ritchie是Unix的原创者。Thompson也发明了后来衍生出C语言的B程序语言，同时也是C语言的主要发明人。</p>\n<p>Rob Pike（罗布-派克）：曾是贝尔实验室（Bell Labs）的Unix团队，和Plan 9操作系统计划的成员。<br>他与Thompson共事多年，并共创出广泛使用的UTF-8字元编码。</p>\n<p>Robert Griesemer：曾协助制作Java的HotSpot编译器，和Chrome浏览器的JavaScript引擎V8</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718103112309.png\" alt=\"image-20200718103112309\"></p>\n<h3 id=\"2-3-Google为什么要创建Go\"><a href=\"#2-3-Google为什么要创建Go\" class=\"headerlink\" title=\"2.3 Google为什么要创建Go\"></a>2.3 Google为什么要创建Go</h3><ul>\n<li>计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多CPU的优势提升软件系统性能。</li>\n<li>软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。<ul>\n<li>现有编程语言存在：风格不统一、计算能力不够、处理大并发不够好</li>\n</ul>\n</li>\n<li>企业运行维护很多c&#x2F;c++的项目，c&#x2F;c++程序运行速度虽然很快，但是编译速度确很慢，同时还存在内存泄漏的一系列的困扰需要解决。</li>\n</ul>\n<h3 id=\"2-4-Go语言发展历史\"><a href=\"#2-4-Go语言发展历史\" class=\"headerlink\" title=\"2.4 Go语言发展历史\"></a>2.4 Go语言发展历史</h3><ul>\n<li>2007年，谷歌工程师Rob Pike，Ken Thompson和Robert Griesemer开始设计一门全新的语言，这是Go语言的最初原型。</li>\n<li>2009年11月10日，Google将Go语言以开放源代码的方式向全球发布。</li>\n<li>2015年8月19日，Go1.5版发布，本次更新中移除了”最后残余的c代码”</li>\n<li>2017年2月17日，Go语言Go1.8版发布。</li>\n<li>2017年8月24日，Go语言Go1.9版发布。</li>\n<li>2018年2月16日，Go语言Go1.10版发布。</li>\n</ul>\n<h3 id=\"2-5-Go语言的特点\"><a href=\"#2-5-Go语言的特点\" class=\"headerlink\" title=\"2.5 Go语言的特点\"></a>2.5 Go语言的特点</h3><p>Go语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率，使用一个表达式来形容Go语言：Go&#x3D;C+Python，说明Go语言既有C静态语言程序的运行速度，又能达到Python动态语言的快速开发。</p>\n<ul>\n<li>从c语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等等，也保留了和C语言一样的编译执行方式及弱化的指针。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// go语言的指针使用特点</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">testPtr</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">*</span>num <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>引入包的概念，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在。</li>\n<li>垃圾回收机制，内存自动回收，不需开发人员管理 【稍微不注意就会出现内存泄漏】</li>\n<li>天然并发【重要特点】<ul>\n<li>从语言层面支持并发，实现简单</li>\n<li>goroutine，轻量级线程，可实现大并发处理，高效利用多核。</li>\n<li>基于CPS并发模型（Communicating Sequential Processes）实现</li>\n</ul>\n</li>\n<li>吸收了管道通信机制，形成go语言特有的管道channel，通过管道channel，可以实现不同的goroute之间的相互通信</li>\n<li>函数返回多个值（实例代码）</li>\n<li>新的创新：比如切片slice，延时执行defer等</li>\n</ul>\n<h3 id=\"2-6-Hello-Go\"><a href=\"#2-6-Hello-Go\" class=\"headerlink\" title=\"2.6 Hello Go\"></a>2.6 Hello Go</h3><p>我们写一个最简单的入门代码，在控制台输出hello go！</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello golang\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>运行</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hj@DESKTOP-FBLS07J:~/work/golang/day01$ go run main.go \nhello golang<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115729354.png\" alt=\"image-20240510115729354\"></p>\n<h3 id=\"2-7-Golang执行流程分析\"><a href=\"#2-7-Golang执行流程分析\" class=\"headerlink\" title=\"2.7 Golang执行流程分析\"></a>2.7 Golang执行流程分析</h3><p>我们可以通过以下命令来进行操作</p>\n<ul>\n<li>go build hello.go    -&gt; hello.exe</li>\n<li>go  run  hello.go</li>\n</ul>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718161111596.png\" alt=\"image-20200718161111596\"></p>\n<h4 id=\"2-7-1-两种执行流程分析\"><a href=\"#2-7-1-两种执行流程分析\" class=\"headerlink\" title=\"2.7.1 两种执行流程分析\"></a>2.7.1 两种执行流程分析</h4><ul>\n<li>如果我们先编译<code>生成了可执行文件</code>，那么我们可以将该可执行文件拷贝到<code>没有go开发环境的机器上，然可以运行</code></li>\n<li>如果我们是直接<code>go run go源代码</code>，那么如果要在<code>另外一个机器上</code>这么运行，<code>也需要go开发环境</code>，否则无法执行。</li>\n<li>在编译时，编译器会将程序运行依赖的库文件包含在可执行文件中，所以，可执行文件变大了很多。</li>\n</ul>\n<h4 id=\"2-7-2-什么是编译\"><a href=\"#2-7-2-什么是编译\" class=\"headerlink\" title=\"2.7.2 什么是编译\"></a>2.7.2 什么是编译</h4><ul>\n<li>有了go源文件，通过编译器将其编译成机器可以识别的二进制码文件。</li>\n<li>在该源文件目录下，通过go build 对hello.go文件进行编译。可以指定生成的可执行文件名，在windows下必须是.exe后缀。</li>\n<li>如果程序没有错误，没有任何提示，会在当前目录下会出现一个可执行文件（windows下是.exe Linux下是一个可执行文件），该文件是二进制码文件，也是可以执行的程序。</li>\n<li>如果程序有错误，编译时，会在错误的那行报错。</li>\n</ul>\n<blockquote>\n<p>让我们来看下如何编写 Go 代码并执行它。步骤如下：</p>\n</blockquote>\n<ol>\n<li><p>打开编辑器如Sublime2，将以上代码添加到编辑器中。</p>\n</li>\n<li><p>将以上代码保存为 <em>hello.go</em></p>\n</li>\n<li><p>打开命令行，并进入程序文件保存的目录中。</p>\n</li>\n<li><p>输入命令 <em>go run hello.go</em> 并按回车执行代码。</p>\n</li>\n<li><p>如果操作正确你将在屏幕上看到 <em>“Hello World!”</em> 字样的输出。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">$ <span class=\"token keyword\">go</span> run hello<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\nHello<span class=\"token punctuation\">,</span> World<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>我们还可以使用 <strong>go build</strong> 命令来生成二进制文件：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">$ <span class=\"token keyword\">go</span> build hello<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span> \n$ ls\nhello    hello<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\n$ <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>hello \nHello<span class=\"token punctuation\">,</span> World<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"2-8-Go语言开发注意事项\"><a href=\"#2-8-Go语言开发注意事项\" class=\"headerlink\" title=\"2.8 Go语言开发注意事项\"></a>2.8 Go语言开发注意事项</h3><ul>\n<li>Go源文件以“go”为扩展名</li>\n<li>Go应用程序的执行入口是main()方法</li>\n<li>Go语言严格区分大小写。</li>\n<li>Go方法由一条条语句构成，每个语句后不需要分号（Go语言会在每行后自动加分号），这也体现出Golang的简洁性。</li>\n<li>Go编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则报错</li>\n<li>Go语言定义的变量或者import的包如果没有使用到，代码不能编译通过</li>\n<li>大括号都是成对出现的，缺一不可。</li>\n</ul>\n<h3 id=\"2-9-Go语言中的转义字符\"><a href=\"#2-9-Go语言中的转义字符\" class=\"headerlink\" title=\"2.9 Go语言中的转义字符\"></a>2.9 Go语言中的转义字符</h3><p>GoLang常用的转义字符（escape char）</p>\n<ul>\n<li>\\t：一个制表位，实现对齐的功能</li>\n<li>\\n：换行符</li>\n<li>\\：一个\\</li>\n<li>\\r：一个回车</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"2-Go语言发展简史\"><a href=\"#2-Go语言发展简史\" class=\"headerlink\" title=\"2.Go语言发展简史\"></a>2.Go语言发展简史</h2><h3 id=\"2-1-开发文档\"><a href=\"#2-1-开发文档\" class=\"headerlink\" title=\"2.1 开发文档\"></a>2.1 开发文档</h3><p><a href=\"https://studygolang.com/pkgdoc\">https://studygolang.com/pkgdoc</a></p>\n<h3 id=\"2-2-Go语言核心开发团队\"><a href=\"#2-2-Go语言核心开发团队\" class=\"headerlink\" title=\"2.2 Go语言核心开发团队\"></a>2.2 Go语言核心开发团队</h3><p>Ken Thompson（肯·汤普森）：1983年图灵奖（Turing Award）和1998年美国国家技术奖（National Medal of Technology）得主。他与Dennis Ritchie是Unix的原创者。Thompson也发明了后来衍生出C语言的B程序语言，同时也是C语言的主要发明人。</p>\n<p>Rob Pike（罗布-派克）：曾是贝尔实验室（Bell Labs）的Unix团队，和Plan 9操作系统计划的成员。<br>他与Thompson共事多年，并共创出广泛使用的UTF-8字元编码。</p>\n<p>Robert Griesemer：曾协助制作Java的HotSpot编译器，和Chrome浏览器的JavaScript引擎V8</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718103112309.png\" alt=\"image-20200718103112309\"></p>\n<h3 id=\"2-3-Google为什么要创建Go\"><a href=\"#2-3-Google为什么要创建Go\" class=\"headerlink\" title=\"2.3 Google为什么要创建Go\"></a>2.3 Google为什么要创建Go</h3><ul>\n<li>计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多CPU的优势提升软件系统性能。</li>\n<li>软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。<ul>\n<li>现有编程语言存在：风格不统一、计算能力不够、处理大并发不够好</li>\n</ul>\n</li>\n<li>企业运行维护很多c&#x2F;c++的项目，c&#x2F;c++程序运行速度虽然很快，但是编译速度确很慢，同时还存在内存泄漏的一系列的困扰需要解决。</li>\n</ul>\n<h3 id=\"2-4-Go语言发展历史\"><a href=\"#2-4-Go语言发展历史\" class=\"headerlink\" title=\"2.4 Go语言发展历史\"></a>2.4 Go语言发展历史</h3><ul>\n<li>2007年，谷歌工程师Rob Pike，Ken Thompson和Robert Griesemer开始设计一门全新的语言，这是Go语言的最初原型。</li>\n<li>2009年11月10日，Google将Go语言以开放源代码的方式向全球发布。</li>\n<li>2015年8月19日，Go1.5版发布，本次更新中移除了”最后残余的c代码”</li>\n<li>2017年2月17日，Go语言Go1.8版发布。</li>\n<li>2017年8月24日，Go语言Go1.9版发布。</li>\n<li>2018年2月16日，Go语言Go1.10版发布。</li>\n</ul>\n<h3 id=\"2-5-Go语言的特点\"><a href=\"#2-5-Go语言的特点\" class=\"headerlink\" title=\"2.5 Go语言的特点\"></a>2.5 Go语言的特点</h3><p>Go语言保证了既能到达静态编译语言的安全和性能，又达到了动态语言开发维护的高效率，使用一个表达式来形容Go语言：Go&#x3D;C+Python，说明Go语言既有C静态语言程序的运行速度，又能达到Python动态语言的快速开发。</p>\n<ul>\n<li>从c语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等等，也保留了和C语言一样的编译执行方式及弱化的指针。</li>\n</ul>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// go语言的指针使用特点</span>\n<span class=\"token keyword\">func</span> <span class=\"token function\">testPtr</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">*</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token operator\">*</span>num <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>引入包的概念，用于组织程序结构，Go语言的一个文件都要归属于一个包，而不能单独存在。</li>\n<li>垃圾回收机制，内存自动回收，不需开发人员管理 【稍微不注意就会出现内存泄漏】</li>\n<li>天然并发【重要特点】<ul>\n<li>从语言层面支持并发，实现简单</li>\n<li>goroutine，轻量级线程，可实现大并发处理，高效利用多核。</li>\n<li>基于CPS并发模型（Communicating Sequential Processes）实现</li>\n</ul>\n</li>\n<li>吸收了管道通信机制，形成go语言特有的管道channel，通过管道channel，可以实现不同的goroute之间的相互通信</li>\n<li>函数返回多个值（实例代码）</li>\n<li>新的创新：比如切片slice，延时执行defer等</li>\n</ul>\n<h3 id=\"2-6-Hello-Go\"><a href=\"#2-6-Hello-Go\" class=\"headerlink\" title=\"2.6 Hello Go\"></a>2.6 Hello Go</h3><p>我们写一个最简单的入门代码，在控制台输出hello go！</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello golang\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>运行</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hj@DESKTOP-FBLS07J:~/work/golang/day01$ go run main.go \nhello golang<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115729354.png\" alt=\"image-20240510115729354\"></p>\n<h3 id=\"2-7-Golang执行流程分析\"><a href=\"#2-7-Golang执行流程分析\" class=\"headerlink\" title=\"2.7 Golang执行流程分析\"></a>2.7 Golang执行流程分析</h3><p>我们可以通过以下命令来进行操作</p>\n<ul>\n<li>go build hello.go    -&gt; hello.exe</li>\n<li>go  run  hello.go</li>\n</ul>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718161111596.png\" alt=\"image-20200718161111596\"></p>\n<h4 id=\"2-7-1-两种执行流程分析\"><a href=\"#2-7-1-两种执行流程分析\" class=\"headerlink\" title=\"2.7.1 两种执行流程分析\"></a>2.7.1 两种执行流程分析</h4><ul>\n<li>如果我们先编译<code>生成了可执行文件</code>，那么我们可以将该可执行文件拷贝到<code>没有go开发环境的机器上，然可以运行</code></li>\n<li>如果我们是直接<code>go run go源代码</code>，那么如果要在<code>另外一个机器上</code>这么运行，<code>也需要go开发环境</code>，否则无法执行。</li>\n<li>在编译时，编译器会将程序运行依赖的库文件包含在可执行文件中，所以，可执行文件变大了很多。</li>\n</ul>\n<h4 id=\"2-7-2-什么是编译\"><a href=\"#2-7-2-什么是编译\" class=\"headerlink\" title=\"2.7.2 什么是编译\"></a>2.7.2 什么是编译</h4><ul>\n<li>有了go源文件，通过编译器将其编译成机器可以识别的二进制码文件。</li>\n<li>在该源文件目录下，通过go build 对hello.go文件进行编译。可以指定生成的可执行文件名，在windows下必须是.exe后缀。</li>\n<li>如果程序没有错误，没有任何提示，会在当前目录下会出现一个可执行文件（windows下是.exe Linux下是一个可执行文件），该文件是二进制码文件，也是可以执行的程序。</li>\n<li>如果程序有错误，编译时，会在错误的那行报错。</li>\n</ul>\n<blockquote>\n<p>让我们来看下如何编写 Go 代码并执行它。步骤如下：</p>\n</blockquote>\n<ol>\n<li><p>打开编辑器如Sublime2，将以上代码添加到编辑器中。</p>\n</li>\n<li><p>将以上代码保存为 <em>hello.go</em></p>\n</li>\n<li><p>打开命令行，并进入程序文件保存的目录中。</p>\n</li>\n<li><p>输入命令 <em>go run hello.go</em> 并按回车执行代码。</p>\n</li>\n<li><p>如果操作正确你将在屏幕上看到 <em>“Hello World!”</em> 字样的输出。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">$ <span class=\"token keyword\">go</span> run hello<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\nHello<span class=\"token punctuation\">,</span> World<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n</li>\n<li><p>我们还可以使用 <strong>go build</strong> 命令来生成二进制文件：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">$ <span class=\"token keyword\">go</span> build hello<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span> \n$ ls\nhello    hello<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span>\n$ <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>hello \nHello<span class=\"token punctuation\">,</span> World<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ol>\n<h3 id=\"2-8-Go语言开发注意事项\"><a href=\"#2-8-Go语言开发注意事项\" class=\"headerlink\" title=\"2.8 Go语言开发注意事项\"></a>2.8 Go语言开发注意事项</h3><ul>\n<li>Go源文件以“go”为扩展名</li>\n<li>Go应用程序的执行入口是main()方法</li>\n<li>Go语言严格区分大小写。</li>\n<li>Go方法由一条条语句构成，每个语句后不需要分号（Go语言会在每行后自动加分号），这也体现出Golang的简洁性。</li>\n<li>Go编译器是一行行进行编译的，因此我们一行就写一条语句，不能把多条语句写在同一个，否则报错</li>\n<li>Go语言定义的变量或者import的包如果没有使用到，代码不能编译通过</li>\n<li>大括号都是成对出现的，缺一不可。</li>\n</ul>\n<h3 id=\"2-9-Go语言中的转义字符\"><a href=\"#2-9-Go语言中的转义字符\" class=\"headerlink\" title=\"2.9 Go语言中的转义字符\"></a>2.9 Go语言中的转义字符</h3><p>GoLang常用的转义字符（escape char）</p>\n<ul>\n<li>\\t：一个制表位，实现对齐的功能</li>\n<li>\\n：换行符</li>\n<li>\\：一个\\</li>\n<li>\\r：一个回车</li>\n</ul>\n"},{"title":"Golang基础环境配置","date":"2024-11-10T15:47:18.000Z","_content":"## 1.Go环境安装\n\n这阵子因为以后工作的原因，所以开始了go语言的学习之旅，工欲善其事必先利其器，首先就得把go语言环境搭建完成\n\n这里我看视屏是IT大地老师的课程:https://www.bilibili.com/video/BV14T4y1g7h9/?spm_id_from=333.337.search-card.all.click\n\n马哥教育也一块汇总到此\n\n### 1.1 Windows下Go语言的安装\n\n> 下载Go\n\n因为go语言的官网经常打不开，所以我就找了一个 [镜像网站](https://studygolang.com/dl)，里面有很多版本的Go语言，选择自己合适的，比如我的是Windows电脑，所以我选中里面的Windows版本的\n\n![image-20200718111751694](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111751694.png)\n\n下载完成是一个安装文件，我们需要进行安装，同时需要注意的就是安装目录，因为事后还需要配置环境变量，下面是安装成功后的图片\n\n![image-20200718111822269](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111822269.png)\n\n> 配置环境变量\n\n根据windows系统在查找可执行程序的原理，可以将Go所在路径定义到环境变量中，让系统帮我们去找运行的执行程序，这样在任何目录下都可以执行go指令，需要配置的环境变量有：\n\n| 环境变量 | 说明              |\n| -------- | ----------------- |\n| GOROOT   | 指定SDK的安装目录 |\n| Path     | 添加SDK的/binmulu |\n| GOPATH   | 工作目录          |\n\n首先我们需要打开我们的环境变量，然后添加上GOROOT\n\n![image-20200718151418230](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151418230.png)\n\n然后我们在PATH上添加我们的bin目录\n\n![image-20200718151503318](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151503318.png)\n\n添加完成后，我们输入下面的命令，查看是否配置成功\n\n```sh\ngo version\n```\n\n![image-20240510113522780](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510113522780.png)\n\n### 1.2 linux下Go语言的安装\n\n这里我使用的是windows的wsl2子系统，安装方法通用\n\n> 1、找到[linux](https://so.csdn.net/so/search?q=linux&spm=1001.2101.3001.7020) 版本go包 （[Downloads - The Go Programming Language](https://golang.google.cn/dl/)）\n\n这里可以直接去官网下载后再上传到服务器\n\n> 这里直接使用wget 拉取下载\n\n```sh\nwget https://dl.google.com/go/go1.22.3.linux-amd64.tar.gz\n```\n\n> 2、解压到/usr/local （官方推荐）\n\n```sh\ntar -zxvf go1.22.3.linux-amd64.tar.gz -C /usr/local\n```\n\n> 3、添加到环境变量\n\n```sh\n# 习惯用vim，没有的话可以用命令`sudo apt-get install vim`安装一个\nvim /etc/profile\n# 在最后一行添加\n# Golang 环境变量设置\nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin\n# 保存退出后source一下（vim 的使用方法可以自己搜索一下）\nsource /etc/profile\n```\n\n> 4、查看是否安装成功\n\n![image-20240510114728267](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510114728267.png)\n\n### 1.3 Visual Studio Code 安装\n\n官网：[Visual Studio Code - Code Editing. Redefined](https://code.visualstudio.com/)\n\n> 安装go插件\n\n![image-20240510115058408](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115058408.png)\n\n> 解决VSCode安装Go tools失败的问题\n\n**测试环境**\n\n```sh\nhj@DESKTOP-FBLS07J:~$ go version\ngo version go1.22.3 linux/amd64\n```\n\n安装Go后，打开VS Code，按照提示安装了微软官方的GO插件。但在安装go tools时，出现了下面的一大堆错误（日志）。\n\n> 主要提示以下错误\n\n```powershell\nThe “gopls“ command is not available. Use “go get -v golang.org/x/tools/cmd/gopls“ to install.解决\n```\n\n**解决方案**\n\n```sh\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n\n![image-20240509194134014](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240509194134014.png)\n\n设置完成后重启VS Code，按照提示安装即可。\n\n参考https://l2m2.top/2020/05/26/2020-05-26-fix-golang-tools-failed-on-vscode/","source":"_posts/Golang基础环境配置.md","raw":"---\ntitle: Golang基础环境配置\ndate: 2024-11-10 23:47:18\ntags:\n  - Golang\ncategories: \n  - 运维开发\n  - 云原生\n---\n## 1.Go环境安装\n\n这阵子因为以后工作的原因，所以开始了go语言的学习之旅，工欲善其事必先利其器，首先就得把go语言环境搭建完成\n\n这里我看视屏是IT大地老师的课程:https://www.bilibili.com/video/BV14T4y1g7h9/?spm_id_from=333.337.search-card.all.click\n\n马哥教育也一块汇总到此\n\n### 1.1 Windows下Go语言的安装\n\n> 下载Go\n\n因为go语言的官网经常打不开，所以我就找了一个 [镜像网站](https://studygolang.com/dl)，里面有很多版本的Go语言，选择自己合适的，比如我的是Windows电脑，所以我选中里面的Windows版本的\n\n![image-20200718111751694](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111751694.png)\n\n下载完成是一个安装文件，我们需要进行安装，同时需要注意的就是安装目录，因为事后还需要配置环境变量，下面是安装成功后的图片\n\n![image-20200718111822269](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111822269.png)\n\n> 配置环境变量\n\n根据windows系统在查找可执行程序的原理，可以将Go所在路径定义到环境变量中，让系统帮我们去找运行的执行程序，这样在任何目录下都可以执行go指令，需要配置的环境变量有：\n\n| 环境变量 | 说明              |\n| -------- | ----------------- |\n| GOROOT   | 指定SDK的安装目录 |\n| Path     | 添加SDK的/binmulu |\n| GOPATH   | 工作目录          |\n\n首先我们需要打开我们的环境变量，然后添加上GOROOT\n\n![image-20200718151418230](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151418230.png)\n\n然后我们在PATH上添加我们的bin目录\n\n![image-20200718151503318](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151503318.png)\n\n添加完成后，我们输入下面的命令，查看是否配置成功\n\n```sh\ngo version\n```\n\n![image-20240510113522780](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510113522780.png)\n\n### 1.2 linux下Go语言的安装\n\n这里我使用的是windows的wsl2子系统，安装方法通用\n\n> 1、找到[linux](https://so.csdn.net/so/search?q=linux&spm=1001.2101.3001.7020) 版本go包 （[Downloads - The Go Programming Language](https://golang.google.cn/dl/)）\n\n这里可以直接去官网下载后再上传到服务器\n\n> 这里直接使用wget 拉取下载\n\n```sh\nwget https://dl.google.com/go/go1.22.3.linux-amd64.tar.gz\n```\n\n> 2、解压到/usr/local （官方推荐）\n\n```sh\ntar -zxvf go1.22.3.linux-amd64.tar.gz -C /usr/local\n```\n\n> 3、添加到环境变量\n\n```sh\n# 习惯用vim，没有的话可以用命令`sudo apt-get install vim`安装一个\nvim /etc/profile\n# 在最后一行添加\n# Golang 环境变量设置\nexport GOROOT=/usr/local/go\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOROOT/bin:$GOPATH/bin\n# 保存退出后source一下（vim 的使用方法可以自己搜索一下）\nsource /etc/profile\n```\n\n> 4、查看是否安装成功\n\n![image-20240510114728267](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510114728267.png)\n\n### 1.3 Visual Studio Code 安装\n\n官网：[Visual Studio Code - Code Editing. Redefined](https://code.visualstudio.com/)\n\n> 安装go插件\n\n![image-20240510115058408](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115058408.png)\n\n> 解决VSCode安装Go tools失败的问题\n\n**测试环境**\n\n```sh\nhj@DESKTOP-FBLS07J:~$ go version\ngo version go1.22.3 linux/amd64\n```\n\n安装Go后，打开VS Code，按照提示安装了微软官方的GO插件。但在安装go tools时，出现了下面的一大堆错误（日志）。\n\n> 主要提示以下错误\n\n```powershell\nThe “gopls“ command is not available. Use “go get -v golang.org/x/tools/cmd/gopls“ to install.解决\n```\n\n**解决方案**\n\n```sh\ngo env -w GO111MODULE=on\ngo env -w GOPROXY=https://goproxy.io,direct\n```\n\n![image-20240509194134014](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240509194134014.png)\n\n设置完成后重启VS Code，按照提示安装即可。\n\n参考https://l2m2.top/2020/05/26/2020-05-26-fix-golang-tools-failed-on-vscode/","slug":"Golang基础环境配置","published":1,"updated":"2024-11-11T12:27:45.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm3d099fv0003e1mj53exf0pw","content":"<h2 id=\"1-Go环境安装\"><a href=\"#1-Go环境安装\" class=\"headerlink\" title=\"1.Go环境安装\"></a>1.Go环境安装</h2><p>这阵子因为以后工作的原因，所以开始了go语言的学习之旅，工欲善其事必先利其器，首先就得把go语言环境搭建完成</p>\n<p>这里我看视屏是IT大地老师的课程:<a href=\"https://www.bilibili.com/video/BV14T4y1g7h9/?spm_id_from=333.337.search-card.all.click\">https://www.bilibili.com/video/BV14T4y1g7h9/?spm_id_from=333.337.search-card.all.click</a></p>\n<p>马哥教育也一块汇总到此</p>\n<h3 id=\"1-1-Windows下Go语言的安装\"><a href=\"#1-1-Windows下Go语言的安装\" class=\"headerlink\" title=\"1.1 Windows下Go语言的安装\"></a>1.1 Windows下Go语言的安装</h3><blockquote>\n<p>下载Go</p>\n</blockquote>\n<p>因为go语言的官网经常打不开，所以我就找了一个 <a href=\"https://studygolang.com/dl\">镜像网站</a>，里面有很多版本的Go语言，选择自己合适的，比如我的是Windows电脑，所以我选中里面的Windows版本的</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111751694.png\" alt=\"image-20200718111751694\"></p>\n<p>下载完成是一个安装文件，我们需要进行安装，同时需要注意的就是安装目录，因为事后还需要配置环境变量，下面是安装成功后的图片</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111822269.png\" alt=\"image-20200718111822269\"></p>\n<blockquote>\n<p>配置环境变量</p>\n</blockquote>\n<p>根据windows系统在查找可执行程序的原理，可以将Go所在路径定义到环境变量中，让系统帮我们去找运行的执行程序，这样在任何目录下都可以执行go指令，需要配置的环境变量有：</p>\n<table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GOROOT</td>\n<td>指定SDK的安装目录</td>\n</tr>\n<tr>\n<td>Path</td>\n<td>添加SDK的&#x2F;binmulu</td>\n</tr>\n<tr>\n<td>GOPATH</td>\n<td>工作目录</td>\n</tr>\n</tbody></table>\n<p>首先我们需要打开我们的环境变量，然后添加上GOROOT</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151418230.png\" alt=\"image-20200718151418230\"></p>\n<p>然后我们在PATH上添加我们的bin目录</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151503318.png\" alt=\"image-20200718151503318\"></p>\n<p>添加完成后，我们输入下面的命令，查看是否配置成功</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510113522780.png\" alt=\"image-20240510113522780\"></p>\n<h3 id=\"1-2-linux下Go语言的安装\"><a href=\"#1-2-linux下Go语言的安装\" class=\"headerlink\" title=\"1.2 linux下Go语言的安装\"></a>1.2 linux下Go语言的安装</h3><p>这里我使用的是windows的wsl2子系统，安装方法通用</p>\n<blockquote>\n<p>1、找到<a href=\"https://so.csdn.net/so/search?q=linux&spm=1001.2101.3001.7020\">linux</a> 版本go包 （<a href=\"https://golang.google.cn/dl/\">Downloads - The Go Programming Language</a>）</p>\n</blockquote>\n<p>这里可以直接去官网下载后再上传到服务器</p>\n<blockquote>\n<p>这里直接使用wget 拉取下载</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://dl.google.com/go/go1.22.3.linux-amd64.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>2、解压到&#x2F;usr&#x2F;local （官方推荐）</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> go1.22.3.linux-amd64.tar.gz <span class=\"token parameter variable\">-C</span> /usr/local<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>3、添加到环境变量</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 习惯用vim，没有的话可以用命令`sudo apt-get install vim`安装一个</span>\n<span class=\"token function\">vim</span> /etc/profile\n<span class=\"token comment\"># 在最后一行添加</span>\n<span class=\"token comment\"># Golang 环境变量设置</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GOROOT</span><span class=\"token operator\">=</span>/usr/local/go\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GOPATH</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/go\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$GOROOT</span>/bin:<span class=\"token variable\">$GOPATH</span>/bin\n<span class=\"token comment\"># 保存退出后source一下（vim 的使用方法可以自己搜索一下）</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>4、查看是否安装成功</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510114728267.png\" alt=\"image-20240510114728267\"></p>\n<h3 id=\"1-3-Visual-Studio-Code-安装\"><a href=\"#1-3-Visual-Studio-Code-安装\" class=\"headerlink\" title=\"1.3 Visual Studio Code 安装\"></a>1.3 Visual Studio Code 安装</h3><p>官网：<a href=\"https://code.visualstudio.com/\">Visual Studio Code - Code Editing. Redefined</a></p>\n<blockquote>\n<p>安装go插件</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115058408.png\" alt=\"image-20240510115058408\"></p>\n<blockquote>\n<p>解决VSCode安装Go tools失败的问题</p>\n</blockquote>\n<p><strong>测试环境</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hj@DESKTOP-FBLS07J:~$ go version\ngo version go1.22.3 linux/amd64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>安装Go后，打开VS Code，按照提示安装了微软官方的GO插件。但在安装go tools时，出现了下面的一大堆错误（日志）。</p>\n<blockquote>\n<p>主要提示以下错误</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">The “gopls“ command is not available<span class=\"token punctuation\">.</span> Use “go get <span class=\"token operator\">-</span>v golang<span class=\"token punctuation\">.</span>org/x/tools/cmd/gopls“ to install<span class=\"token punctuation\">.</span>解决<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>解决方案</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> <span class=\"token parameter variable\">-w</span> <span class=\"token assign-left variable\">GO111MODULE</span><span class=\"token operator\">=</span>on\ngo <span class=\"token function\">env</span> <span class=\"token parameter variable\">-w</span> <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240509194134014.png\" alt=\"image-20240509194134014\"></p>\n<p>设置完成后重启VS Code，按照提示安装即可。</p>\n<p>参考<a href=\"https://l2m2.top/2020/05/26/2020-05-26-fix-golang-tools-failed-on-vscode/\">https://l2m2.top/2020/05/26/2020-05-26-fix-golang-tools-failed-on-vscode/</a></p>\n","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"1-Go环境安装\"><a href=\"#1-Go环境安装\" class=\"headerlink\" title=\"1.Go环境安装\"></a>1.Go环境安装</h2><p>这阵子因为以后工作的原因，所以开始了go语言的学习之旅，工欲善其事必先利其器，首先就得把go语言环境搭建完成</p>\n<p>这里我看视屏是IT大地老师的课程:<a href=\"https://www.bilibili.com/video/BV14T4y1g7h9/?spm_id_from=333.337.search-card.all.click\">https://www.bilibili.com/video/BV14T4y1g7h9/?spm_id_from=333.337.search-card.all.click</a></p>\n<p>马哥教育也一块汇总到此</p>\n<h3 id=\"1-1-Windows下Go语言的安装\"><a href=\"#1-1-Windows下Go语言的安装\" class=\"headerlink\" title=\"1.1 Windows下Go语言的安装\"></a>1.1 Windows下Go语言的安装</h3><blockquote>\n<p>下载Go</p>\n</blockquote>\n<p>因为go语言的官网经常打不开，所以我就找了一个 <a href=\"https://studygolang.com/dl\">镜像网站</a>，里面有很多版本的Go语言，选择自己合适的，比如我的是Windows电脑，所以我选中里面的Windows版本的</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111751694.png\" alt=\"image-20200718111751694\"></p>\n<p>下载完成是一个安装文件，我们需要进行安装，同时需要注意的就是安装目录，因为事后还需要配置环境变量，下面是安装成功后的图片</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718111822269.png\" alt=\"image-20200718111822269\"></p>\n<blockquote>\n<p>配置环境变量</p>\n</blockquote>\n<p>根据windows系统在查找可执行程序的原理，可以将Go所在路径定义到环境变量中，让系统帮我们去找运行的执行程序，这样在任何目录下都可以执行go指令，需要配置的环境变量有：</p>\n<table>\n<thead>\n<tr>\n<th>环境变量</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GOROOT</td>\n<td>指定SDK的安装目录</td>\n</tr>\n<tr>\n<td>Path</td>\n<td>添加SDK的&#x2F;binmulu</td>\n</tr>\n<tr>\n<td>GOPATH</td>\n<td>工作目录</td>\n</tr>\n</tbody></table>\n<p>首先我们需要打开我们的环境变量，然后添加上GOROOT</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151418230.png\" alt=\"image-20200718151418230\"></p>\n<p>然后我们在PATH上添加我们的bin目录</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20200718151503318.png\" alt=\"image-20200718151503318\"></p>\n<p>添加完成后，我们输入下面的命令，查看是否配置成功</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510113522780.png\" alt=\"image-20240510113522780\"></p>\n<h3 id=\"1-2-linux下Go语言的安装\"><a href=\"#1-2-linux下Go语言的安装\" class=\"headerlink\" title=\"1.2 linux下Go语言的安装\"></a>1.2 linux下Go语言的安装</h3><p>这里我使用的是windows的wsl2子系统，安装方法通用</p>\n<blockquote>\n<p>1、找到<a href=\"https://so.csdn.net/so/search?q=linux&spm=1001.2101.3001.7020\">linux</a> 版本go包 （<a href=\"https://golang.google.cn/dl/\">Downloads - The Go Programming Language</a>）</p>\n</blockquote>\n<p>这里可以直接去官网下载后再上传到服务器</p>\n<blockquote>\n<p>这里直接使用wget 拉取下载</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://dl.google.com/go/go1.22.3.linux-amd64.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>2、解压到&#x2F;usr&#x2F;local （官方推荐）</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> <span class=\"token parameter variable\">-zxvf</span> go1.22.3.linux-amd64.tar.gz <span class=\"token parameter variable\">-C</span> /usr/local<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>3、添加到环境变量</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 习惯用vim，没有的话可以用命令`sudo apt-get install vim`安装一个</span>\n<span class=\"token function\">vim</span> /etc/profile\n<span class=\"token comment\"># 在最后一行添加</span>\n<span class=\"token comment\"># Golang 环境变量设置</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GOROOT</span><span class=\"token operator\">=</span>/usr/local/go\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GOPATH</span><span class=\"token operator\">=</span><span class=\"token environment constant\">$HOME</span>/go\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$GOROOT</span>/bin:<span class=\"token variable\">$GOPATH</span>/bin\n<span class=\"token comment\"># 保存退出后source一下（vim 的使用方法可以自己搜索一下）</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>4、查看是否安装成功</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510114728267.png\" alt=\"image-20240510114728267\"></p>\n<h3 id=\"1-3-Visual-Studio-Code-安装\"><a href=\"#1-3-Visual-Studio-Code-安装\" class=\"headerlink\" title=\"1.3 Visual Studio Code 安装\"></a>1.3 Visual Studio Code 安装</h3><p>官网：<a href=\"https://code.visualstudio.com/\">Visual Studio Code - Code Editing. Redefined</a></p>\n<blockquote>\n<p>安装go插件</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510115058408.png\" alt=\"image-20240510115058408\"></p>\n<blockquote>\n<p>解决VSCode安装Go tools失败的问题</p>\n</blockquote>\n<p><strong>测试环境</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hj@DESKTOP-FBLS07J:~$ go version\ngo version go1.22.3 linux/amd64<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>安装Go后，打开VS Code，按照提示安装了微软官方的GO插件。但在安装go tools时，出现了下面的一大堆错误（日志）。</p>\n<blockquote>\n<p>主要提示以下错误</p>\n</blockquote>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">The “gopls“ command is not available<span class=\"token punctuation\">.</span> Use “go get <span class=\"token operator\">-</span>v golang<span class=\"token punctuation\">.</span>org/x/tools/cmd/gopls“ to install<span class=\"token punctuation\">.</span>解决<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>解决方案</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">go <span class=\"token function\">env</span> <span class=\"token parameter variable\">-w</span> <span class=\"token assign-left variable\">GO111MODULE</span><span class=\"token operator\">=</span>on\ngo <span class=\"token function\">env</span> <span class=\"token parameter variable\">-w</span> <span class=\"token assign-left variable\">GOPROXY</span><span class=\"token operator\">=</span>https://goproxy.io,direct<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240509194134014.png\" alt=\"image-20240509194134014\"></p>\n<p>设置完成后重启VS Code，按照提示安装即可。</p>\n<p>参考<a href=\"https://l2m2.top/2020/05/26/2020-05-26-fix-golang-tools-failed-on-vscode/\">https://l2m2.top/2020/05/26/2020-05-26-fix-golang-tools-failed-on-vscode/</a></p>\n"},{"title":"Go语言中的变量和常量","date":"2024-11-10T15:55:54.000Z","_content":"## 3. Go语言中的变量和常量\n\n### 3.1 Go语言中变量的声明\n\nGo语言变量是由`字母、数字、下划线`组成，其中首个字符不能为数字。Go语言中`关键字和保留字`都不能用作变量名\n\nGo语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n变量声明后，没有初始化，打印出来的是空\n\n### 3.2 如何定义变量\n\n> 方式1：直接声明\n\n```go\nvar name = \"zhangsan\"\n```\n\n> 方式2：带类型\n\n```go\nvar name string = \"zhangsan\"\n```\n\n> 方式3：`类型推导`方式定义变量\n\na在函数内部，可以使用更简略的 `:=` 方式声明并初始化变量\n\n注意：短变量`只能用于声明局部变量`，不能用于全局变量声明\n\n```go\n变量名 := 表达式\n```\n\n例子：\n\n```go\nsex := \"男\"\n```\n\n> 方式4：声明多个变量\n\n**类型都是一样的变量**\n\n```go\nvar 变量名称， 变量名称 类型\n```\n\n案例：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar a1, a2 int\n\ta1 = 5\n\ta2 = 6\n    fmt.println(a1)\n    fmt.println(a2)\n\tfmt.Println(a1 + a2)\n}\n```\n\n**类型不一样的变量**\n\n```go\nvar (\n\t变量名称 类型\n    变量名称 类型\n)\n```\n\n案例：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tvar (\n\t\tname string\n\t\tage  int\n\t\tsex  string\n\t)\n\tname = \"zhangsan\"\n\tage = 18\n\tsex = \"男\"\n\n\tfmt.Printf(\"name=%v,age=%d,sex=%v\", name, age, sex)\n}\n\n```\n\n#### 3.2.1 占位符使用:warning:待整理\n\n> 注意：需要配合`Printf`来使用\n\n| 占位符使用 | 作用           |\n| ---------- | -------------- |\n| %T         | 类型占位符     |\n| %v         | 值占位符       |\n| %d         | 整数占位符     |\n| %f         | 浮点占位符     |\n| %c         | 字符占位符     |\n| %s         | 字符串的占位符 |\n\n案例：\n\n```go\n\tvar (\n\t\tName2 = \"bigdata\"\n\t\tAge2  = 18\n\t\tSex2  = \"男\"\n\t)\n\tfmt.Println(Name2, Age2, Sex2)\n\n\t// 占位符\n\tfmt.Printf(\"他的名字是:%v,年龄:%v,性别:%v\\n\", Name2, Age2, Sex2)              // 他的名字是:bigdata,年龄:18,性别:男\n\tfmt.Printf(\"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\\n\", Name2, Age2, Sex2) // Name的类型是:string Age的类型是:int Sex的类型是:string\n```\n\n\n\n> 变量总结\n\n全部的定义方式\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t/*\n\t\tGo语言变量是由字母、数字、下划线组成，其中首个字符不能为数字。Go语言中关键字和保留字都不能用作变量名\n\n\t\tGo语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n\t\t变量声明后，没有初始化，打印出来的是空\n\t*/\n\t// 方式1:直接声明\n\tvar name = \"zhangsan\"\n\tfmt.Println(name)\n\n\t// 方式2:带类型\n\tvar name2 string = \"lisi\"\n\tfmt.Println(name2)\n\n\t// 方式3:`类型推导`方式定义变量  注意：短变量`只能用于声明局部变量`，不能用于全局变量声明\n\tname3 := \"xiaoming\"\n\tfmt.Println(name3)\n\n\t// 方式4:声明多个变量\n\t// 类型都是一样的变量\n\tvar a1, a2 int\n\ta1 = 5\n\ta2 = 6\n\tfmt.Println(a1)\n\tfmt.Println(a2)\n\tfmt.Println(a1 + a2)\n\n\t// 类型不一样的变量  声明后再赋值\n\tvar (\n\t\tName string\n\t\tAge  int\n\t\tSex  string\n\t)\n\tName = \"hj\"\n\tAge = 22\n\tSex = \"男\"\n\tfmt.Println(Name, Age, Sex)\n\n\t// 声明的同时赋值\n\tvar (\n\t\tName1 string = \"mjl\"\n\t\tAge1  int    = 20\n\t\tSex1  string = \"女\"\n\t)\n\tfmt.Println(Name1, Age1, Sex1)\n\n\t// 类型推导\n\tvar (\n\t\tName2 = \"bigdata\"\n\t\tAge2  = 18\n\t\tSex2  = \"男\"\n\t)\n\tfmt.Println(Name2, Age2, Sex2)\n\n\t// 占位符\n\tfmt.Printf(\"他的名字是:%v,年龄:%v,性别:%v\\n\", Name2, Age2, Sex2)              // 他的名字是:bigdata,年龄:18,性别:男\n\tfmt.Printf(\"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\\n\", Name2, Age2, Sex2) // Name的类型是:string Age的类型是:int Sex的类型是:string\n\n}\n```\n\n### 3.3 如何定义常量\n\n相对于变量，`常量是恒定不变的值`，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了`const`，常量在`定义的时候必须赋值`。\n\n```go\n\t/*\n\t\t相对于变量，`常量是恒定不变的值`，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了`const`，常量在`定义的时候必须赋值`。\n\t*/\n\n\t//定义了常量，可以不用立即使用\n\tconst pi = 3.141596\n\n\t// 定义两个常量\n\tconst (\n\t\tA = \"A\"\n\t\tB = \"B\"\n\t)\n\n\t// const同时声明多个常量时，如果省略了值表示和上面一行的值相同\n\tconst (\n\t\ta = \"A\"\n\t\tb\n\t\tc\n\t)\n\tfmt.Println(a, b, c) // A A A\n```\n\n\n\n### 3.4 Const常量结合iota的使用（了解）\n\niota是golang 语言的常量计数器，只能在常量的表达式中使用\n\niota在const关键字出现时将被重置为0（const内部的第一行之前），const中每新增一行常量声明将使iota计数一次（iota可理解为const语句块中的行索引）。\n\n> 1. 每次const出现，都会让iota初始化为0【自增长】\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tconst a = iota\t// a = 0\n\tfmt.Println(a) \n\n\tconst (\n\t\tb = iota // b = 0\n\t\tc\t\t// c = 1\n \t\td\t\t// d = 2\n\t)\n\tfmt.Println(b, c, d)\n\n}\n\n```\n\n> 2. const  iota使用 `_` 跳过某些值\n\n```go\n\tconst (\n\t\tb = iota // b = 0\n\t\t_        // 跳过 1\n\t\td        // d = 2\n\t)\n\tfmt.Println(b, d)\n```\n\n> 3. iota声明中间插队\n\n```go\n\t// iota声明中间插队\n\tconst (\n\t\tn1 = iota // n1 = 0\n\t\tn2 = 100  // n2 = 100\n\t\tn3 = iota // n3 = 2\n\t\tn4        // n4 = 3\n\t)\n\tfmt.Println(n1, n2, n3, n4) // 输出:0 100 2 3\n```\n\n\n\n> 4. 多个iota定义在一行\n\n```go\n\t// 多个iota定义在一行\n\tconst (\n\t\tn1, n2 = iota + 1, iota + 2 // 0+1=1 ,0+2 =2\n\t\tn3, n4                      // 2 , 3\n\t\tn5, n6                      // 3 , 4\n\t)\n\tfmt.Println(n1, n2)\n\tfmt.Println(n3, n4)\n\tfmt.Println(n5, n6)\n```\n\n![image-20240510165431706](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510165431706.png)\n\n### 3.5 Go语言变量、常量明明规则\n\n1、变量名称必须由数字、字母、下划线组成。\n2、标识符开头不能是数字\n3、标识符不能是保留字和关键字。\n\n4、变量的名字是区分大小写的如：age和Age是不同的变量。在实际的运用中，也`建议`，不要用一个单词大小写区分两个变量。\n\n5、标识符（变量名称）一定要`见名思意`：变量名称建议用名词，方法名称建议用动词\n\n6、变量命名一般采用驼峰式，当遇到特有名词（缩写或简称，如DNS)的时候，特有名词根据是否私有全部大写或小写。\n\n\n\n\n\n### 3.6 注释与godoc\n\n> 注释不会被编译，每一个包应该有相关注释。\n\n单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾。如：\n\n```go\n1.\n// 单行注释\n2.\n/*\n Author by 菜鸟教程\n 我是多行注释\n */\n3.注释换行\n// 你好\n//\n// 世界\n```\n\n> `go doc` 是 Go 语言提供的一个工具，用于查看 Go 包和符号的文档。它类似于 `godoc`，但用法更简单且直接。以下是 `go doc` 的用法和主要功能说明：\n\n`go doc` **的用法**:\n\n1. **查看包的文档**\n\n   ```\n   复制代码\n   go doc 包名\n   ```\n\n示例：\n\n```\n   复制代码\n   go doc fmt\n```\n\n   输出：`fmt` 包的概述，包括包的介绍和主要函数。\n\n2. **查看包中某个函数、类型、变量、常量的文档**\n\n   ```\n   复制代码\n   go doc 包名.符号名\n   ```\n\n示例：\n\n```\n   复制代码\n   go doc fmt.Println\n```\n\n   输出：`fmt.Println` 函数的文档，包括函数签名和说明。\n\n3. **查看包中某个类型的方法**\n\n   ```\n   复制代码\n   go doc 包名.类型名.方法名\n   ```\n\n示例：\n\n```\n   复制代码\n   go doc net/http.Client.Get\n```\n\n   输出：`http.Client` 类型的 `Get` 方法的文档。\n\n4. **查看包的导入路径**\n\n   ```\n   复制代码\n   go doc -src 包名\n   ```\n\n示例：\n\n```\n   复制代码\n   go doc -src fmt\n```\n\n   输出：`fmt` 包的源代码。\n\n5. **指定工作目录**\n\n   ```\n   复制代码\n   go doc -C 工作目录\n   ```\n\n   示例：\n\n   ```\n   复制代码\n   go doc -C /path/to/your/project fmt\n   ```\n\n   输出：指定工作目录下 `fmt` 包的文档。\n\n`go doc` **的主要功能**:\n\n- **快速查看文档**：无需打开浏览器，可以在终端中快速查看 Go 包、类型、函数等的文档。\n- **支持源码查看**：可以通过 `-src` 选项查看包的源代码，帮助理解实现细节。\n- **支持自定义工作目录**：通过 `-C` 选项，可以在指定的工作目录下查找包的文档。\n\n**示例:**\n\n以下是几个常见的 `go doc` 命令示例及其输出解释：\n\n1. **查看 `fmt` 包的文档**\n\n   ```\n   复制代码\n   go doc fmt\n   ```\n\n   输出：`fmt` 包的概述，包括包的介绍和主要函数。\n\n2. **查看 `fmt.Println` 函数的文档**\n\n   ```\n   复制代码\n   go doc fmt.Println\n   ```\n\n   输出：`fmt.Println` 函数的文档，包括函数签名和说明。\n\n3. **查看 `http.Client.Get` 方法的文档**\n\n   ```\n   复制代码\n   go doc net/http.Client.Get\n   ```\n\n   输出：`http.Client` 类型的 `Get` 方法的文档。\n\n4. **查看 `fmt` 包的源代码**\n\n   ```\n   复制代码\n   go doc -src fmt\n   ```\n\n   输出：`fmt` 包的源代码。\n\n5. **在指定工作目录下查看 `fmt` 包的文档**\n\n   ```\n   复制代码\n   go doc -C /path/to/your/project fmt\n   ```\n\n输出：指定工作目录下 `fmt` 包的文档。\n\n通过使用 `go doc` 工具，可以方便地在命令行中查看 Go 标准库以及自定义包的文档，有助于开发者更快地理解和使用 Go 语言中的各种功能。\n\n> go'doc可以为项目代码导出网页版的注释文档\n\n**1.** **首先需要安装**\n\n```go\ngo get golang.org/x/tools/cmd/godoc\n```\n\n**2.** **启动http:**\n\n```go\ngodoc -http=:6060\n```\n\n**3. 使用浏览器访问**\n\n```sh\nhttp://127.0.0.1:6060/pkg/go-course/entrance_class \n```\n\n![image-20240719102952811](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202407191029000.png)","source":"_posts/Go语言中的变量和常量.md","raw":"---\ntitle: Go语言中的变量和常量\ndate: 2024-11-10 23:55:54\ntags:\n  - Golang\ncategories: \n  - 运维开发\n  - 云原生\n---\n## 3. Go语言中的变量和常量\n\n### 3.1 Go语言中变量的声明\n\nGo语言变量是由`字母、数字、下划线`组成，其中首个字符不能为数字。Go语言中`关键字和保留字`都不能用作变量名\n\nGo语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n变量声明后，没有初始化，打印出来的是空\n\n### 3.2 如何定义变量\n\n> 方式1：直接声明\n\n```go\nvar name = \"zhangsan\"\n```\n\n> 方式2：带类型\n\n```go\nvar name string = \"zhangsan\"\n```\n\n> 方式3：`类型推导`方式定义变量\n\na在函数内部，可以使用更简略的 `:=` 方式声明并初始化变量\n\n注意：短变量`只能用于声明局部变量`，不能用于全局变量声明\n\n```go\n变量名 := 表达式\n```\n\n例子：\n\n```go\nsex := \"男\"\n```\n\n> 方式4：声明多个变量\n\n**类型都是一样的变量**\n\n```go\nvar 变量名称， 变量名称 类型\n```\n\n案例：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar a1, a2 int\n\ta1 = 5\n\ta2 = 6\n    fmt.println(a1)\n    fmt.println(a2)\n\tfmt.Println(a1 + a2)\n}\n```\n\n**类型不一样的变量**\n\n```go\nvar (\n\t变量名称 类型\n    变量名称 类型\n)\n```\n\n案例：\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tvar (\n\t\tname string\n\t\tage  int\n\t\tsex  string\n\t)\n\tname = \"zhangsan\"\n\tage = 18\n\tsex = \"男\"\n\n\tfmt.Printf(\"name=%v,age=%d,sex=%v\", name, age, sex)\n}\n\n```\n\n#### 3.2.1 占位符使用:warning:待整理\n\n> 注意：需要配合`Printf`来使用\n\n| 占位符使用 | 作用           |\n| ---------- | -------------- |\n| %T         | 类型占位符     |\n| %v         | 值占位符       |\n| %d         | 整数占位符     |\n| %f         | 浮点占位符     |\n| %c         | 字符占位符     |\n| %s         | 字符串的占位符 |\n\n案例：\n\n```go\n\tvar (\n\t\tName2 = \"bigdata\"\n\t\tAge2  = 18\n\t\tSex2  = \"男\"\n\t)\n\tfmt.Println(Name2, Age2, Sex2)\n\n\t// 占位符\n\tfmt.Printf(\"他的名字是:%v,年龄:%v,性别:%v\\n\", Name2, Age2, Sex2)              // 他的名字是:bigdata,年龄:18,性别:男\n\tfmt.Printf(\"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\\n\", Name2, Age2, Sex2) // Name的类型是:string Age的类型是:int Sex的类型是:string\n```\n\n\n\n> 变量总结\n\n全部的定义方式\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\t/*\n\t\tGo语言变量是由字母、数字、下划线组成，其中首个字符不能为数字。Go语言中关键字和保留字都不能用作变量名\n\n\t\tGo语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n\t\t变量声明后，没有初始化，打印出来的是空\n\t*/\n\t// 方式1:直接声明\n\tvar name = \"zhangsan\"\n\tfmt.Println(name)\n\n\t// 方式2:带类型\n\tvar name2 string = \"lisi\"\n\tfmt.Println(name2)\n\n\t// 方式3:`类型推导`方式定义变量  注意：短变量`只能用于声明局部变量`，不能用于全局变量声明\n\tname3 := \"xiaoming\"\n\tfmt.Println(name3)\n\n\t// 方式4:声明多个变量\n\t// 类型都是一样的变量\n\tvar a1, a2 int\n\ta1 = 5\n\ta2 = 6\n\tfmt.Println(a1)\n\tfmt.Println(a2)\n\tfmt.Println(a1 + a2)\n\n\t// 类型不一样的变量  声明后再赋值\n\tvar (\n\t\tName string\n\t\tAge  int\n\t\tSex  string\n\t)\n\tName = \"hj\"\n\tAge = 22\n\tSex = \"男\"\n\tfmt.Println(Name, Age, Sex)\n\n\t// 声明的同时赋值\n\tvar (\n\t\tName1 string = \"mjl\"\n\t\tAge1  int    = 20\n\t\tSex1  string = \"女\"\n\t)\n\tfmt.Println(Name1, Age1, Sex1)\n\n\t// 类型推导\n\tvar (\n\t\tName2 = \"bigdata\"\n\t\tAge2  = 18\n\t\tSex2  = \"男\"\n\t)\n\tfmt.Println(Name2, Age2, Sex2)\n\n\t// 占位符\n\tfmt.Printf(\"他的名字是:%v,年龄:%v,性别:%v\\n\", Name2, Age2, Sex2)              // 他的名字是:bigdata,年龄:18,性别:男\n\tfmt.Printf(\"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\\n\", Name2, Age2, Sex2) // Name的类型是:string Age的类型是:int Sex的类型是:string\n\n}\n```\n\n### 3.3 如何定义常量\n\n相对于变量，`常量是恒定不变的值`，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了`const`，常量在`定义的时候必须赋值`。\n\n```go\n\t/*\n\t\t相对于变量，`常量是恒定不变的值`，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了`const`，常量在`定义的时候必须赋值`。\n\t*/\n\n\t//定义了常量，可以不用立即使用\n\tconst pi = 3.141596\n\n\t// 定义两个常量\n\tconst (\n\t\tA = \"A\"\n\t\tB = \"B\"\n\t)\n\n\t// const同时声明多个常量时，如果省略了值表示和上面一行的值相同\n\tconst (\n\t\ta = \"A\"\n\t\tb\n\t\tc\n\t)\n\tfmt.Println(a, b, c) // A A A\n```\n\n\n\n### 3.4 Const常量结合iota的使用（了解）\n\niota是golang 语言的常量计数器，只能在常量的表达式中使用\n\niota在const关键字出现时将被重置为0（const内部的第一行之前），const中每新增一行常量声明将使iota计数一次（iota可理解为const语句块中的行索引）。\n\n> 1. 每次const出现，都会让iota初始化为0【自增长】\n\n```go\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n\n\tconst a = iota\t// a = 0\n\tfmt.Println(a) \n\n\tconst (\n\t\tb = iota // b = 0\n\t\tc\t\t// c = 1\n \t\td\t\t// d = 2\n\t)\n\tfmt.Println(b, c, d)\n\n}\n\n```\n\n> 2. const  iota使用 `_` 跳过某些值\n\n```go\n\tconst (\n\t\tb = iota // b = 0\n\t\t_        // 跳过 1\n\t\td        // d = 2\n\t)\n\tfmt.Println(b, d)\n```\n\n> 3. iota声明中间插队\n\n```go\n\t// iota声明中间插队\n\tconst (\n\t\tn1 = iota // n1 = 0\n\t\tn2 = 100  // n2 = 100\n\t\tn3 = iota // n3 = 2\n\t\tn4        // n4 = 3\n\t)\n\tfmt.Println(n1, n2, n3, n4) // 输出:0 100 2 3\n```\n\n\n\n> 4. 多个iota定义在一行\n\n```go\n\t// 多个iota定义在一行\n\tconst (\n\t\tn1, n2 = iota + 1, iota + 2 // 0+1=1 ,0+2 =2\n\t\tn3, n4                      // 2 , 3\n\t\tn5, n6                      // 3 , 4\n\t)\n\tfmt.Println(n1, n2)\n\tfmt.Println(n3, n4)\n\tfmt.Println(n5, n6)\n```\n\n![image-20240510165431706](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510165431706.png)\n\n### 3.5 Go语言变量、常量明明规则\n\n1、变量名称必须由数字、字母、下划线组成。\n2、标识符开头不能是数字\n3、标识符不能是保留字和关键字。\n\n4、变量的名字是区分大小写的如：age和Age是不同的变量。在实际的运用中，也`建议`，不要用一个单词大小写区分两个变量。\n\n5、标识符（变量名称）一定要`见名思意`：变量名称建议用名词，方法名称建议用动词\n\n6、变量命名一般采用驼峰式，当遇到特有名词（缩写或简称，如DNS)的时候，特有名词根据是否私有全部大写或小写。\n\n\n\n\n\n### 3.6 注释与godoc\n\n> 注释不会被编译，每一个包应该有相关注释。\n\n单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾。如：\n\n```go\n1.\n// 单行注释\n2.\n/*\n Author by 菜鸟教程\n 我是多行注释\n */\n3.注释换行\n// 你好\n//\n// 世界\n```\n\n> `go doc` 是 Go 语言提供的一个工具，用于查看 Go 包和符号的文档。它类似于 `godoc`，但用法更简单且直接。以下是 `go doc` 的用法和主要功能说明：\n\n`go doc` **的用法**:\n\n1. **查看包的文档**\n\n   ```\n   复制代码\n   go doc 包名\n   ```\n\n示例：\n\n```\n   复制代码\n   go doc fmt\n```\n\n   输出：`fmt` 包的概述，包括包的介绍和主要函数。\n\n2. **查看包中某个函数、类型、变量、常量的文档**\n\n   ```\n   复制代码\n   go doc 包名.符号名\n   ```\n\n示例：\n\n```\n   复制代码\n   go doc fmt.Println\n```\n\n   输出：`fmt.Println` 函数的文档，包括函数签名和说明。\n\n3. **查看包中某个类型的方法**\n\n   ```\n   复制代码\n   go doc 包名.类型名.方法名\n   ```\n\n示例：\n\n```\n   复制代码\n   go doc net/http.Client.Get\n```\n\n   输出：`http.Client` 类型的 `Get` 方法的文档。\n\n4. **查看包的导入路径**\n\n   ```\n   复制代码\n   go doc -src 包名\n   ```\n\n示例：\n\n```\n   复制代码\n   go doc -src fmt\n```\n\n   输出：`fmt` 包的源代码。\n\n5. **指定工作目录**\n\n   ```\n   复制代码\n   go doc -C 工作目录\n   ```\n\n   示例：\n\n   ```\n   复制代码\n   go doc -C /path/to/your/project fmt\n   ```\n\n   输出：指定工作目录下 `fmt` 包的文档。\n\n`go doc` **的主要功能**:\n\n- **快速查看文档**：无需打开浏览器，可以在终端中快速查看 Go 包、类型、函数等的文档。\n- **支持源码查看**：可以通过 `-src` 选项查看包的源代码，帮助理解实现细节。\n- **支持自定义工作目录**：通过 `-C` 选项，可以在指定的工作目录下查找包的文档。\n\n**示例:**\n\n以下是几个常见的 `go doc` 命令示例及其输出解释：\n\n1. **查看 `fmt` 包的文档**\n\n   ```\n   复制代码\n   go doc fmt\n   ```\n\n   输出：`fmt` 包的概述，包括包的介绍和主要函数。\n\n2. **查看 `fmt.Println` 函数的文档**\n\n   ```\n   复制代码\n   go doc fmt.Println\n   ```\n\n   输出：`fmt.Println` 函数的文档，包括函数签名和说明。\n\n3. **查看 `http.Client.Get` 方法的文档**\n\n   ```\n   复制代码\n   go doc net/http.Client.Get\n   ```\n\n   输出：`http.Client` 类型的 `Get` 方法的文档。\n\n4. **查看 `fmt` 包的源代码**\n\n   ```\n   复制代码\n   go doc -src fmt\n   ```\n\n   输出：`fmt` 包的源代码。\n\n5. **在指定工作目录下查看 `fmt` 包的文档**\n\n   ```\n   复制代码\n   go doc -C /path/to/your/project fmt\n   ```\n\n输出：指定工作目录下 `fmt` 包的文档。\n\n通过使用 `go doc` 工具，可以方便地在命令行中查看 Go 标准库以及自定义包的文档，有助于开发者更快地理解和使用 Go 语言中的各种功能。\n\n> go'doc可以为项目代码导出网页版的注释文档\n\n**1.** **首先需要安装**\n\n```go\ngo get golang.org/x/tools/cmd/godoc\n```\n\n**2.** **启动http:**\n\n```go\ngodoc -http=:6060\n```\n\n**3. 使用浏览器访问**\n\n```sh\nhttp://127.0.0.1:6060/pkg/go-course/entrance_class \n```\n\n![image-20240719102952811](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202407191029000.png)","slug":"Go语言中的变量和常量","published":1,"updated":"2024-11-11T12:27:45.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm3d099g00007e1mj6sy9adhb","content":"<h2 id=\"3-Go语言中的变量和常量\"><a href=\"#3-Go语言中的变量和常量\" class=\"headerlink\" title=\"3. Go语言中的变量和常量\"></a>3. Go语言中的变量和常量</h2><h3 id=\"3-1-Go语言中变量的声明\"><a href=\"#3-1-Go语言中变量的声明\" class=\"headerlink\" title=\"3.1 Go语言中变量的声明\"></a>3.1 Go语言中变量的声明</h3><p>Go语言变量是由<code>字母、数字、下划线</code>组成，其中首个字符不能为数字。Go语言中<code>关键字和保留字</code>都不能用作变量名</p>\n<p>Go语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。</p>\n<p>变量声明后，没有初始化，打印出来的是空</p>\n<h3 id=\"3-2-如何定义变量\"><a href=\"#3-2-如何定义变量\" class=\"headerlink\" title=\"3.2 如何定义变量\"></a>3.2 如何定义变量</h3><blockquote>\n<p>方式1：直接声明</p>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>方式2：带类型</p>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> name <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>方式3：<code>类型推导</code>方式定义变量</p>\n</blockquote>\n<p>a在函数内部，可以使用更简略的 <code>:=</code> 方式声明并初始化变量</p>\n<p>注意：短变量<code>只能用于声明局部变量</code>，不能用于全局变量声明</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">变量名 <span class=\"token operator\">:=</span> 表达式<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例子：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">sex <span class=\"token operator\">:=</span> <span class=\"token string\">\"男\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>方式4：声明多个变量</p>\n</blockquote>\n<p><strong>类型都是一样的变量</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> 变量名称， 变量名称 类型<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>案例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> a1<span class=\"token punctuation\">,</span> a2 <span class=\"token builtin\">int</span>\n\ta1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\ta2 <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>类型不一样的变量</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t变量名称 类型\n    变量名称 类型\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>案例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tname <span class=\"token builtin\">string</span>\n\t\tage  <span class=\"token builtin\">int</span>\n\t\tsex  <span class=\"token builtin\">string</span>\n\t<span class=\"token punctuation\">)</span>\n\tname <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span>\n\tage <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\tsex <span class=\"token operator\">=</span> <span class=\"token string\">\"男\"</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=%v,age=%d,sex=%v\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-1-占位符使用-warning-待整理\"><a href=\"#3-2-1-占位符使用-warning-待整理\" class=\"headerlink\" title=\"3.2.1 占位符使用:warning:待整理\"></a>3.2.1 占位符使用:warning:待整理</h4><blockquote>\n<p>注意：需要配合<code>Printf</code>来使用</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>占位符使用</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%T</td>\n<td>类型占位符</td>\n</tr>\n<tr>\n<td>%v</td>\n<td>值占位符</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>整数占位符</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点占位符</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>字符占位符</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>字符串的占位符</td>\n</tr>\n</tbody></table>\n<p>案例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tName2 <span class=\"token operator\">=</span> <span class=\"token string\">\"bigdata\"</span>\n\tAge2  <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\tSex2  <span class=\"token operator\">=</span> <span class=\"token string\">\"男\"</span>\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 占位符</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"他的名字是:%v,年龄:%v,性别:%v\\n\"</span><span class=\"token punctuation\">,</span> Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span>              <span class=\"token comment\">// 他的名字是:bigdata,年龄:18,性别:男</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\\n\"</span><span class=\"token punctuation\">,</span> Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Name的类型是:string Age的类型是:int Sex的类型是:string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote>\n<p>变量总结</p>\n</blockquote>\n<p>全部的定义方式</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/*\n\t\tGo语言变量是由字母、数字、下划线组成，其中首个字符不能为数字。Go语言中关键字和保留字都不能用作变量名\n\n\t\tGo语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n\t\t变量声明后，没有初始化，打印出来的是空\n\t*/</span>\n\t<span class=\"token comment\">// 方式1:直接声明</span>\n\t<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 方式2:带类型</span>\n\t<span class=\"token keyword\">var</span> name2 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"lisi\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 方式3:`类型推导`方式定义变量  注意：短变量`只能用于声明局部变量`，不能用于全局变量声明</span>\n\tname3 <span class=\"token operator\">:=</span> <span class=\"token string\">\"xiaoming\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name3<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 方式4:声明多个变量</span>\n\t<span class=\"token comment\">// 类型都是一样的变量</span>\n\t<span class=\"token keyword\">var</span> a1<span class=\"token punctuation\">,</span> a2 <span class=\"token builtin\">int</span>\n\ta1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\ta2 <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 类型不一样的变量  声明后再赋值</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tName <span class=\"token builtin\">string</span>\n\t\tAge  <span class=\"token builtin\">int</span>\n\t\tSex  <span class=\"token builtin\">string</span>\n\t<span class=\"token punctuation\">)</span>\n\tName <span class=\"token operator\">=</span> <span class=\"token string\">\"hj\"</span>\n\tAge <span class=\"token operator\">=</span> <span class=\"token number\">22</span>\n\tSex <span class=\"token operator\">=</span> <span class=\"token string\">\"男\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">,</span> Sex<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 声明的同时赋值</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tName1 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"mjl\"</span>\n\t\tAge1  <span class=\"token builtin\">int</span>    <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\t\tSex1  <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"女\"</span>\n\t<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>Name1<span class=\"token punctuation\">,</span> Age1<span class=\"token punctuation\">,</span> Sex1<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 类型推导</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tName2 <span class=\"token operator\">=</span> <span class=\"token string\">\"bigdata\"</span>\n\t\tAge2  <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\t\tSex2  <span class=\"token operator\">=</span> <span class=\"token string\">\"男\"</span>\n\t<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 占位符</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"他的名字是:%v,年龄:%v,性别:%v\\n\"</span><span class=\"token punctuation\">,</span> Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span>              <span class=\"token comment\">// 他的名字是:bigdata,年龄:18,性别:男</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\\n\"</span><span class=\"token punctuation\">,</span> Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Name的类型是:string Age的类型是:int Sex的类型是:string</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-3-如何定义常量\"><a href=\"#3-3-如何定义常量\" class=\"headerlink\" title=\"3.3 如何定义常量\"></a>3.3 如何定义常量</h3><p>相对于变量，<code>常量是恒定不变的值</code>，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了<code>const</code>，常量在<code>定义的时候必须赋值</code>。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">/*\n\t相对于变量，`常量是恒定不变的值`，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了`const`，常量在`定义的时候必须赋值`。\n*/</span>\n\n<span class=\"token comment\">//定义了常量，可以不用立即使用</span>\n<span class=\"token keyword\">const</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.141596</span>\n\n<span class=\"token comment\">// 定义两个常量</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tA <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span>\n\tB <span class=\"token operator\">=</span> <span class=\"token string\">\"B\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// const同时声明多个常量时，如果省略了值表示和上面一行的值相同</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\ta <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span>\n\tb\n\tc\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// A A A</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-4-Const常量结合iota的使用（了解）\"><a href=\"#3-4-Const常量结合iota的使用（了解）\" class=\"headerlink\" title=\"3.4 Const常量结合iota的使用（了解）\"></a>3.4 Const常量结合iota的使用（了解）</h3><p>iota是golang 语言的常量计数器，只能在常量的表达式中使用</p>\n<p>iota在const关键字出现时将被重置为0（const内部的第一行之前），const中每新增一行常量声明将使iota计数一次（iota可理解为const语句块中的行索引）。</p>\n<blockquote>\n<ol>\n<li>每次const出现，都会让iota初始化为0【自增长】</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\t<span class=\"token comment\">// a = 0</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t\tb <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// b = 0</span>\n\t\tc\t\t<span class=\"token comment\">// c = 1</span>\n \t\td\t\t<span class=\"token comment\">// d = 2</span>\n\t<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<ol start=\"2\">\n<li>const  iota使用 <code>_</code> 跳过某些值</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tb <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// b = 0</span>\n\t<span class=\"token boolean\">_</span>        <span class=\"token comment\">// 跳过 1</span>\n\td        <span class=\"token comment\">// d = 2</span>\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<ol start=\"3\">\n<li>iota声明中间插队</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// iota声明中间插队</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tn1 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// n1 = 0</span>\n\tn2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>  <span class=\"token comment\">// n2 = 100</span>\n\tn3 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// n3 = 2</span>\n\tn4        <span class=\"token comment\">// n4 = 3</span>\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n3<span class=\"token punctuation\">,</span> n4<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出:0 100 2 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote>\n<ol start=\"4\">\n<li>多个iota定义在一行</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 多个iota定义在一行</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tn1<span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 0+1=1 ,0+2 =2</span>\n\tn3<span class=\"token punctuation\">,</span> n4                      <span class=\"token comment\">// 2 , 3</span>\n\tn5<span class=\"token punctuation\">,</span> n6                      <span class=\"token comment\">// 3 , 4</span>\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n3<span class=\"token punctuation\">,</span> n4<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n5<span class=\"token punctuation\">,</span> n6<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510165431706.png\" alt=\"image-20240510165431706\"></p>\n<h3 id=\"3-5-Go语言变量、常量明明规则\"><a href=\"#3-5-Go语言变量、常量明明规则\" class=\"headerlink\" title=\"3.5 Go语言变量、常量明明规则\"></a>3.5 Go语言变量、常量明明规则</h3><p>1、变量名称必须由数字、字母、下划线组成。<br>2、标识符开头不能是数字<br>3、标识符不能是保留字和关键字。</p>\n<p>4、变量的名字是区分大小写的如：age和Age是不同的变量。在实际的运用中，也<code>建议</code>，不要用一个单词大小写区分两个变量。</p>\n<p>5、标识符（变量名称）一定要<code>见名思意</code>：变量名称建议用名词，方法名称建议用动词</p>\n<p>6、变量命名一般采用驼峰式，当遇到特有名词（缩写或简称，如DNS)的时候，特有名词根据是否私有全部大写或小写。</p>\n<h3 id=\"3-6-注释与godoc\"><a href=\"#3-6-注释与godoc\" class=\"headerlink\" title=\"3.6 注释与godoc\"></a>3.6 注释与godoc</h3><blockquote>\n<p>注释不会被编译，每一个包应该有相关注释。</p>\n</blockquote>\n<p>单行注释是最常见的注释形式，你可以在任何地方使用以 &#x2F;&#x2F; 开头的单行注释。多行注释也叫块注释，均已以 &#x2F;* 开头，并以 *&#x2F; 结尾。如：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token number\">1.</span>\n<span class=\"token comment\">// 单行注释</span>\n<span class=\"token number\">2.</span>\n<span class=\"token comment\">/*\n Author by 菜鸟教程\n 我是多行注释\n */</span>\n<span class=\"token number\">3.</span>注释换行\n<span class=\"token comment\">// 你好</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 世界</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><code>go doc</code> 是 Go 语言提供的一个工具，用于查看 Go 包和符号的文档。它类似于 <code>godoc</code>，但用法更简单且直接。以下是 <code>go doc</code> 的用法和主要功能说明：</p>\n</blockquote>\n<p><code>go doc</code> <strong>的用法</strong>:</p>\n<ol>\n<li><p><strong>查看包的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc 包名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>   输出：<code>fmt</code> 包的概述，包括包的介绍和主要函数。</p>\n<ol start=\"2\">\n<li><p><strong>查看包中某个函数、类型、变量、常量的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc 包名.符号名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc fmt.Println<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>   输出：<code>fmt.Println</code> 函数的文档，包括函数签名和说明。</p>\n<ol start=\"3\">\n<li><p><strong>查看包中某个类型的方法</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc 包名.类型名.方法名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc net&#x2F;http.Client.Get<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>   输出：<code>http.Client</code> 类型的 <code>Get</code> 方法的文档。</p>\n<ol start=\"4\">\n<li><p><strong>查看包的导入路径</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -src 包名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -src fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>   输出：<code>fmt</code> 包的源代码。</p>\n<ol start=\"5\">\n<li><p><strong>指定工作目录</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -C 工作目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -C &#x2F;path&#x2F;to&#x2F;your&#x2F;project fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：指定工作目录下 <code>fmt</code> 包的文档。</p>\n</li>\n</ol>\n<p><code>go doc</code> <strong>的主要功能</strong>:</p>\n<ul>\n<li><strong>快速查看文档</strong>：无需打开浏览器，可以在终端中快速查看 Go 包、类型、函数等的文档。</li>\n<li><strong>支持源码查看</strong>：可以通过 <code>-src</code> 选项查看包的源代码，帮助理解实现细节。</li>\n<li><strong>支持自定义工作目录</strong>：通过 <code>-C</code> 选项，可以在指定的工作目录下查找包的文档。</li>\n</ul>\n<p><strong>示例:</strong></p>\n<p>以下是几个常见的 <code>go doc</code> 命令示例及其输出解释：</p>\n<ol>\n<li><p><strong>查看 <code>fmt</code> 包的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：<code>fmt</code> 包的概述，包括包的介绍和主要函数。</p>\n</li>\n<li><p><strong>查看 <code>fmt.Println</code> 函数的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc fmt.Println<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：<code>fmt.Println</code> 函数的文档，包括函数签名和说明。</p>\n</li>\n<li><p><strong>查看 <code>http.Client.Get</code> 方法的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc net&#x2F;http.Client.Get<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：<code>http.Client</code> 类型的 <code>Get</code> 方法的文档。</p>\n</li>\n<li><p><strong>查看 <code>fmt</code> 包的源代码</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -src fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：<code>fmt</code> 包的源代码。</p>\n</li>\n<li><p><strong>在指定工作目录下查看 <code>fmt</code> 包的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -C &#x2F;path&#x2F;to&#x2F;your&#x2F;project fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>输出：指定工作目录下 <code>fmt</code> 包的文档。</p>\n<p>通过使用 <code>go doc</code> 工具，可以方便地在命令行中查看 Go 标准库以及自定义包的文档，有助于开发者更快地理解和使用 Go 语言中的各种功能。</p>\n<blockquote>\n<p>go’doc可以为项目代码导出网页版的注释文档</p>\n</blockquote>\n<p><strong>1.</strong> <strong>首先需要安装</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> get golang<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>x<span class=\"token operator\">/</span>tools<span class=\"token operator\">/</span>cmd<span class=\"token operator\">/</span>godoc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>2.</strong> <strong>启动http:</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">godoc <span class=\"token operator\">-</span>http<span class=\"token operator\">=</span><span class=\"token punctuation\">:</span><span class=\"token number\">6060</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>3. 使用浏览器访问</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http://127.0.0.1:6060/pkg/go-course/entrance_class <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202407191029000.png\" alt=\"image-20240719102952811\"></p>\n","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"3-Go语言中的变量和常量\"><a href=\"#3-Go语言中的变量和常量\" class=\"headerlink\" title=\"3. Go语言中的变量和常量\"></a>3. Go语言中的变量和常量</h2><h3 id=\"3-1-Go语言中变量的声明\"><a href=\"#3-1-Go语言中变量的声明\" class=\"headerlink\" title=\"3.1 Go语言中变量的声明\"></a>3.1 Go语言中变量的声明</h3><p>Go语言变量是由<code>字母、数字、下划线</code>组成，其中首个字符不能为数字。Go语言中<code>关键字和保留字</code>都不能用作变量名</p>\n<p>Go语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。</p>\n<p>变量声明后，没有初始化，打印出来的是空</p>\n<h3 id=\"3-2-如何定义变量\"><a href=\"#3-2-如何定义变量\" class=\"headerlink\" title=\"3.2 如何定义变量\"></a>3.2 如何定义变量</h3><blockquote>\n<p>方式1：直接声明</p>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>方式2：带类型</p>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> name <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>方式3：<code>类型推导</code>方式定义变量</p>\n</blockquote>\n<p>a在函数内部，可以使用更简略的 <code>:=</code> 方式声明并初始化变量</p>\n<p>注意：短变量<code>只能用于声明局部变量</code>，不能用于全局变量声明</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">变量名 <span class=\"token operator\">:=</span> 表达式<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>例子：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">sex <span class=\"token operator\">:=</span> <span class=\"token string\">\"男\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>方式4：声明多个变量</p>\n</blockquote>\n<p><strong>类型都是一样的变量</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> 变量名称， 变量名称 类型<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>案例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">var</span> a1<span class=\"token punctuation\">,</span> a2 <span class=\"token builtin\">int</span>\n\ta1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\ta2 <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>\n    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>类型不一样的变量</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t变量名称 类型\n    变量名称 类型\n<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>案例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tname <span class=\"token builtin\">string</span>\n\t\tage  <span class=\"token builtin\">int</span>\n\t\tsex  <span class=\"token builtin\">string</span>\n\t<span class=\"token punctuation\">)</span>\n\tname <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span>\n\tage <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\tsex <span class=\"token operator\">=</span> <span class=\"token string\">\"男\"</span>\n\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name=%v,age=%d,sex=%v\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> sex<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-1-占位符使用-warning-待整理\"><a href=\"#3-2-1-占位符使用-warning-待整理\" class=\"headerlink\" title=\"3.2.1 占位符使用:warning:待整理\"></a>3.2.1 占位符使用:warning:待整理</h4><blockquote>\n<p>注意：需要配合<code>Printf</code>来使用</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>占位符使用</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%T</td>\n<td>类型占位符</td>\n</tr>\n<tr>\n<td>%v</td>\n<td>值占位符</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>整数占位符</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>浮点占位符</td>\n</tr>\n<tr>\n<td>%c</td>\n<td>字符占位符</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>字符串的占位符</td>\n</tr>\n</tbody></table>\n<p>案例：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\tName2 <span class=\"token operator\">=</span> <span class=\"token string\">\"bigdata\"</span>\n\tAge2  <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\tSex2  <span class=\"token operator\">=</span> <span class=\"token string\">\"男\"</span>\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 占位符</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"他的名字是:%v,年龄:%v,性别:%v\\n\"</span><span class=\"token punctuation\">,</span> Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span>              <span class=\"token comment\">// 他的名字是:bigdata,年龄:18,性别:男</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\\n\"</span><span class=\"token punctuation\">,</span> Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Name的类型是:string Age的类型是:int Sex的类型是:string</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote>\n<p>变量总结</p>\n</blockquote>\n<p>全部的定义方式</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">/*\n\t\tGo语言变量是由字母、数字、下划线组成，其中首个字符不能为数字。Go语言中关键字和保留字都不能用作变量名\n\n\t\tGo语言中变量需要声明后才能使用，同一作用域内不支持重复声明。并且Go语言的变量声明后必须使用。\n\n\t\t变量声明后，没有初始化，打印出来的是空\n\t*/</span>\n\t<span class=\"token comment\">// 方式1:直接声明</span>\n\t<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"zhangsan\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 方式2:带类型</span>\n\t<span class=\"token keyword\">var</span> name2 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"lisi\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 方式3:`类型推导`方式定义变量  注意：短变量`只能用于声明局部变量`，不能用于全局变量声明</span>\n\tname3 <span class=\"token operator\">:=</span> <span class=\"token string\">\"xiaoming\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>name3<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 方式4:声明多个变量</span>\n\t<span class=\"token comment\">// 类型都是一样的变量</span>\n\t<span class=\"token keyword\">var</span> a1<span class=\"token punctuation\">,</span> a2 <span class=\"token builtin\">int</span>\n\ta1 <span class=\"token operator\">=</span> <span class=\"token number\">5</span>\n\ta2 <span class=\"token operator\">=</span> <span class=\"token number\">6</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a1 <span class=\"token operator\">+</span> a2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 类型不一样的变量  声明后再赋值</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tName <span class=\"token builtin\">string</span>\n\t\tAge  <span class=\"token builtin\">int</span>\n\t\tSex  <span class=\"token builtin\">string</span>\n\t<span class=\"token punctuation\">)</span>\n\tName <span class=\"token operator\">=</span> <span class=\"token string\">\"hj\"</span>\n\tAge <span class=\"token operator\">=</span> <span class=\"token number\">22</span>\n\tSex <span class=\"token operator\">=</span> <span class=\"token string\">\"男\"</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>Name<span class=\"token punctuation\">,</span> Age<span class=\"token punctuation\">,</span> Sex<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 声明的同时赋值</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tName1 <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"mjl\"</span>\n\t\tAge1  <span class=\"token builtin\">int</span>    <span class=\"token operator\">=</span> <span class=\"token number\">20</span>\n\t\tSex1  <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"女\"</span>\n\t<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>Name1<span class=\"token punctuation\">,</span> Age1<span class=\"token punctuation\">,</span> Sex1<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 类型推导</span>\n\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span>\n\t\tName2 <span class=\"token operator\">=</span> <span class=\"token string\">\"bigdata\"</span>\n\t\tAge2  <span class=\"token operator\">=</span> <span class=\"token number\">18</span>\n\t\tSex2  <span class=\"token operator\">=</span> <span class=\"token string\">\"男\"</span>\n\t<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span>\n\n\t<span class=\"token comment\">// 占位符</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"他的名字是:%v,年龄:%v,性别:%v\\n\"</span><span class=\"token punctuation\">,</span> Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span>              <span class=\"token comment\">// 他的名字是:bigdata,年龄:18,性别:男</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Name的类型是:%T Age的类型是:%T Sex的类型是:%T\\n\"</span><span class=\"token punctuation\">,</span> Name2<span class=\"token punctuation\">,</span> Age2<span class=\"token punctuation\">,</span> Sex2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Name的类型是:string Age的类型是:int Sex的类型是:string</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-3-如何定义常量\"><a href=\"#3-3-如何定义常量\" class=\"headerlink\" title=\"3.3 如何定义常量\"></a>3.3 如何定义常量</h3><p>相对于变量，<code>常量是恒定不变的值</code>，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了<code>const</code>，常量在<code>定义的时候必须赋值</code>。</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">/*\n\t相对于变量，`常量是恒定不变的值`，多用于定义程序运行期间不会改变的那些值。常量的声明和变量声明非常类似，只是把var换成了`const`，常量在`定义的时候必须赋值`。\n*/</span>\n\n<span class=\"token comment\">//定义了常量，可以不用立即使用</span>\n<span class=\"token keyword\">const</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.141596</span>\n\n<span class=\"token comment\">// 定义两个常量</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tA <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span>\n\tB <span class=\"token operator\">=</span> <span class=\"token string\">\"B\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// const同时声明多个常量时，如果省略了值表示和上面一行的值相同</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\ta <span class=\"token operator\">=</span> <span class=\"token string\">\"A\"</span>\n\tb\n\tc\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// A A A</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"3-4-Const常量结合iota的使用（了解）\"><a href=\"#3-4-Const常量结合iota的使用（了解）\" class=\"headerlink\" title=\"3.4 Const常量结合iota的使用（了解）\"></a>3.4 Const常量结合iota的使用（了解）</h3><p>iota是golang 语言的常量计数器，只能在常量的表达式中使用</p>\n<p>iota在const关键字出现时将被重置为0（const内部的第一行之前），const中每新增一行常量声明将使iota计数一次（iota可理解为const语句块中的行索引）。</p>\n<blockquote>\n<ol>\n<li>每次const出现，都会让iota初始化为0【自增长】</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">package</span> main\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span>\n\n<span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n\t<span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span>\t<span class=\"token comment\">// a = 0</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> \n\n\t<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\t\tb <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// b = 0</span>\n\t\tc\t\t<span class=\"token comment\">// c = 1</span>\n \t\td\t\t<span class=\"token comment\">// d = 2</span>\n\t<span class=\"token punctuation\">)</span>\n\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<ol start=\"2\">\n<li>const  iota使用 <code>_</code> 跳过某些值</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tb <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// b = 0</span>\n\t<span class=\"token boolean\">_</span>        <span class=\"token comment\">// 跳过 1</span>\n\td        <span class=\"token comment\">// d = 2</span>\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<ol start=\"3\">\n<li>iota声明中间插队</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// iota声明中间插队</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tn1 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// n1 = 0</span>\n\tn2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span>  <span class=\"token comment\">// n2 = 100</span>\n\tn3 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token comment\">// n3 = 2</span>\n\tn4        <span class=\"token comment\">// n4 = 3</span>\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">,</span> n3<span class=\"token punctuation\">,</span> n4<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 输出:0 100 2 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote>\n<ol start=\"4\">\n<li>多个iota定义在一行</li>\n</ol>\n</blockquote>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token comment\">// 多个iota定义在一行</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n\tn1<span class=\"token punctuation\">,</span> n2 <span class=\"token operator\">=</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">iota</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span> <span class=\"token comment\">// 0+1=1 ,0+2 =2</span>\n\tn3<span class=\"token punctuation\">,</span> n4                      <span class=\"token comment\">// 2 , 3</span>\n\tn5<span class=\"token punctuation\">,</span> n6                      <span class=\"token comment\">// 3 , 4</span>\n<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n1<span class=\"token punctuation\">,</span> n2<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n3<span class=\"token punctuation\">,</span> n4<span class=\"token punctuation\">)</span>\nfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>n5<span class=\"token punctuation\">,</span> n6<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/image-20240510165431706.png\" alt=\"image-20240510165431706\"></p>\n<h3 id=\"3-5-Go语言变量、常量明明规则\"><a href=\"#3-5-Go语言变量、常量明明规则\" class=\"headerlink\" title=\"3.5 Go语言变量、常量明明规则\"></a>3.5 Go语言变量、常量明明规则</h3><p>1、变量名称必须由数字、字母、下划线组成。<br>2、标识符开头不能是数字<br>3、标识符不能是保留字和关键字。</p>\n<p>4、变量的名字是区分大小写的如：age和Age是不同的变量。在实际的运用中，也<code>建议</code>，不要用一个单词大小写区分两个变量。</p>\n<p>5、标识符（变量名称）一定要<code>见名思意</code>：变量名称建议用名词，方法名称建议用动词</p>\n<p>6、变量命名一般采用驼峰式，当遇到特有名词（缩写或简称，如DNS)的时候，特有名词根据是否私有全部大写或小写。</p>\n<h3 id=\"3-6-注释与godoc\"><a href=\"#3-6-注释与godoc\" class=\"headerlink\" title=\"3.6 注释与godoc\"></a>3.6 注释与godoc</h3><blockquote>\n<p>注释不会被编译，每一个包应该有相关注释。</p>\n</blockquote>\n<p>单行注释是最常见的注释形式，你可以在任何地方使用以 &#x2F;&#x2F; 开头的单行注释。多行注释也叫块注释，均已以 &#x2F;* 开头，并以 *&#x2F; 结尾。如：</p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token number\">1.</span>\n<span class=\"token comment\">// 单行注释</span>\n<span class=\"token number\">2.</span>\n<span class=\"token comment\">/*\n Author by 菜鸟教程\n 我是多行注释\n */</span>\n<span class=\"token number\">3.</span>注释换行\n<span class=\"token comment\">// 你好</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// 世界</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p><code>go doc</code> 是 Go 语言提供的一个工具，用于查看 Go 包和符号的文档。它类似于 <code>godoc</code>，但用法更简单且直接。以下是 <code>go doc</code> 的用法和主要功能说明：</p>\n</blockquote>\n<p><code>go doc</code> <strong>的用法</strong>:</p>\n<ol>\n<li><p><strong>查看包的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc 包名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>   输出：<code>fmt</code> 包的概述，包括包的介绍和主要函数。</p>\n<ol start=\"2\">\n<li><p><strong>查看包中某个函数、类型、变量、常量的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc 包名.符号名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc fmt.Println<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>   输出：<code>fmt.Println</code> 函数的文档，包括函数签名和说明。</p>\n<ol start=\"3\">\n<li><p><strong>查看包中某个类型的方法</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc 包名.类型名.方法名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc net&#x2F;http.Client.Get<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>   输出：<code>http.Client</code> 类型的 <code>Get</code> 方法的文档。</p>\n<ol start=\"4\">\n<li><p><strong>查看包的导入路径</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -src 包名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -src fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>   输出：<code>fmt</code> 包的源代码。</p>\n<ol start=\"5\">\n<li><p><strong>指定工作目录</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -C 工作目录<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>示例：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -C &#x2F;path&#x2F;to&#x2F;your&#x2F;project fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：指定工作目录下 <code>fmt</code> 包的文档。</p>\n</li>\n</ol>\n<p><code>go doc</code> <strong>的主要功能</strong>:</p>\n<ul>\n<li><strong>快速查看文档</strong>：无需打开浏览器，可以在终端中快速查看 Go 包、类型、函数等的文档。</li>\n<li><strong>支持源码查看</strong>：可以通过 <code>-src</code> 选项查看包的源代码，帮助理解实现细节。</li>\n<li><strong>支持自定义工作目录</strong>：通过 <code>-C</code> 选项，可以在指定的工作目录下查找包的文档。</li>\n</ul>\n<p><strong>示例:</strong></p>\n<p>以下是几个常见的 <code>go doc</code> 命令示例及其输出解释：</p>\n<ol>\n<li><p><strong>查看 <code>fmt</code> 包的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：<code>fmt</code> 包的概述，包括包的介绍和主要函数。</p>\n</li>\n<li><p><strong>查看 <code>fmt.Println</code> 函数的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc fmt.Println<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：<code>fmt.Println</code> 函数的文档，包括函数签名和说明。</p>\n</li>\n<li><p><strong>查看 <code>http.Client.Get</code> 方法的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc net&#x2F;http.Client.Get<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：<code>http.Client</code> 类型的 <code>Get</code> 方法的文档。</p>\n</li>\n<li><p><strong>查看 <code>fmt</code> 包的源代码</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -src fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>输出：<code>fmt</code> 包的源代码。</p>\n</li>\n<li><p><strong>在指定工作目录下查看 <code>fmt</code> 包的文档</strong></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">复制代码\ngo doc -C &#x2F;path&#x2F;to&#x2F;your&#x2F;project fmt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre></li>\n</ol>\n<p>输出：指定工作目录下 <code>fmt</code> 包的文档。</p>\n<p>通过使用 <code>go doc</code> 工具，可以方便地在命令行中查看 Go 标准库以及自定义包的文档，有助于开发者更快地理解和使用 Go 语言中的各种功能。</p>\n<blockquote>\n<p>go’doc可以为项目代码导出网页版的注释文档</p>\n</blockquote>\n<p><strong>1.</strong> <strong>首先需要安装</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\"><span class=\"token keyword\">go</span> get golang<span class=\"token punctuation\">.</span>org<span class=\"token operator\">/</span>x<span class=\"token operator\">/</span>tools<span class=\"token operator\">/</span>cmd<span class=\"token operator\">/</span>godoc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>2.</strong> <strong>启动http:</strong></p>\n<pre class=\"line-numbers language-go\" data-language=\"go\"><code class=\"language-go\">godoc <span class=\"token operator\">-</span>http<span class=\"token operator\">=</span><span class=\"token punctuation\">:</span><span class=\"token number\">6060</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><strong>3. 使用浏览器访问</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http://127.0.0.1:6060/pkg/go-course/entrance_class <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202407191029000.png\" alt=\"image-20240719102952811\"></p>\n"},{"title":"Hadoop环境配置合集","date":"2024-11-10T14:32:04.000Z","_content":"# Hadoop\n\n## 1.Hadoop 概述\n\n**1.1 Hadoop 是什么**\n\n（1）Hadoop是一个由Apache基金会所开发的<font color=\"red\" size=\"3\">分布式系统基础架构</font> \n\n（2）主要解决海量数据的<font color=\"red\" size=\"3\">存储</font>和海量数据的<font color=\"red\" size=\"3\">分析计算</font>问题 \n\n（3）广义上来说，Hadoop通常是指一个更广泛的概念——<font color=\"red\" size=\"3\">Hadoop生态圈</font>\n\n\n\n**1.2 Hadoop 优势**\n\n（1）**高可靠性**：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。 \n\n（2）**高扩展性**：在集群间分配任务数据，可方便的扩展数以千计的节点。 \n\n（3）**高效性**：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。 \n\n（4）**高容错性**：能够自动将失败的任务重新分配。\n\n\n\n**1.3 Hadoop 组成（面试重点）**\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527570.png\" alt=\"在这里插入图片描述\"> \n\n在Hadoop1.x 时代，Hadoop中的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大。 在Hadoop2.x时代，增加了Yarn。Yarn只负责资源的调度，MapReduce 只负责运算。 ==Hadoop3.x在组成上没有变化。==\n\n\n\n**1.3.1 HDFS 架构概述**\n\nHadoop Distributed File System，简称<font color=\"red\" size=\"3\">HDFS</font>，是一个分布式文件系统。\n\n（1）`NameNode`（nn）：存储文件的**元数据**，如**文件名**，**文件目录结构**，**文件属性**（生成时间、副本数、文件权限），以及每个文件的**块列表**和**块所在的DataNode**等。 \n\n（2）`DataNode`(dn)：在本地文件系统**存储文件块数据**，以及**块数据的校验和**。 \n\n（3）`Secondary NameNode`(2nn)：**每隔一段时间对NameNode元数据备份**。\n\n\n\n\n\n**1.3.2 YARN 架构概述**\n\nYet Another Resource Negotiator 简称YARN ，另一种资源协调者，是Hadoop 的资源管理器。\n\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111625192.png\" alt=\"在这里插入图片描述\">\n\n`ResourceManager`(RM)：整个集群资源（内存、CPU等）的管理者 \n\n`NodeManager`(NM)：单个节点服务器资源的管理者。 \n\n`ApplicationMaster`(AM)：单个任务运行的管理者。 \n\n`Container`：容器，相当于一台独立的服务器，里面封装了任务运行所需要的资源，如**内存、CPU、磁盘、网络**等。\n\n\n\n说明： \n\n（1）客户端可以有多个 \n\n（2）集群上可以运行多个ApplicationMaster \n\n（3）每个NodeManager上可以有多个Container\n\n\n\n**1.3.3 MapReduce 架构概述**\n\nMapReduce 将计算过程分为两个阶段：Map 和Reduce 1）Map 阶段并行处理输入数据 2）Reduce 阶段对Map 结果进行汇总 \n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527808.png\" alt=\"在这里插入图片描述\">\n\n**1.3.4 HDFS、YARN、MapReduce 三者关系**\n\n如图所示：\n\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527601.png\" alt=\"在这里插入图片描述\">\n\n**1.3.5 大数据技术生态体系**\n\n如图所示： <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527584.png\" alt=\"在这里插入图片描述\"> \n\n图中涉及的技术名词解释如下：\n\n（1）`Sqoop`：Sqoop 是一款开源的工具，主要用于在Hadoop、Hive 与传统的数据库（MySQL）间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop 的HDFS 中，也可以将HDFS 的数据导进到关系型数据库中。 \n\n（2）`Flume`：Flume 是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据。 （3）`Kafka`：Kafka 是一种高吞吐量的分布式发布订阅消息系统。 \n\n（4）`Spark`：Spark 是当前最流行的开源大数据内存计算框架。可以基于Hadoop 上存储的大数据进行计算。\n\n（5）`Flink`：Flink 是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多。 \n\n（6）`Oozie`：Oozie 是一个管理Hadoop 作业（job）的工作流程调度管理系统。 \n\n（7）`Hbase`：HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。 \n\n（8）`Hive`：Hive 是基于Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL 查询功能，可以将SQL 语句转换为MapReduce 任务进行运行。其优点是学习成本低，可以通过类SQL 语句快速实现简单的MapReduce 统计，不必开发专门的MapReduce 应用，十分适合数据仓库的统计分析。 \n\n（9）`ZooKeeper`：它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。\n\n\n\n**1.3.6 推荐系统框架图**\n\n推荐系统项目框架\n\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527591.png\" alt=\"在这里插入图片描述\">\n\n**1.3.7 常用端口号说明**\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111537682.png\" alt=\"在这里插入图片描述\">\n\n## 2. Hadoop 完全分部署运行环境搭建\n\n环境说明:\n\n| 容器   | 容器ip       |\n| ------ | ------------ |\n| master | 192.168.1.10 |\n| slave1 | 192.168.1.20 |\n| slave2 | 192.168.1.30 |\n\n### 2.1 配置主机名\n\n```sh\nhostnamectl set-hostname master && bash\nhostnamectl set-hostname slave1 && bash\nhostnamectl set-hostname slave2 && bash\n```\n\n### 2.2 修改hosts，添加映射，关闭防火墙\n\n> 所有节点执行\n\n```sh\n[root@master ~]# cat /etc/hosts\n127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nff00::0\tip6-mcastprefix\nff02::1\tip6-allnodes\nff02::2\tip6-allrouters\n192.168.1.10\tmaster\n192.168.1.20\tslave1\n192.168.1.30\tslave2\n```\n\n```sh\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n### 2.3 设置三台主机的免密登录\n\n#### 2.3.1 生成免密公钥\n\n```sh\n[root@master ~]# ssh-keygen -t rsa\t\t#然后一直回车\n或者\n[root@master ~]# ssh-keygen -f ~/.ssh/id_rsa -P '' #免回车\n```\n\n![image-20230321114300354](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607877.png)\n\n#### 2.3.2 复制公钥到服务器\n\n```hss\nssh-copy-id master\nssh-copy-id slave1\nssh-copy-id slave2\n```\n\n![image-20230321115337762](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607997.png)\n\n(另外两个节点也是如此操作，这里就不演示了)\n\n\n\n### 2.4 JDK配置\n\n解压文件到相应的位置：\n\n```sh\n[root@master ~]# tar -zxvf /opt/software/jdk-8u162-linux-x64.tar.gz -C /opt/module/\n\n[root@master ~]# cd /opt/module/\t#进入解压目录，可以给解压后的文件改个名字，方便记忆\n[root@master module]# mv jdk1.8.0_162/ jdk\n```\n\n设置jdk环境变量：\n\n```sh\n[root@master module]# vi /etc/profile\n```\n\n在末尾添加如下配置：\n\n```sh\n#JAVA_HOME\nexport JAVA_HOME=/opt/module/jdk\nexport PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin\n```\n\n刷新环境变量：\n\n```sh\n[root@master module]# source /etc/profile\n```\n\n配置完后即可查看jdk版本号：\n\n```sh\n[root@master module]# java -version\n```\n\n![image-20230321122027954](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617633.png)\n\n分发JDK和环境变量到两个副节点：\n\n```sh\n[root@master module]# scp /etc/profile root@slave1:/etc/profile\n[root@master module]# scp /etc/profile root@slave2:/etc/profile\n\n[root@master module]# scp -rq jdk/ root@slave1:/opt/module/\n[root@master module]# scp -rq jdk/ root@slave2:/opt/module/\n```\n\n![image-20230321122308314](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617652.png)\n\n分发到两个副节点后，刷新环境变量，查看JAVA版本：\n\nslave1节点：\n\n![image-20230321122633530](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617692.png)\n\nslave2节点：\n\n![image-20230321122717175](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617803.png)\n\n基础环境搭建完成！！\n\n\n\n> 添加jpsall脚本(可选)\n\n```sh\nvi $JAVA_HOME/bin/jpsall\nchmod +x $JAVA_HOME/bin/jpsall\n```\n\n脚本内容如下:\n\n```sh\n#!/bin/bash\nfor hostname in master slave1 slave2\ndo\n  echo ===========$hostname==========\n  ssh $hostname \". /etc/profile; jps\"\ndone\n```\n\n### 2.5 Hadoop环境搭建\n\n> 前提：已完成3个节点的免密登录，jdk配置\n\n#### 2.5.1 解压包到相应位置：\n\n```sh\n[root@master module]# tar -zxvf /opt/software/hadoop-3.1.3.tar.gz -C /opt/module/\n[root@master module]# mv hadoop-3.1.3/ hadoop\t#改一下名字，方便记忆\n```\n\n#### 2.5.2 添加hadoop环境变量\n\n```sh\n[root@master module]# vi /etc/profile\n```\n\n在末尾添加以下内容：\n\n```sh\n#HADOOP\nexport HADOOP_HOME=/opt/module/hadoop\nexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\nexport HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\nexport HDFS_NAMENODE_USER=root\nexport HDFS_DATANODE_USER=root\nexport HDFS_SECONDARYNAMENODE_USER=root\nexport YARN_RESOURCEMANAGER_USER=root\nexport YARN_NODEMANAGER_USER=root\n\n#备注：3.0后的版本需要指定服务用户\n```\n\n：wq 保存退出后，刷新环境变量：\n\n```sh\n[root@master module]# source /etc/profile\n```\n\n配置好后，即可直接查看hadoop 版本号\n\n```sh\n[root@master module]# hadoop version\n```\n\n![image-20230321124056646](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111621421.png)\n\n### 2.6 修改6个主配置文件\n\n- :one: core.site.xml \n- :two: hdfs-site.xml \n- :three: mapred-site.xml \n- :four:yarn-site.xml \n- :five: hadoop-env.sh \n- :six: workers \n\n\n\n==配置参考官方文档==\n\n> 目录:`\\hadoop-3.1.3\\share\\doc\\hadoop`\n\n![image-20240104222735234](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042227312.png)\n\n![image-20240104222630568](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042226052.png)\n\n\n\n或直接查看官方配置文件:\n\n```sh\nfind ./ -name \"core-de*\" -o -name \"hdfs-de*\" -o -name \"mapred-de*\" -o -name \"yarn-de*\"\n```\n\n![image-20240105152739131](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051527779.png)\n\n(记住主要参数名即可)\n\n#### 2.6.1先进入配置目录\n\n```SH\n[root@master module]# cd hadoop/etc/hadoop/\n[root@master hadoop]# ll\n```\n\n可以看到如下文件：\n\n![image-20230321124310396](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630756.png)\n\n我们只用修改其中的6条\n\n#### 2.6.2 hadoop-env.sh配置：\n\n```sh\n[root@master hadoop]# vi hadoop-env.sh #告诉hadoop jdk在哪里\n```\n\n![image-20230321124524896](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630692.png)\n\n#### 2.6.3 workers配置\n\n（根据自己的集群来进行配置）：\n\n```sh\n[root@master hadoop]# vi workers\nmaster\nslave1\nslave2\n```\n\n![image-20230321124806539](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630688.png)\n\n#### 2.6.4 core.site.xml配置：\n\n![image-20240104222915427](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042229494.png)\n\n```sh\n[root@master hadoop]# vi core-site.xml\n```\n\n```xml\n<configuration>\n<!-- hdfs的地址名称：schame,ip,port-->\n        <property>\n                <name>fs.defaultFS</name>\n                <value>hdfs://master:9000</value>\n        </property>\n<!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 -->\n        <property>\n                <name>hadoop.tmp.dir</name>\n                <value>/root/hadoopdir/tmp</value>\n        </property>\n</configuration>\n```\n\n#### 2.6.5 hdfs.site.xml:\n\n```sh\n[root@master hadoop]# vi hdfs-site.xml \n```\n\n```xml\n<configuration>\n<!-- namenode守护进程管理的元数据文件fsimage存储的位置-->\n        <property>\n                <name>dfs.namenode.name.dir</name>\n                <value>/root/hadoopdir/dfs/name</value>\n        </property>\n<!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处-->\n        <property>\n                <name>dfs.datanode.data.dir</name>\n                <value>/root/hadoopdir/dfs/data</value>\n        </property>\n<!-- 块的副本数-->\n        <property>\n                <name>dfs.replication</name>\n                <value>3</value>\n        </property>\n<!-- 块的大小(128M),下面的单位是字节-->\n        <property>\n                <name>dfs.blocksize</name>\n                <value>134217728</value>\n        </property>\n<!-- secondarynamenode守护进程的http地址：主机名和端口号。参考守护进程布局-->\n        <property>\n                <name>dfs.namenode.secondary.http-address</name>\n                <value>master:9868</value>\n        </property>\n<!-- namenode守护进程的http地址：主机名和端口号。参考守护进程布局-->\n        <property>\n                <name>dfs.namenode.http-address</name>\n                <value>master:9870</value>\n        </property>\n<!--是否开通HDFS的Web接口，3.0版本后默认端口是9870-->\n        <property>\n\t\t<name>dfs.webhdfs.enabled</name>\n                <value>true</value>\n        </property>\n</configuration>\n```\n\n#### 2.6.6 mapred-site.xml:\n\n```sh\n[root@master hadoop]# vi mapred-site.xml \n```\n\n```xml\n<configuration>\n<!-- 指定mapreduce使用yarn资源管理器-->\n        <property>\n                <name>mapreduce.framework.name</name>\n                <value>yarn</value>\n        </property>\n<!-- 配置作业历史服务器的地址-->\n        <property>\n                <name>mapreduce.jobhistory.address</name>\n                <value>master:10020</value>\n        </property>\n<!-- 配置作业历史服务器的http地址-->\n        <property>\n                <name>mapreduce.jobhistory.webapp.address</name>\n                <value>master:19888</value>\n        </property>\n<!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常-->\n        <property>\n       \t\t\t<name>yarn.app.mapreduce.am.env</name>\n        \t\t<value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t\t</property>\n\t\t<property>\n      \t\t  <name>mapreduce.map.env</name>\n      \t\t  <value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t\t</property>\n\t\t<property>\n       \t\t <name>mapreduce.reduce.env</name>\n      \t\t <value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t\t</property>   \n</configuration>\n```\n\n#### 2.6.7 yarn-site.xml:\n\n```sh\n[root@master hadoop]# vi yarn-site.xml\n```\n\n```xml\n<configuration>\n<!-- Site specific YARN configuration properties -->\n\t<!-- NodeManager获取数据的方式shuffle -->\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services</name>\n\t\t<value>mapreduce_shuffle</value>\n\t</property>\n\t<!-- 指定YARN的ResourceManager的地址 -->\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname</name>\n\t\t<value>master</value>\n\t</property>\n\t<!-- yarn的web访问地址 -->\n\t<property>\n\t\t<name>yarn.resourcemanager.webapp.address</name>\n\t\t<value>master:8088</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.resourcemanager.webapp.https.address</name>\n\t\t<value>master:8090</value>\n\t</property>\n\t<!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 -->\n\t<property>\n\t\t<name>yarn.log-aggregation-enable</name>\n\t\t<value>true</value>\n\t</property>\n\t<!-- 设置聚合日志在hdfs上的保存时间 -->\n\t<property>\n\t\t<name>yarn.log-aggregation.retain-seconds</name>\n\t\t<value>604800</value>\n\t</property>\n</configuration>\n```\n\n以前hadoop 2.X 版本，访问web界面，hdfs端口号是50070，现在3.X版本，端口号是9870（最好自己指定端口号）\n\n#### 2.6.8 配置好后分发到副节点（别忘了环境变量也要再次分发）：\n\n```sh\n[root@master module]# scp /etc/profile root@slave1:/etc/profile\n[root@master module]# scp /etc/profile root@slave2:/etc/profile\n\n[root@master module]# scp -r /opt/module/hadoop root@slave1:/opt/module\n[root@master module]# scp -r /opt/module/hadoop root@slave2:/opt/module\n```\n\n分发完后去副节点刷新环境变量\n\n#### 2.6.9 初始化namenode：\n\n```sh\n[root@master ~]# hdfs namenode -format\n```\n\n结果：\n\n![image-20230320183413920](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630315.png)\n\n#### 2.6.10 开启集群：\n\n简易启动：\n\n```sh\n[root@master ~]# start-all.sh \n```\n\n查看结果:\n\n```sh\n方法1:\njps\n方法2:(手动添加脚本)\njpsall\n```\n\n结果：\n\n![](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630752.png)\n\n![image-20240105174003166](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051740271.png)\n\n### 2.7 web端口访问测试\n\nhttp://ip:9870\n\nhttp://ip:8088\n\n![image-20240105153102460](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531566.png)\n\n![image-20240105153114530](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531631.png)\n\n\n\n![image-20240105153148000](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531093.png)\n\n\n\n完成\n\n## 3. Hadoop HA\n\n### 3.1 部署zookeeper集群\n\n#### 3.1.1 解压所需压缩包并重命名\n\n```sh\n[root@master ~]# tar -zxvf /opt/software/zookeeper-3.4.6.tar.gz -C /opt/module/\n[root@master ~]# mv /opt/module/zookeeper-3.4.6/ /opt/module/zookeeper\n```\n\n> 创建数据目录和日志目录\n\n```sh\n#数据目录\nmkdir /opt/module/zookeeper/data\n#日志目录\nmkdir /opt/module/zookeeper/logs\n```\n\n#### 3.1.2 配置环境变量\n\n> 所有节点添加\n\n添加环境变量:\n\n```sh\n#zookeeper\nexport ZK_HOME=/opt/module/zookeeper\nexport PATH=$PATH:$ZK_HOME/bin\n```\n\n```sh\ncat >>/etc/profile<<EOF\n#zookeeper\nexport ZK_HOME=/opt/module/zookeeper\nexport PATH=\\$PATH:\\$ZK_HOME/bin\nEOF\n```\n\n刷新生效:\n\n```sh\nsource /etc/profile\n```\n\n#### 3.1.3 配置zoo.cfg文件\n\n```sh\n创建数据目录和日志目录\n[root@master ~]# mkdir /opt/module/zookeeper/{data,logs}\n[root@master ~]# cp /opt/module/zookeeper/conf/zoo_sample.cfg /opt/module/zookeeper/conf/zoo.cfg\n[root@master ~]# vi /opt/module/zookeeper/conf/zoo.cfg\n```\n\n> 配置内容如下:\n\n```sh\n[root@master conf]# cat zoo.cfg \ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/opt/module/zookeeper/data\ndataLogDir=/opt/module/zookeeper/logs\nclientPort=2181\nserver.1=master:2888:3888\nserver.2=slave1:2888:3888\nserver.3=slave2:2888:3888\n```\n\n配置详解:\n\n```sh\n[root@kafka1 opt]# grep -Ev \"#|^$\" /usr/local/zookeeper/conf/zoo.cfg \ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/opt/module/zookeeper/data\ndataLogDir=/opt/module/zookeeper/logs\nclientPort=2181\nmaxClientCnxns=4096\t#(可选)\nautopurge.snapRetainCount=128   # /opt/zookeeper里保存快照的最大数量(可选)\nautopurge.purgeInterval=1   # 几小时清理一次(可选)\n# 可以用主机名，因为设置了映射\nserver.1=master:2888:3888\nserver.2=slave1:2888:3888\nserver.3=slave2:2888:3888\n\n配置参数解读：\nserver.A=B:C:D\n\nA是一个数字，表示这个是第几号服务器。myid中的编号就是这个值。zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。\nB是这个服务器的地址。\nC是这个服务器Follower与集群中的Leader服务器交换信息的端口。\nD是万一集群中的leader服务器挂了，需要一个端口来重新进行选举，选举一个新的leader，而这个端口就是用来执行选举时服务器相互通信的端口。\n```\n\n结果:![image-20240105162313246](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201018515.png)\n\n#### 3.1.4 配置`myid`文件\n\n```sh\n[root@master zookeeper]# echo 1 > $ZK_HOME/data/myid\n```\n\n#### 3.1.5 分发文件给子节点并分别修改myid文件\n\n> :warning:注意:如果子节点没有配置环境变量,也要一同分发\n\n分发:\n\n```sh\n[root@master ~]# scp -r /opt/module/zookeeper/ root@slave1:/opt/module/\n[root@master ~]# scp -r /opt/module/zookeeper/ root@slave2:/opt/module/\n```\n\n修改myid文件:\n\nslave1:\n\n```sh\n[root@slave1 ~]# echo 2 > /opt/module/zookeeper/data/myid\n[root@slave1 ~]# echo 2 > $ZK_HOME/data/myid\n```\n\nslave2:\n\n```sh\n[root@slave2 ~]# echo 3 > /opt/module/zookeeper/data/myid\n[root@slave2 ~]# echo 3 > $ZK_HOME/data/myid\n```\n\n#### 3.1.6 启动zk服务\n\n所有节点启动:\n\n```sh\n/opt/module/zookeeper/bin/zkServer.sh start\n```\n\n查看启动状态:\n\n```sh\n/opt/module/zookeeper/bin/zkServer.sh status\n```\n\n\n\nmaster:![image-20240105165336746](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020411.png)\n\nslave1:![image-20240105165353343](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020560.png)\n\nslave2:![image-20240105165433958](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020484.png)\n\n### 3.2 配置Hadoop HA\n\n操作步骤和完全分布式一样，主要修改配置文件，这里从`2.6`开始\n\n#### 3.2.1 hadoop-env.sh配置\n\n添加以下内容：\n\n```sh\nexport JAVA_HOME=/opt/module/jdk1.8.0_162\nexport HDFS_NAMENODE_USER=root\nexport HDFS_DATANODE_USER=root\nexport HDFS_SECONDARYNAMENODE_USER=root\nexport YARN_RESOURCEMANAGER_USER=root\nexport YARN_NODEMANAGER_USER=root\n#ha新增\nexport HDFS_JOURNALNODE_USER=root\nexport HDFS_ZKFC_USER=root\n```\n\n如下：\n\n![image-20240220200709576](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202007642.png)\n\n#### 3.2.2 workers配置\n\n添加集群信息：\n\n```sh\n[root@master hadoop]# cat workers\nmaster\nslave1\nslave2\n```\n\n#### 3.3.3 core-site.xml配置\n\n```sh\n[root@master hadoop]# vim core-site.xml\n```\n\n添加以下配置：\n\n``` xml\n<configuration>\n<!-- hdfs的地址名称：schame,ip,port-->\n        <property>\n                <name>fs.defaultFS</name>\n                <value>hdfs://master:9000</value>\n        </property>\n<!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 -->\n        <property>\n                <name>hadoop.tmp.dir</name>\n                <value>/root/hadoopdir/tmp</value>\n        </property>\n<!-- ha.zookeeper.quorum 指定zookeeper服务,新增配置 -->\n    \t<property>\n\t\t\t\t<name>ha.zookeeper.quorum</name>\n            \t<value>master:2181,slave1:2181,slave2:2181</value>\n    \t</property>\n</configuration>\n```\n\n#### 3.3.4 hdfs-site.xml配置:star:\n\n```sh\n[root@master hadoop]# vim hdfs-site.xml\n```\n\n添加以下内容：\n\n```xml\n<configuration>\n<!-- namenode是一个组，指定namenode的组名称，自己可以定义-->\n        <property>\n                <name>dfs.nameservices</name>\n                <value>mycluster</value>\n        </property>\n<!-- 指定namenode组的成员-->\n        <property>\n                <name>dfs.ha.namenodes.mycluster</name>\n                <value>nn1,nn2</value>\n        </property>\n<!-- 角色1 的rpc 地址及端口号-->\n        <property>\n                <name>dfs.namenode.rpc-address.mycluster.nn1</name>\n                <value>master:9000</value>\n        </property>\n<!-- 角色2 的rpc 地址及端口号-->\n        <property>\n                <name>dfs.namenode.rpc-address.mycluster.nn2</name>\n                <value>slave1:9000</value>\n        </property>\n<!-- Namenode 1 的地址及端口号-->\n        <property>\n                <name>dfs.namenode.http-address.mycluster.nn1</name>\n                <value>master:9870</value>\n        </property>   \n<!-- Namenode 2 的地址及端口号-->\n        <property>\n                <name>dfs.namenode.http-address.mycluster.nn2</name>\n                <value>slave1:9870</value>\n        </property> \n<!--JournalNode 的地址及端口号-->\n        <property>\n                <name>dfs.namenode.shared.edits.dir</name>\n                <value>qjournal://master:8485;slave1:8485;slave2:8485/mycluster</value>\n        </property>\n<!-- namenode守护进程管理的元数据文件fsimage存储的位置-->\n        <property>\n                <name>dfs.namenode.name.dir</name>\n                <value>/root/hadoopdir/dfs/name</value>\n        </property>\n<!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处-->\n        <property>\n                <name>dfs.datanode.data.dir</name>\n                <value>/root/hadoopdir/dfs/data</value>\n        </property>\n<!--JournalNode 的数据存放地址-->\n        <property>\n                <name>dfs.journalnode.edits.dir</name>\n                <value>/root/hadoopdir/journal</value>\n        </property>\n<!--Failover 类服务名-->\n        <property>\n                <name>dfs.client.failover.proxy.provider.mycluster</name>\n                <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>\n        </property>\n<!--远程管理方式，sshfence 使用 ssh 远程管理-->\n        <property>\n                <name>dfs.ha.fencing.methods</name>\n               <!-- <value>sshfence</value>-->\n               <!--但如果只配置sshfence，如果在机器宕机后不可达，则sshfence会返回false，即fence失败，所以得要配置成-->\n                <value>shell(true)</value>\n        </property>\n<!--ssh 私钥的位置-->\n        <property>\n                <name>dfs.ha.fencing.ssh.private-key-files</name>\n                <value>/root/.ssh/id_rsa</value>\n        </property>\n<!--配置自动故障切换，true【自动故障切换】，false【手动故障切换】-->\n        <property>\n                <name>dfs.ha.automatic-failover.enabled</name>\n                <value>true</value>\n        </property>\n<!--文件副本数量-->\n        <property>\n                <name>dfs.replication</name>\n                <value>3</value>\n        </property>   \n</configuration>\n```\n\n#### 3.3.5 mapred-site.xml配置\n\n```xml\n<configuration>\n\n<!-- 指定mapreduce使用yarn资源管理器-->\n        <property>\n                <name>mapreduce.framework.name</name>\n                <value>yarn</value>\n        </property>\n<!-- 配置作业历史服务器的地址-->\n        <property>\n                <name>mapreduce.jobhistory.address</name>\n                <value>master:10020</value>\n        </property>\n<!-- 配置作业历史服务器的http地址-->\n        <property>\n                <name>mapreduce.jobhistory.webapp.address</name>\n                <value>master:19888</value>\n        </property>\n<!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常-->\n        <property>\n       \t\t<name>yarn.app.mapreduce.am.env</name>\n        \t<value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t</property>\n\n\t<property>\n      \t\t<name>mapreduce.map.env</name>\n      \t\t<value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t</property>\n\n\t<property>\n       \t\t<name>mapreduce.reduce.env</name>\n      \t\t<value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t</property>    \n\n</configuration>\n```\n\n#### 3.3.6 yarn-site.xml配置:star:\n\n```xml\n<configuration>\n<!-- NodeManager获取数据的方式shuffle -->\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services</name>\n\t\t<value>mapreduce_shuffle</value>\n\t</property>\n<!--激活HA 配置-->\n    <property>\n\t\t<name>yarn.resourcemanager.ha.enabled</name>\n\t\t<value>true</value>\n\t</property>\n<!-- 管理节点状态自动恢复 -->\n\t<property>\n\t\t<name>yarn.resourcemanager.recovery.enable</name>\n\t\t<value>true</value>\n\t</property>\n<!-- 定义数据状态保持介质 -->\n\t<property>\n\t\t<name>yarn.resourcemanager.store.class</name>\n\t\t<value>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore</value>\n\t</property>\n<!--指定zookeeper的服务地址，为了防止单节点故障，指定三个节点-->\n\t<property>\n\t\t<name>yarn.resourcemanager.zk-address</name>\n\t\t<value>master:2181,slave1:2181,slave2:2181</value>\n\t</property>\n<!--集群 ID-->\n\t<property>\n\t\t<name>yarn.resourcemanager.cluster-id</name>\n\t\t<value>yarn-ha</value>\n\t</property>\n<!--定义两个 resourcemanager 角色-->\n\t<property>\n\t\t<name>yarn.resourcemanager.ha.rm-ids</name>\n\t\t<value>rm1,rm2</value>\n\t</property>  \n<!--角色1 对应主机地址-->\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname.rm1</name>\n\t\t<value>master</value>\n\t</property>   \n<!--角色2 对应主机地址-->\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname.rm2</name>\n\t\t<value>slave1</value>\n\t</property>         \n<!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 (可选)-->\n\t<property>\n\t\t<name>yarn.log-aggregation-enable</name>\n\t\t<value>true</value>\n\t</property>\n<!-- 设置聚合日志在hdfs上的保存时间（可选） -->\n\t<property>\n\t\t<name>yarn.log-aggregation.retain-seconds</name>\n\t\t<value>604800</value>\n\t</property>\n</configuration>\n```\n\n> 配置完成之后分发到子节点,再进行服务启动准备:warning:\n\n\n\n### 3.3 服务启动准备\n\n#### 3.3.1 启动journalnode服务\n\n> `所有节点`启动journalnode\n\n```sh\nhadoop-daemon.sh start journalnode\n```\n\n#### 3.3.2 初始化namenode\n\n> master(`nn1`)节点初始化namenode\n\n```sh\nhdfs namenode -format\n```\n结果如下：\n\n![image-20240220195039832](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201950935.png)\n\n\n> 同步元数据到`nn2`（slave1）\n\n:one: 方式1: 直接从主节点(`nn1`)发送到主节点(`nn2`)\n\n```sh\nscp -r hadoopdir/dfs/ root@slave1:/root/hadoopdir\n```\n\n![](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201951392.png)\n\n:two: 方式2:在主节点(`nn2`)使用指令同步\n\n首先需要在主几点(`nn1`)启动namenode服务,否则在主节点(`nn2`)节点中同步元数据会失败,\n\n提示找不到`master`的namenode服务,如下图:\n\n![image-20241006232852729](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062328858.png)\n\n关键错误是`“Connection refused”`，这表明备用NameNode无法连接到活动NameNode（192.168.10.11:9000）。\n\n**正确步骤如下:**\n\n1.在master(nn1)启动namenode服务:\n\n```sh\n[root@master ~]# hdfs --daemon start namenode\n```\n\n2.在slave1(nn2)使用指令同步元数据\n\n```sh\n[root@slave1 ~]# hdfs namenode -bootstrapStandby\n```\n\n![image-20241006232636095](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062326234.png)\n\n同步需要进一步确定是否成功,可以直接查看`/root/hadoopdir`数据目录下是否成功同步过来,如下图:\n\n![image-20241006233249156](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062332270.png)\n\n(方式2和方式1一样,所以我觉得直接使用scp更高效点ovO...)\n\n#### 3.3.3 master节点初始化zk\n\n```sh\nhdfs zkfc -formatZK\n```\n结果如下：\n\n![image-20241006235656731](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062356870.png)\n\n#### 3.3.4 启动集群\n\n在主节点（master）执行：\n\n```sh\nstart-all.sh\n```\n\n所有节点启动(已启动则忽略):\n\n```sh\nhadoop-daemon.sh start journalnode\n```\n\n启动后的进程如下：\n\n![image-20240220195417889](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201954941.png)\n\n### 3.4 使用命令分别查看服务nn2与rm2进程状态\n\n```sh\n[root@master ~]# hdfs haadmin -getServiceState nn2\nactive\n```\n\n![image-20240314125738637](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141257798.png)\n\n```sh\n[root@master ~]# yarn rmadmin -getServiceState rm2\nactive\n```\n\n![image-20240314125900240](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141259321.png)\n\n全部服务状态：\n\n```sh\n[root@master ~]# yarn rmadmin -getServiceState rm1\nstandby\n[root@master ~]# yarn rmadmin -getServiceState rm2\nactive\n[root@master ~]# hdfs haadmin -getServiceState nn1\nstandby\n[root@master ~]# hdfs haadmin -getServiceState nn2\nactive\n```\n\n![image-20240314130004169](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141300299.png)\n\n### 3.5 测试HA\n\n单服务启动的方式：\n\n```sh\nhdfs --daemon start namenode\n```\n\n> 进入192.168.10.10:9870 / master:9870  `主节点`\n\n![image-20240220195746352](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201957420.png)\n\n> 进入192.168.10.20:9870 / slave1:9870\t`备用节点`\n\n![image-20240220195931025](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201959110.png)\n\n> kill 掉master的namenode服务刷新slave1的web端查看\n\n![image-20240220200123248](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202001326.png)\n\nmaster的web端口：\n\n![image-20240220200224797](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202002860.png)\n\n发现此时的master节点的namenode已经无法访问，这里手动启动namenode服务：\n\n```sh\n[root@master ~]# hdfs --daemon start namenode\n```\n\n![image-20240220200436908](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202004994.png)\n\n\n\nHadoop HA部署完成\n\n\n\n## 4. HDFS 操作指令\n\n常用指令:\n\n| 参数                                | 作用                                                         |\n| ----------------------------------- | ------------------------------------------------------------ |\n| hdfs dfs -cat                       | 用于查看分布式文件系统中指定文件里面的内容                   |\n| hdfs dfs -chmod -R                  | 对分布式文件系统中的文件进行授权                             |\n| hdfs dfs -copyFromLocal -f -l -p    | 把本地的文件复制到 HDFS 路径中                               |\n| hdfs dfs -copyToLocal -p -ignoreCrc | 把分布式文件系统中的文件复制到本地路径中                     |\n| hdfs dfs -put (-f -p -l)            | 用于来将本地的文件上传到HDFS分布式文件系统中                 |\n| Hdfs dfs -find                      | 作用是用于查询分布式文件系统中的文件                         |\n| hdfs dfs -help                      | 用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书 |\n| hdfs dfs -mv                        | 将分布式文件系统中的文件进行移动                             |\n| hdfs dfs -moveFromLocal             | 把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）   |\n| hdfs dfs -moveToLocal               | 把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地） |\n| hdfs dfs -mkdir -p                  | 用来创建HDFS分布式文件系统中的文件                           |\n| hdfs dfs -rm -f -r                  | 将分布式文件系统中的文件进行删除                             |\n| hdfs dfs -rmdir                     | 用来进行递归删除文件/文件夹，文件夹中有文件也能删除          |\n\n全部指令:\n\n```powershell\n1、hdfs dfs -cat ：用于查看分布式文件系统中指定文件里面的内容\n2、hdfs dfs -checksum：用来查看指定文件的MD5值\n3、hdfs dfs -chmod -R：对分布式文件系统中的文件进行授权\n4、Hdfs dfs -copyFromLocal -f -l -p：把本地的文件复制到 HDFS 路径中\n5、Hdfs dfs -copyToLocal -p -ignoreCrc ：把分布式文件系统中的文件复制到本地路径中\n6、Hdfs dfs -count -q -h：用来进行统计计数操作\n7、dfs dfs -count -q -h：用来进行统计计数操作\n8、Hdfs dfs -cp -f -p：该命令的作用相当于我们windwos下的复制命令，作用是从 HDFS 的一个路径复制（拷贝）到 HDFS 的另一个路径\n9、Hdfs dfs -createSnapshot ：用来创建分布式文件系统的快照\n10、Hdfs dfs -deleteSnapshot：作用是用于删除分布式文件系统的快照\n11、Hdfs dfs -df -h：用于查看分布式文件系统硬盘的使用情况\n12、Hdfs dfs -du -s -h：用来查看分布式文件系统中指定文件的大小\n13、Hdfs dfs -expunge：用来对分布式文件系统中垃圾箱进行清空操作\n14、Hdfs dfs -find：作用是用于查询分布式文件系统中的文件\n15、Hdfs dfs -get -p -crc -ignoreCrc：作用是将分布式文件系统中的文件传输到本地机器上，相当于下载\n16、hdfs dfs -getfacl -R：获取对象或目录的 ACL（访问控制列表）\n17、hdfs dfs -getfatter -R：获取对象或目录的扩展属性\n18、hdfs dfs -getmerge -nl：获取对象属性\n19、hdfs dfs -help：用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书\n20、hdfs dfs -ls -d -h -R ：该命令的作用是列出分布式文件系统中指定路径下的文件列表\n21、hdfs dfs -mkdir -p：用来创建HDFS分布式文件系统中的文件\n22、hdfs dfs -moveFromLocal：把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）\n23、hdfs dfs -moveToLocal：把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地）\n24、hdfs dfs -mv：将分布式文件系统中的文件进行移动\n25、hdfs dfs -put (-f -p -l)：用于来将本地的文件上传到HDFS分布式文件系统中\n26、hdfs dfs -renameSnapshot：用于对分布式文件系统中的快照进行更名\n27、hdfs dfs -rm -f -r：将分布式文件系统中的文件进行删除\n28、hdfs dfs -rmdir ：用来进行递归删除文件/文件夹，文件夹中有文件也能删除\n29、hdfs dfs -setfacl -R：设置对象或目录的 ACL（访问控制列表）\n30、hdfs dfs -setfattr -n：设置对象或目录的扩展属性\n31、hdfs dfs -setrep -R：用来设置 HDFS 中文件的副本数量\n32、hdfs dfs -stat：根据格式显示指定对象的信息\n33、hdfs dfs -tail -f：作用是显示指定文件的末尾\n34、hdfs dfs -test：用来判断指定文件的类型\n35、hdfs dfs -text：作用是以字符形式打印一个文件的内容\n```","source":"_posts/Hadoop环境配置合集.md","raw":"---\ntitle: Hadoop环境配置合集\ndate: 2024-11-10 22:32:04\ntags: Bigdata\ncategories: \n  - 大数据运维系列\n---\n# Hadoop\n\n## 1.Hadoop 概述\n\n**1.1 Hadoop 是什么**\n\n（1）Hadoop是一个由Apache基金会所开发的<font color=\"red\" size=\"3\">分布式系统基础架构</font> \n\n（2）主要解决海量数据的<font color=\"red\" size=\"3\">存储</font>和海量数据的<font color=\"red\" size=\"3\">分析计算</font>问题 \n\n（3）广义上来说，Hadoop通常是指一个更广泛的概念——<font color=\"red\" size=\"3\">Hadoop生态圈</font>\n\n\n\n**1.2 Hadoop 优势**\n\n（1）**高可靠性**：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。 \n\n（2）**高扩展性**：在集群间分配任务数据，可方便的扩展数以千计的节点。 \n\n（3）**高效性**：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。 \n\n（4）**高容错性**：能够自动将失败的任务重新分配。\n\n\n\n**1.3 Hadoop 组成（面试重点）**\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527570.png\" alt=\"在这里插入图片描述\"> \n\n在Hadoop1.x 时代，Hadoop中的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大。 在Hadoop2.x时代，增加了Yarn。Yarn只负责资源的调度，MapReduce 只负责运算。 ==Hadoop3.x在组成上没有变化。==\n\n\n\n**1.3.1 HDFS 架构概述**\n\nHadoop Distributed File System，简称<font color=\"red\" size=\"3\">HDFS</font>，是一个分布式文件系统。\n\n（1）`NameNode`（nn）：存储文件的**元数据**，如**文件名**，**文件目录结构**，**文件属性**（生成时间、副本数、文件权限），以及每个文件的**块列表**和**块所在的DataNode**等。 \n\n（2）`DataNode`(dn)：在本地文件系统**存储文件块数据**，以及**块数据的校验和**。 \n\n（3）`Secondary NameNode`(2nn)：**每隔一段时间对NameNode元数据备份**。\n\n\n\n\n\n**1.3.2 YARN 架构概述**\n\nYet Another Resource Negotiator 简称YARN ，另一种资源协调者，是Hadoop 的资源管理器。\n\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111625192.png\" alt=\"在这里插入图片描述\">\n\n`ResourceManager`(RM)：整个集群资源（内存、CPU等）的管理者 \n\n`NodeManager`(NM)：单个节点服务器资源的管理者。 \n\n`ApplicationMaster`(AM)：单个任务运行的管理者。 \n\n`Container`：容器，相当于一台独立的服务器，里面封装了任务运行所需要的资源，如**内存、CPU、磁盘、网络**等。\n\n\n\n说明： \n\n（1）客户端可以有多个 \n\n（2）集群上可以运行多个ApplicationMaster \n\n（3）每个NodeManager上可以有多个Container\n\n\n\n**1.3.3 MapReduce 架构概述**\n\nMapReduce 将计算过程分为两个阶段：Map 和Reduce 1）Map 阶段并行处理输入数据 2）Reduce 阶段对Map 结果进行汇总 \n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527808.png\" alt=\"在这里插入图片描述\">\n\n**1.3.4 HDFS、YARN、MapReduce 三者关系**\n\n如图所示：\n\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527601.png\" alt=\"在这里插入图片描述\">\n\n**1.3.5 大数据技术生态体系**\n\n如图所示： <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527584.png\" alt=\"在这里插入图片描述\"> \n\n图中涉及的技术名词解释如下：\n\n（1）`Sqoop`：Sqoop 是一款开源的工具，主要用于在Hadoop、Hive 与传统的数据库（MySQL）间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop 的HDFS 中，也可以将HDFS 的数据导进到关系型数据库中。 \n\n（2）`Flume`：Flume 是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据。 （3）`Kafka`：Kafka 是一种高吞吐量的分布式发布订阅消息系统。 \n\n（4）`Spark`：Spark 是当前最流行的开源大数据内存计算框架。可以基于Hadoop 上存储的大数据进行计算。\n\n（5）`Flink`：Flink 是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多。 \n\n（6）`Oozie`：Oozie 是一个管理Hadoop 作业（job）的工作流程调度管理系统。 \n\n（7）`Hbase`：HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。 \n\n（8）`Hive`：Hive 是基于Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL 查询功能，可以将SQL 语句转换为MapReduce 任务进行运行。其优点是学习成本低，可以通过类SQL 语句快速实现简单的MapReduce 统计，不必开发专门的MapReduce 应用，十分适合数据仓库的统计分析。 \n\n（9）`ZooKeeper`：它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。\n\n\n\n**1.3.6 推荐系统框架图**\n\n推荐系统项目框架\n\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527591.png\" alt=\"在这里插入图片描述\">\n\n**1.3.7 常用端口号说明**\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111537682.png\" alt=\"在这里插入图片描述\">\n\n## 2. Hadoop 完全分部署运行环境搭建\n\n环境说明:\n\n| 容器   | 容器ip       |\n| ------ | ------------ |\n| master | 192.168.1.10 |\n| slave1 | 192.168.1.20 |\n| slave2 | 192.168.1.30 |\n\n### 2.1 配置主机名\n\n```sh\nhostnamectl set-hostname master && bash\nhostnamectl set-hostname slave1 && bash\nhostnamectl set-hostname slave2 && bash\n```\n\n### 2.2 修改hosts，添加映射，关闭防火墙\n\n> 所有节点执行\n\n```sh\n[root@master ~]# cat /etc/hosts\n127.0.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nff00::0\tip6-mcastprefix\nff02::1\tip6-allnodes\nff02::2\tip6-allrouters\n192.168.1.10\tmaster\n192.168.1.20\tslave1\n192.168.1.30\tslave2\n```\n\n```sh\nsystemctl stop firewalld\nsystemctl disable firewalld\n```\n\n### 2.3 设置三台主机的免密登录\n\n#### 2.3.1 生成免密公钥\n\n```sh\n[root@master ~]# ssh-keygen -t rsa\t\t#然后一直回车\n或者\n[root@master ~]# ssh-keygen -f ~/.ssh/id_rsa -P '' #免回车\n```\n\n![image-20230321114300354](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607877.png)\n\n#### 2.3.2 复制公钥到服务器\n\n```hss\nssh-copy-id master\nssh-copy-id slave1\nssh-copy-id slave2\n```\n\n![image-20230321115337762](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607997.png)\n\n(另外两个节点也是如此操作，这里就不演示了)\n\n\n\n### 2.4 JDK配置\n\n解压文件到相应的位置：\n\n```sh\n[root@master ~]# tar -zxvf /opt/software/jdk-8u162-linux-x64.tar.gz -C /opt/module/\n\n[root@master ~]# cd /opt/module/\t#进入解压目录，可以给解压后的文件改个名字，方便记忆\n[root@master module]# mv jdk1.8.0_162/ jdk\n```\n\n设置jdk环境变量：\n\n```sh\n[root@master module]# vi /etc/profile\n```\n\n在末尾添加如下配置：\n\n```sh\n#JAVA_HOME\nexport JAVA_HOME=/opt/module/jdk\nexport PATH=$PATH:$JAVA_HOME/bin:$JAVA_HOME/jre/bin\n```\n\n刷新环境变量：\n\n```sh\n[root@master module]# source /etc/profile\n```\n\n配置完后即可查看jdk版本号：\n\n```sh\n[root@master module]# java -version\n```\n\n![image-20230321122027954](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617633.png)\n\n分发JDK和环境变量到两个副节点：\n\n```sh\n[root@master module]# scp /etc/profile root@slave1:/etc/profile\n[root@master module]# scp /etc/profile root@slave2:/etc/profile\n\n[root@master module]# scp -rq jdk/ root@slave1:/opt/module/\n[root@master module]# scp -rq jdk/ root@slave2:/opt/module/\n```\n\n![image-20230321122308314](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617652.png)\n\n分发到两个副节点后，刷新环境变量，查看JAVA版本：\n\nslave1节点：\n\n![image-20230321122633530](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617692.png)\n\nslave2节点：\n\n![image-20230321122717175](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617803.png)\n\n基础环境搭建完成！！\n\n\n\n> 添加jpsall脚本(可选)\n\n```sh\nvi $JAVA_HOME/bin/jpsall\nchmod +x $JAVA_HOME/bin/jpsall\n```\n\n脚本内容如下:\n\n```sh\n#!/bin/bash\nfor hostname in master slave1 slave2\ndo\n  echo ===========$hostname==========\n  ssh $hostname \". /etc/profile; jps\"\ndone\n```\n\n### 2.5 Hadoop环境搭建\n\n> 前提：已完成3个节点的免密登录，jdk配置\n\n#### 2.5.1 解压包到相应位置：\n\n```sh\n[root@master module]# tar -zxvf /opt/software/hadoop-3.1.3.tar.gz -C /opt/module/\n[root@master module]# mv hadoop-3.1.3/ hadoop\t#改一下名字，方便记忆\n```\n\n#### 2.5.2 添加hadoop环境变量\n\n```sh\n[root@master module]# vi /etc/profile\n```\n\n在末尾添加以下内容：\n\n```sh\n#HADOOP\nexport HADOOP_HOME=/opt/module/hadoop\nexport PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\nexport HADOOP_CLASSPATH=`$HADOOP_HOME/bin/hadoop classpath`\nexport HDFS_NAMENODE_USER=root\nexport HDFS_DATANODE_USER=root\nexport HDFS_SECONDARYNAMENODE_USER=root\nexport YARN_RESOURCEMANAGER_USER=root\nexport YARN_NODEMANAGER_USER=root\n\n#备注：3.0后的版本需要指定服务用户\n```\n\n：wq 保存退出后，刷新环境变量：\n\n```sh\n[root@master module]# source /etc/profile\n```\n\n配置好后，即可直接查看hadoop 版本号\n\n```sh\n[root@master module]# hadoop version\n```\n\n![image-20230321124056646](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111621421.png)\n\n### 2.6 修改6个主配置文件\n\n- :one: core.site.xml \n- :two: hdfs-site.xml \n- :three: mapred-site.xml \n- :four:yarn-site.xml \n- :five: hadoop-env.sh \n- :six: workers \n\n\n\n==配置参考官方文档==\n\n> 目录:`\\hadoop-3.1.3\\share\\doc\\hadoop`\n\n![image-20240104222735234](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042227312.png)\n\n![image-20240104222630568](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042226052.png)\n\n\n\n或直接查看官方配置文件:\n\n```sh\nfind ./ -name \"core-de*\" -o -name \"hdfs-de*\" -o -name \"mapred-de*\" -o -name \"yarn-de*\"\n```\n\n![image-20240105152739131](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051527779.png)\n\n(记住主要参数名即可)\n\n#### 2.6.1先进入配置目录\n\n```SH\n[root@master module]# cd hadoop/etc/hadoop/\n[root@master hadoop]# ll\n```\n\n可以看到如下文件：\n\n![image-20230321124310396](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630756.png)\n\n我们只用修改其中的6条\n\n#### 2.6.2 hadoop-env.sh配置：\n\n```sh\n[root@master hadoop]# vi hadoop-env.sh #告诉hadoop jdk在哪里\n```\n\n![image-20230321124524896](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630692.png)\n\n#### 2.6.3 workers配置\n\n（根据自己的集群来进行配置）：\n\n```sh\n[root@master hadoop]# vi workers\nmaster\nslave1\nslave2\n```\n\n![image-20230321124806539](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630688.png)\n\n#### 2.6.4 core.site.xml配置：\n\n![image-20240104222915427](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042229494.png)\n\n```sh\n[root@master hadoop]# vi core-site.xml\n```\n\n```xml\n<configuration>\n<!-- hdfs的地址名称：schame,ip,port-->\n        <property>\n                <name>fs.defaultFS</name>\n                <value>hdfs://master:9000</value>\n        </property>\n<!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 -->\n        <property>\n                <name>hadoop.tmp.dir</name>\n                <value>/root/hadoopdir/tmp</value>\n        </property>\n</configuration>\n```\n\n#### 2.6.5 hdfs.site.xml:\n\n```sh\n[root@master hadoop]# vi hdfs-site.xml \n```\n\n```xml\n<configuration>\n<!-- namenode守护进程管理的元数据文件fsimage存储的位置-->\n        <property>\n                <name>dfs.namenode.name.dir</name>\n                <value>/root/hadoopdir/dfs/name</value>\n        </property>\n<!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处-->\n        <property>\n                <name>dfs.datanode.data.dir</name>\n                <value>/root/hadoopdir/dfs/data</value>\n        </property>\n<!-- 块的副本数-->\n        <property>\n                <name>dfs.replication</name>\n                <value>3</value>\n        </property>\n<!-- 块的大小(128M),下面的单位是字节-->\n        <property>\n                <name>dfs.blocksize</name>\n                <value>134217728</value>\n        </property>\n<!-- secondarynamenode守护进程的http地址：主机名和端口号。参考守护进程布局-->\n        <property>\n                <name>dfs.namenode.secondary.http-address</name>\n                <value>master:9868</value>\n        </property>\n<!-- namenode守护进程的http地址：主机名和端口号。参考守护进程布局-->\n        <property>\n                <name>dfs.namenode.http-address</name>\n                <value>master:9870</value>\n        </property>\n<!--是否开通HDFS的Web接口，3.0版本后默认端口是9870-->\n        <property>\n\t\t<name>dfs.webhdfs.enabled</name>\n                <value>true</value>\n        </property>\n</configuration>\n```\n\n#### 2.6.6 mapred-site.xml:\n\n```sh\n[root@master hadoop]# vi mapred-site.xml \n```\n\n```xml\n<configuration>\n<!-- 指定mapreduce使用yarn资源管理器-->\n        <property>\n                <name>mapreduce.framework.name</name>\n                <value>yarn</value>\n        </property>\n<!-- 配置作业历史服务器的地址-->\n        <property>\n                <name>mapreduce.jobhistory.address</name>\n                <value>master:10020</value>\n        </property>\n<!-- 配置作业历史服务器的http地址-->\n        <property>\n                <name>mapreduce.jobhistory.webapp.address</name>\n                <value>master:19888</value>\n        </property>\n<!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常-->\n        <property>\n       \t\t\t<name>yarn.app.mapreduce.am.env</name>\n        \t\t<value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t\t</property>\n\t\t<property>\n      \t\t  <name>mapreduce.map.env</name>\n      \t\t  <value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t\t</property>\n\t\t<property>\n       \t\t <name>mapreduce.reduce.env</name>\n      \t\t <value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t\t</property>   \n</configuration>\n```\n\n#### 2.6.7 yarn-site.xml:\n\n```sh\n[root@master hadoop]# vi yarn-site.xml\n```\n\n```xml\n<configuration>\n<!-- Site specific YARN configuration properties -->\n\t<!-- NodeManager获取数据的方式shuffle -->\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services</name>\n\t\t<value>mapreduce_shuffle</value>\n\t</property>\n\t<!-- 指定YARN的ResourceManager的地址 -->\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname</name>\n\t\t<value>master</value>\n\t</property>\n\t<!-- yarn的web访问地址 -->\n\t<property>\n\t\t<name>yarn.resourcemanager.webapp.address</name>\n\t\t<value>master:8088</value>\n\t</property>\n\t<property>\n\t\t<name>yarn.resourcemanager.webapp.https.address</name>\n\t\t<value>master:8090</value>\n\t</property>\n\t<!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 -->\n\t<property>\n\t\t<name>yarn.log-aggregation-enable</name>\n\t\t<value>true</value>\n\t</property>\n\t<!-- 设置聚合日志在hdfs上的保存时间 -->\n\t<property>\n\t\t<name>yarn.log-aggregation.retain-seconds</name>\n\t\t<value>604800</value>\n\t</property>\n</configuration>\n```\n\n以前hadoop 2.X 版本，访问web界面，hdfs端口号是50070，现在3.X版本，端口号是9870（最好自己指定端口号）\n\n#### 2.6.8 配置好后分发到副节点（别忘了环境变量也要再次分发）：\n\n```sh\n[root@master module]# scp /etc/profile root@slave1:/etc/profile\n[root@master module]# scp /etc/profile root@slave2:/etc/profile\n\n[root@master module]# scp -r /opt/module/hadoop root@slave1:/opt/module\n[root@master module]# scp -r /opt/module/hadoop root@slave2:/opt/module\n```\n\n分发完后去副节点刷新环境变量\n\n#### 2.6.9 初始化namenode：\n\n```sh\n[root@master ~]# hdfs namenode -format\n```\n\n结果：\n\n![image-20230320183413920](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630315.png)\n\n#### 2.6.10 开启集群：\n\n简易启动：\n\n```sh\n[root@master ~]# start-all.sh \n```\n\n查看结果:\n\n```sh\n方法1:\njps\n方法2:(手动添加脚本)\njpsall\n```\n\n结果：\n\n![](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630752.png)\n\n![image-20240105174003166](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051740271.png)\n\n### 2.7 web端口访问测试\n\nhttp://ip:9870\n\nhttp://ip:8088\n\n![image-20240105153102460](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531566.png)\n\n![image-20240105153114530](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531631.png)\n\n\n\n![image-20240105153148000](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531093.png)\n\n\n\n完成\n\n## 3. Hadoop HA\n\n### 3.1 部署zookeeper集群\n\n#### 3.1.1 解压所需压缩包并重命名\n\n```sh\n[root@master ~]# tar -zxvf /opt/software/zookeeper-3.4.6.tar.gz -C /opt/module/\n[root@master ~]# mv /opt/module/zookeeper-3.4.6/ /opt/module/zookeeper\n```\n\n> 创建数据目录和日志目录\n\n```sh\n#数据目录\nmkdir /opt/module/zookeeper/data\n#日志目录\nmkdir /opt/module/zookeeper/logs\n```\n\n#### 3.1.2 配置环境变量\n\n> 所有节点添加\n\n添加环境变量:\n\n```sh\n#zookeeper\nexport ZK_HOME=/opt/module/zookeeper\nexport PATH=$PATH:$ZK_HOME/bin\n```\n\n```sh\ncat >>/etc/profile<<EOF\n#zookeeper\nexport ZK_HOME=/opt/module/zookeeper\nexport PATH=\\$PATH:\\$ZK_HOME/bin\nEOF\n```\n\n刷新生效:\n\n```sh\nsource /etc/profile\n```\n\n#### 3.1.3 配置zoo.cfg文件\n\n```sh\n创建数据目录和日志目录\n[root@master ~]# mkdir /opt/module/zookeeper/{data,logs}\n[root@master ~]# cp /opt/module/zookeeper/conf/zoo_sample.cfg /opt/module/zookeeper/conf/zoo.cfg\n[root@master ~]# vi /opt/module/zookeeper/conf/zoo.cfg\n```\n\n> 配置内容如下:\n\n```sh\n[root@master conf]# cat zoo.cfg \ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/opt/module/zookeeper/data\ndataLogDir=/opt/module/zookeeper/logs\nclientPort=2181\nserver.1=master:2888:3888\nserver.2=slave1:2888:3888\nserver.3=slave2:2888:3888\n```\n\n配置详解:\n\n```sh\n[root@kafka1 opt]# grep -Ev \"#|^$\" /usr/local/zookeeper/conf/zoo.cfg \ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/opt/module/zookeeper/data\ndataLogDir=/opt/module/zookeeper/logs\nclientPort=2181\nmaxClientCnxns=4096\t#(可选)\nautopurge.snapRetainCount=128   # /opt/zookeeper里保存快照的最大数量(可选)\nautopurge.purgeInterval=1   # 几小时清理一次(可选)\n# 可以用主机名，因为设置了映射\nserver.1=master:2888:3888\nserver.2=slave1:2888:3888\nserver.3=slave2:2888:3888\n\n配置参数解读：\nserver.A=B:C:D\n\nA是一个数字，表示这个是第几号服务器。myid中的编号就是这个值。zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。\nB是这个服务器的地址。\nC是这个服务器Follower与集群中的Leader服务器交换信息的端口。\nD是万一集群中的leader服务器挂了，需要一个端口来重新进行选举，选举一个新的leader，而这个端口就是用来执行选举时服务器相互通信的端口。\n```\n\n结果:![image-20240105162313246](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201018515.png)\n\n#### 3.1.4 配置`myid`文件\n\n```sh\n[root@master zookeeper]# echo 1 > $ZK_HOME/data/myid\n```\n\n#### 3.1.5 分发文件给子节点并分别修改myid文件\n\n> :warning:注意:如果子节点没有配置环境变量,也要一同分发\n\n分发:\n\n```sh\n[root@master ~]# scp -r /opt/module/zookeeper/ root@slave1:/opt/module/\n[root@master ~]# scp -r /opt/module/zookeeper/ root@slave2:/opt/module/\n```\n\n修改myid文件:\n\nslave1:\n\n```sh\n[root@slave1 ~]# echo 2 > /opt/module/zookeeper/data/myid\n[root@slave1 ~]# echo 2 > $ZK_HOME/data/myid\n```\n\nslave2:\n\n```sh\n[root@slave2 ~]# echo 3 > /opt/module/zookeeper/data/myid\n[root@slave2 ~]# echo 3 > $ZK_HOME/data/myid\n```\n\n#### 3.1.6 启动zk服务\n\n所有节点启动:\n\n```sh\n/opt/module/zookeeper/bin/zkServer.sh start\n```\n\n查看启动状态:\n\n```sh\n/opt/module/zookeeper/bin/zkServer.sh status\n```\n\n\n\nmaster:![image-20240105165336746](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020411.png)\n\nslave1:![image-20240105165353343](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020560.png)\n\nslave2:![image-20240105165433958](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020484.png)\n\n### 3.2 配置Hadoop HA\n\n操作步骤和完全分布式一样，主要修改配置文件，这里从`2.6`开始\n\n#### 3.2.1 hadoop-env.sh配置\n\n添加以下内容：\n\n```sh\nexport JAVA_HOME=/opt/module/jdk1.8.0_162\nexport HDFS_NAMENODE_USER=root\nexport HDFS_DATANODE_USER=root\nexport HDFS_SECONDARYNAMENODE_USER=root\nexport YARN_RESOURCEMANAGER_USER=root\nexport YARN_NODEMANAGER_USER=root\n#ha新增\nexport HDFS_JOURNALNODE_USER=root\nexport HDFS_ZKFC_USER=root\n```\n\n如下：\n\n![image-20240220200709576](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202007642.png)\n\n#### 3.2.2 workers配置\n\n添加集群信息：\n\n```sh\n[root@master hadoop]# cat workers\nmaster\nslave1\nslave2\n```\n\n#### 3.3.3 core-site.xml配置\n\n```sh\n[root@master hadoop]# vim core-site.xml\n```\n\n添加以下配置：\n\n``` xml\n<configuration>\n<!-- hdfs的地址名称：schame,ip,port-->\n        <property>\n                <name>fs.defaultFS</name>\n                <value>hdfs://master:9000</value>\n        </property>\n<!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 -->\n        <property>\n                <name>hadoop.tmp.dir</name>\n                <value>/root/hadoopdir/tmp</value>\n        </property>\n<!-- ha.zookeeper.quorum 指定zookeeper服务,新增配置 -->\n    \t<property>\n\t\t\t\t<name>ha.zookeeper.quorum</name>\n            \t<value>master:2181,slave1:2181,slave2:2181</value>\n    \t</property>\n</configuration>\n```\n\n#### 3.3.4 hdfs-site.xml配置:star:\n\n```sh\n[root@master hadoop]# vim hdfs-site.xml\n```\n\n添加以下内容：\n\n```xml\n<configuration>\n<!-- namenode是一个组，指定namenode的组名称，自己可以定义-->\n        <property>\n                <name>dfs.nameservices</name>\n                <value>mycluster</value>\n        </property>\n<!-- 指定namenode组的成员-->\n        <property>\n                <name>dfs.ha.namenodes.mycluster</name>\n                <value>nn1,nn2</value>\n        </property>\n<!-- 角色1 的rpc 地址及端口号-->\n        <property>\n                <name>dfs.namenode.rpc-address.mycluster.nn1</name>\n                <value>master:9000</value>\n        </property>\n<!-- 角色2 的rpc 地址及端口号-->\n        <property>\n                <name>dfs.namenode.rpc-address.mycluster.nn2</name>\n                <value>slave1:9000</value>\n        </property>\n<!-- Namenode 1 的地址及端口号-->\n        <property>\n                <name>dfs.namenode.http-address.mycluster.nn1</name>\n                <value>master:9870</value>\n        </property>   \n<!-- Namenode 2 的地址及端口号-->\n        <property>\n                <name>dfs.namenode.http-address.mycluster.nn2</name>\n                <value>slave1:9870</value>\n        </property> \n<!--JournalNode 的地址及端口号-->\n        <property>\n                <name>dfs.namenode.shared.edits.dir</name>\n                <value>qjournal://master:8485;slave1:8485;slave2:8485/mycluster</value>\n        </property>\n<!-- namenode守护进程管理的元数据文件fsimage存储的位置-->\n        <property>\n                <name>dfs.namenode.name.dir</name>\n                <value>/root/hadoopdir/dfs/name</value>\n        </property>\n<!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处-->\n        <property>\n                <name>dfs.datanode.data.dir</name>\n                <value>/root/hadoopdir/dfs/data</value>\n        </property>\n<!--JournalNode 的数据存放地址-->\n        <property>\n                <name>dfs.journalnode.edits.dir</name>\n                <value>/root/hadoopdir/journal</value>\n        </property>\n<!--Failover 类服务名-->\n        <property>\n                <name>dfs.client.failover.proxy.provider.mycluster</name>\n                <value>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider</value>\n        </property>\n<!--远程管理方式，sshfence 使用 ssh 远程管理-->\n        <property>\n                <name>dfs.ha.fencing.methods</name>\n               <!-- <value>sshfence</value>-->\n               <!--但如果只配置sshfence，如果在机器宕机后不可达，则sshfence会返回false，即fence失败，所以得要配置成-->\n                <value>shell(true)</value>\n        </property>\n<!--ssh 私钥的位置-->\n        <property>\n                <name>dfs.ha.fencing.ssh.private-key-files</name>\n                <value>/root/.ssh/id_rsa</value>\n        </property>\n<!--配置自动故障切换，true【自动故障切换】，false【手动故障切换】-->\n        <property>\n                <name>dfs.ha.automatic-failover.enabled</name>\n                <value>true</value>\n        </property>\n<!--文件副本数量-->\n        <property>\n                <name>dfs.replication</name>\n                <value>3</value>\n        </property>   \n</configuration>\n```\n\n#### 3.3.5 mapred-site.xml配置\n\n```xml\n<configuration>\n\n<!-- 指定mapreduce使用yarn资源管理器-->\n        <property>\n                <name>mapreduce.framework.name</name>\n                <value>yarn</value>\n        </property>\n<!-- 配置作业历史服务器的地址-->\n        <property>\n                <name>mapreduce.jobhistory.address</name>\n                <value>master:10020</value>\n        </property>\n<!-- 配置作业历史服务器的http地址-->\n        <property>\n                <name>mapreduce.jobhistory.webapp.address</name>\n                <value>master:19888</value>\n        </property>\n<!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常-->\n        <property>\n       \t\t<name>yarn.app.mapreduce.am.env</name>\n        \t<value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t</property>\n\n\t<property>\n      \t\t<name>mapreduce.map.env</name>\n      \t\t<value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t</property>\n\n\t<property>\n       \t\t<name>mapreduce.reduce.env</name>\n      \t\t<value>HADOOP_MAPRED_HOME=${HADOOP_HOME}</value>\n\t</property>    \n\n</configuration>\n```\n\n#### 3.3.6 yarn-site.xml配置:star:\n\n```xml\n<configuration>\n<!-- NodeManager获取数据的方式shuffle -->\n\t<property>\n\t\t<name>yarn.nodemanager.aux-services</name>\n\t\t<value>mapreduce_shuffle</value>\n\t</property>\n<!--激活HA 配置-->\n    <property>\n\t\t<name>yarn.resourcemanager.ha.enabled</name>\n\t\t<value>true</value>\n\t</property>\n<!-- 管理节点状态自动恢复 -->\n\t<property>\n\t\t<name>yarn.resourcemanager.recovery.enable</name>\n\t\t<value>true</value>\n\t</property>\n<!-- 定义数据状态保持介质 -->\n\t<property>\n\t\t<name>yarn.resourcemanager.store.class</name>\n\t\t<value>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore</value>\n\t</property>\n<!--指定zookeeper的服务地址，为了防止单节点故障，指定三个节点-->\n\t<property>\n\t\t<name>yarn.resourcemanager.zk-address</name>\n\t\t<value>master:2181,slave1:2181,slave2:2181</value>\n\t</property>\n<!--集群 ID-->\n\t<property>\n\t\t<name>yarn.resourcemanager.cluster-id</name>\n\t\t<value>yarn-ha</value>\n\t</property>\n<!--定义两个 resourcemanager 角色-->\n\t<property>\n\t\t<name>yarn.resourcemanager.ha.rm-ids</name>\n\t\t<value>rm1,rm2</value>\n\t</property>  \n<!--角色1 对应主机地址-->\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname.rm1</name>\n\t\t<value>master</value>\n\t</property>   \n<!--角色2 对应主机地址-->\n\t<property>\n\t\t<name>yarn.resourcemanager.hostname.rm2</name>\n\t\t<value>slave1</value>\n\t</property>         \n<!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 (可选)-->\n\t<property>\n\t\t<name>yarn.log-aggregation-enable</name>\n\t\t<value>true</value>\n\t</property>\n<!-- 设置聚合日志在hdfs上的保存时间（可选） -->\n\t<property>\n\t\t<name>yarn.log-aggregation.retain-seconds</name>\n\t\t<value>604800</value>\n\t</property>\n</configuration>\n```\n\n> 配置完成之后分发到子节点,再进行服务启动准备:warning:\n\n\n\n### 3.3 服务启动准备\n\n#### 3.3.1 启动journalnode服务\n\n> `所有节点`启动journalnode\n\n```sh\nhadoop-daemon.sh start journalnode\n```\n\n#### 3.3.2 初始化namenode\n\n> master(`nn1`)节点初始化namenode\n\n```sh\nhdfs namenode -format\n```\n结果如下：\n\n![image-20240220195039832](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201950935.png)\n\n\n> 同步元数据到`nn2`（slave1）\n\n:one: 方式1: 直接从主节点(`nn1`)发送到主节点(`nn2`)\n\n```sh\nscp -r hadoopdir/dfs/ root@slave1:/root/hadoopdir\n```\n\n![](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201951392.png)\n\n:two: 方式2:在主节点(`nn2`)使用指令同步\n\n首先需要在主几点(`nn1`)启动namenode服务,否则在主节点(`nn2`)节点中同步元数据会失败,\n\n提示找不到`master`的namenode服务,如下图:\n\n![image-20241006232852729](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062328858.png)\n\n关键错误是`“Connection refused”`，这表明备用NameNode无法连接到活动NameNode（192.168.10.11:9000）。\n\n**正确步骤如下:**\n\n1.在master(nn1)启动namenode服务:\n\n```sh\n[root@master ~]# hdfs --daemon start namenode\n```\n\n2.在slave1(nn2)使用指令同步元数据\n\n```sh\n[root@slave1 ~]# hdfs namenode -bootstrapStandby\n```\n\n![image-20241006232636095](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062326234.png)\n\n同步需要进一步确定是否成功,可以直接查看`/root/hadoopdir`数据目录下是否成功同步过来,如下图:\n\n![image-20241006233249156](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062332270.png)\n\n(方式2和方式1一样,所以我觉得直接使用scp更高效点ovO...)\n\n#### 3.3.3 master节点初始化zk\n\n```sh\nhdfs zkfc -formatZK\n```\n结果如下：\n\n![image-20241006235656731](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062356870.png)\n\n#### 3.3.4 启动集群\n\n在主节点（master）执行：\n\n```sh\nstart-all.sh\n```\n\n所有节点启动(已启动则忽略):\n\n```sh\nhadoop-daemon.sh start journalnode\n```\n\n启动后的进程如下：\n\n![image-20240220195417889](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201954941.png)\n\n### 3.4 使用命令分别查看服务nn2与rm2进程状态\n\n```sh\n[root@master ~]# hdfs haadmin -getServiceState nn2\nactive\n```\n\n![image-20240314125738637](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141257798.png)\n\n```sh\n[root@master ~]# yarn rmadmin -getServiceState rm2\nactive\n```\n\n![image-20240314125900240](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141259321.png)\n\n全部服务状态：\n\n```sh\n[root@master ~]# yarn rmadmin -getServiceState rm1\nstandby\n[root@master ~]# yarn rmadmin -getServiceState rm2\nactive\n[root@master ~]# hdfs haadmin -getServiceState nn1\nstandby\n[root@master ~]# hdfs haadmin -getServiceState nn2\nactive\n```\n\n![image-20240314130004169](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141300299.png)\n\n### 3.5 测试HA\n\n单服务启动的方式：\n\n```sh\nhdfs --daemon start namenode\n```\n\n> 进入192.168.10.10:9870 / master:9870  `主节点`\n\n![image-20240220195746352](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201957420.png)\n\n> 进入192.168.10.20:9870 / slave1:9870\t`备用节点`\n\n![image-20240220195931025](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201959110.png)\n\n> kill 掉master的namenode服务刷新slave1的web端查看\n\n![image-20240220200123248](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202001326.png)\n\nmaster的web端口：\n\n![image-20240220200224797](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202002860.png)\n\n发现此时的master节点的namenode已经无法访问，这里手动启动namenode服务：\n\n```sh\n[root@master ~]# hdfs --daemon start namenode\n```\n\n![image-20240220200436908](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202004994.png)\n\n\n\nHadoop HA部署完成\n\n\n\n## 4. HDFS 操作指令\n\n常用指令:\n\n| 参数                                | 作用                                                         |\n| ----------------------------------- | ------------------------------------------------------------ |\n| hdfs dfs -cat                       | 用于查看分布式文件系统中指定文件里面的内容                   |\n| hdfs dfs -chmod -R                  | 对分布式文件系统中的文件进行授权                             |\n| hdfs dfs -copyFromLocal -f -l -p    | 把本地的文件复制到 HDFS 路径中                               |\n| hdfs dfs -copyToLocal -p -ignoreCrc | 把分布式文件系统中的文件复制到本地路径中                     |\n| hdfs dfs -put (-f -p -l)            | 用于来将本地的文件上传到HDFS分布式文件系统中                 |\n| Hdfs dfs -find                      | 作用是用于查询分布式文件系统中的文件                         |\n| hdfs dfs -help                      | 用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书 |\n| hdfs dfs -mv                        | 将分布式文件系统中的文件进行移动                             |\n| hdfs dfs -moveFromLocal             | 把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）   |\n| hdfs dfs -moveToLocal               | 把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地） |\n| hdfs dfs -mkdir -p                  | 用来创建HDFS分布式文件系统中的文件                           |\n| hdfs dfs -rm -f -r                  | 将分布式文件系统中的文件进行删除                             |\n| hdfs dfs -rmdir                     | 用来进行递归删除文件/文件夹，文件夹中有文件也能删除          |\n\n全部指令:\n\n```powershell\n1、hdfs dfs -cat ：用于查看分布式文件系统中指定文件里面的内容\n2、hdfs dfs -checksum：用来查看指定文件的MD5值\n3、hdfs dfs -chmod -R：对分布式文件系统中的文件进行授权\n4、Hdfs dfs -copyFromLocal -f -l -p：把本地的文件复制到 HDFS 路径中\n5、Hdfs dfs -copyToLocal -p -ignoreCrc ：把分布式文件系统中的文件复制到本地路径中\n6、Hdfs dfs -count -q -h：用来进行统计计数操作\n7、dfs dfs -count -q -h：用来进行统计计数操作\n8、Hdfs dfs -cp -f -p：该命令的作用相当于我们windwos下的复制命令，作用是从 HDFS 的一个路径复制（拷贝）到 HDFS 的另一个路径\n9、Hdfs dfs -createSnapshot ：用来创建分布式文件系统的快照\n10、Hdfs dfs -deleteSnapshot：作用是用于删除分布式文件系统的快照\n11、Hdfs dfs -df -h：用于查看分布式文件系统硬盘的使用情况\n12、Hdfs dfs -du -s -h：用来查看分布式文件系统中指定文件的大小\n13、Hdfs dfs -expunge：用来对分布式文件系统中垃圾箱进行清空操作\n14、Hdfs dfs -find：作用是用于查询分布式文件系统中的文件\n15、Hdfs dfs -get -p -crc -ignoreCrc：作用是将分布式文件系统中的文件传输到本地机器上，相当于下载\n16、hdfs dfs -getfacl -R：获取对象或目录的 ACL（访问控制列表）\n17、hdfs dfs -getfatter -R：获取对象或目录的扩展属性\n18、hdfs dfs -getmerge -nl：获取对象属性\n19、hdfs dfs -help：用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书\n20、hdfs dfs -ls -d -h -R ：该命令的作用是列出分布式文件系统中指定路径下的文件列表\n21、hdfs dfs -mkdir -p：用来创建HDFS分布式文件系统中的文件\n22、hdfs dfs -moveFromLocal：把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）\n23、hdfs dfs -moveToLocal：把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地）\n24、hdfs dfs -mv：将分布式文件系统中的文件进行移动\n25、hdfs dfs -put (-f -p -l)：用于来将本地的文件上传到HDFS分布式文件系统中\n26、hdfs dfs -renameSnapshot：用于对分布式文件系统中的快照进行更名\n27、hdfs dfs -rm -f -r：将分布式文件系统中的文件进行删除\n28、hdfs dfs -rmdir ：用来进行递归删除文件/文件夹，文件夹中有文件也能删除\n29、hdfs dfs -setfacl -R：设置对象或目录的 ACL（访问控制列表）\n30、hdfs dfs -setfattr -n：设置对象或目录的扩展属性\n31、hdfs dfs -setrep -R：用来设置 HDFS 中文件的副本数量\n32、hdfs dfs -stat：根据格式显示指定对象的信息\n33、hdfs dfs -tail -f：作用是显示指定文件的末尾\n34、hdfs dfs -test：用来判断指定文件的类型\n35、hdfs dfs -text：作用是以字符形式打印一个文件的内容\n```","slug":"Hadoop环境配置合集","published":1,"updated":"2024-11-11T12:27:45.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm3d099g10009e1mjdzknedle","content":"<h1 id=\"Hadoop\"><a href=\"#Hadoop\" class=\"headerlink\" title=\"Hadoop\"></a>Hadoop</h1><h2 id=\"1-Hadoop-概述\"><a href=\"#1-Hadoop-概述\" class=\"headerlink\" title=\"1.Hadoop 概述\"></a>1.Hadoop 概述</h2><p><strong>1.1 Hadoop 是什么</strong></p>\n<p>（1）Hadoop是一个由Apache基金会所开发的<font color=\"red\" size=\"3\">分布式系统基础架构</font> </p>\n<p>（2）主要解决海量数据的<font color=\"red\" size=\"3\">存储</font>和海量数据的<font color=\"red\" size=\"3\">分析计算</font>问题 </p>\n<p>（3）广义上来说，Hadoop通常是指一个更广泛的概念——<font color=\"red\" size=\"3\">Hadoop生态圈</font></p>\n<p><strong>1.2 Hadoop 优势</strong></p>\n<p>（1）<strong>高可靠性</strong>：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。 </p>\n<p>（2）<strong>高扩展性</strong>：在集群间分配任务数据，可方便的扩展数以千计的节点。 </p>\n<p>（3）<strong>高效性</strong>：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。 </p>\n<p>（4）<strong>高容错性</strong>：能够自动将失败的任务重新分配。</p>\n<p><strong>1.3 Hadoop 组成（面试重点）</strong></p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527570.png\" alt=\"在这里插入图片描述\"> \n\n<p>在Hadoop1.x 时代，Hadoop中的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大。 在Hadoop2.x时代，增加了Yarn。Yarn只负责资源的调度，MapReduce 只负责运算。 &#x3D;&#x3D;Hadoop3.x在组成上没有变化。&#x3D;&#x3D;</p>\n<p><strong>1.3.1 HDFS 架构概述</strong></p>\n<p>Hadoop Distributed File System，简称<font color=\"red\" size=\"3\">HDFS</font>，是一个分布式文件系统。</p>\n<p>（1）<code>NameNode</code>（nn）：存储文件的<strong>元数据</strong>，如<strong>文件名</strong>，<strong>文件目录结构</strong>，<strong>文件属性</strong>（生成时间、副本数、文件权限），以及每个文件的<strong>块列表</strong>和<strong>块所在的DataNode</strong>等。 </p>\n<p>（2）<code>DataNode</code>(dn)：在本地文件系统<strong>存储文件块数据</strong>，以及<strong>块数据的校验和</strong>。 </p>\n<p>（3）<code>Secondary NameNode</code>(2nn)：<strong>每隔一段时间对NameNode元数据备份</strong>。</p>\n<p><strong>1.3.2 YARN 架构概述</strong></p>\n<p>Yet Another Resource Negotiator 简称YARN ，另一种资源协调者，是Hadoop 的资源管理器。</p>\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111625192.png\" alt=\"在这里插入图片描述\">\n\n<p><code>ResourceManager</code>(RM)：整个集群资源（内存、CPU等）的管理者 </p>\n<p><code>NodeManager</code>(NM)：单个节点服务器资源的管理者。 </p>\n<p><code>ApplicationMaster</code>(AM)：单个任务运行的管理者。 </p>\n<p><code>Container</code>：容器，相当于一台独立的服务器，里面封装了任务运行所需要的资源，如<strong>内存、CPU、磁盘、网络</strong>等。</p>\n<p>说明： </p>\n<p>（1）客户端可以有多个 </p>\n<p>（2）集群上可以运行多个ApplicationMaster </p>\n<p>（3）每个NodeManager上可以有多个Container</p>\n<p><strong>1.3.3 MapReduce 架构概述</strong></p>\n<p>MapReduce 将计算过程分为两个阶段：Map 和Reduce 1）Map 阶段并行处理输入数据 2）Reduce 阶段对Map 结果进行汇总 </p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527808.png\" alt=\"在这里插入图片描述\">\n\n<p><strong>1.3.4 HDFS、YARN、MapReduce 三者关系</strong></p>\n<p>如图所示：</p>\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527601.png\" alt=\"在这里插入图片描述\">\n\n<p><strong>1.3.5 大数据技术生态体系</strong></p>\n<p>如图所示： <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527584.png\" alt=\"在这里插入图片描述\"> </p>\n<p>图中涉及的技术名词解释如下：</p>\n<p>（1）<code>Sqoop</code>：Sqoop 是一款开源的工具，主要用于在Hadoop、Hive 与传统的数据库（MySQL）间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop 的HDFS 中，也可以将HDFS 的数据导进到关系型数据库中。 </p>\n<p>（2）<code>Flume</code>：Flume 是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据。 （3）<code>Kafka</code>：Kafka 是一种高吞吐量的分布式发布订阅消息系统。 </p>\n<p>（4）<code>Spark</code>：Spark 是当前最流行的开源大数据内存计算框架。可以基于Hadoop 上存储的大数据进行计算。</p>\n<p>（5）<code>Flink</code>：Flink 是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多。 </p>\n<p>（6）<code>Oozie</code>：Oozie 是一个管理Hadoop 作业（job）的工作流程调度管理系统。 </p>\n<p>（7）<code>Hbase</code>：HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。 </p>\n<p>（8）<code>Hive</code>：Hive 是基于Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL 查询功能，可以将SQL 语句转换为MapReduce 任务进行运行。其优点是学习成本低，可以通过类SQL 语句快速实现简单的MapReduce 统计，不必开发专门的MapReduce 应用，十分适合数据仓库的统计分析。 </p>\n<p>（9）<code>ZooKeeper</code>：它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。</p>\n<p><strong>1.3.6 推荐系统框架图</strong></p>\n<p>推荐系统项目框架</p>\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527591.png\" alt=\"在这里插入图片描述\">\n\n<p><strong>1.3.7 常用端口号说明</strong></p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111537682.png\" alt=\"在这里插入图片描述\">\n\n<h2 id=\"2-Hadoop-完全分部署运行环境搭建\"><a href=\"#2-Hadoop-完全分部署运行环境搭建\" class=\"headerlink\" title=\"2. Hadoop 完全分部署运行环境搭建\"></a>2. Hadoop 完全分部署运行环境搭建</h2><p>环境说明:</p>\n<table>\n<thead>\n<tr>\n<th>容器</th>\n<th>容器ip</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>master</td>\n<td>192.168.1.10</td>\n</tr>\n<tr>\n<td>slave1</td>\n<td>192.168.1.20</td>\n</tr>\n<tr>\n<td>slave2</td>\n<td>192.168.1.30</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-配置主机名\"><a href=\"#2-1-配置主机名\" class=\"headerlink\" title=\"2.1 配置主机名\"></a>2.1 配置主机名</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hostnamectl set-hostname master <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">bash</span>\nhostnamectl set-hostname slave1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">bash</span>\nhostnamectl set-hostname slave2 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-2-修改hosts，添加映射，关闭防火墙\"><a href=\"#2-2-修改hosts，添加映射，关闭防火墙\" class=\"headerlink\" title=\"2.2 修改hosts，添加映射，关闭防火墙\"></a>2.2 修改hosts，添加映射，关闭防火墙</h3><blockquote>\n<p>所有节点执行</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/hosts</span>\n<span class=\"token number\">127.0</span>.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nff00::0\tip6-mcastprefix\nff02::1\tip6-allnodes\nff02::2\tip6-allrouters\n<span class=\"token number\">192.168</span>.1.10\tmaster\n<span class=\"token number\">192.168</span>.1.20\tslave1\n<span class=\"token number\">192.168</span>.1.30\tslave2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl stop firewalld\nsystemctl disable firewalld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-3-设置三台主机的免密登录\"><a href=\"#2-3-设置三台主机的免密登录\" class=\"headerlink\" title=\"2.3 设置三台主机的免密登录\"></a>2.3 设置三台主机的免密登录</h3><h4 id=\"2-3-1-生成免密公钥\"><a href=\"#2-3-1-生成免密公钥\" class=\"headerlink\" title=\"2.3.1 生成免密公钥\"></a>2.3.1 生成免密公钥</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ssh-keygen -t rsa\t\t#然后一直回车</span>\n或者\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ssh-keygen -f ~/.ssh/id_rsa -P '' #免回车</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607877.png\" alt=\"image-20230321114300354\"></p>\n<h4 id=\"2-3-2-复制公钥到服务器\"><a href=\"#2-3-2-复制公钥到服务器\" class=\"headerlink\" title=\"2.3.2 复制公钥到服务器\"></a>2.3.2 复制公钥到服务器</h4><pre class=\"line-numbers language-hss\" data-language=\"hss\"><code class=\"language-hss\">ssh-copy-id master\nssh-copy-id slave1\nssh-copy-id slave2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607997.png\" alt=\"image-20230321115337762\"></p>\n<p>(另外两个节点也是如此操作，这里就不演示了)</p>\n<h3 id=\"2-4-JDK配置\"><a href=\"#2-4-JDK配置\" class=\"headerlink\" title=\"2.4 JDK配置\"></a>2.4 JDK配置</h3><p>解压文件到相应的位置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar -zxvf /opt/software/jdk-8u162-linux-x64.tar.gz -C /opt/module/</span>\n\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /opt/module/\t#进入解压目录，可以给解压后的文件改个名字，方便记忆</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv jdk1.8.0_162/ jdk</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>设置jdk环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi /etc/profile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在末尾添加如下配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#JAVA_HOME</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/opt/module/jdk\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$JAVA_HOME</span>/bin:<span class=\"token variable\">$JAVA_HOME</span>/jre/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>刷新环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># source /etc/profile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>配置完后即可查看jdk版本号：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># java -version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617633.png\" alt=\"image-20230321122027954\"></p>\n<p>分发JDK和环境变量到两个副节点：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp /etc/profile root@slave1:/etc/profile</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp /etc/profile root@slave2:/etc/profile</span>\n\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -rq jdk/ root@slave1:/opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -rq jdk/ root@slave2:/opt/module/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617652.png\" alt=\"image-20230321122308314\"></p>\n<p>分发到两个副节点后，刷新环境变量，查看JAVA版本：</p>\n<p>slave1节点：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617692.png\" alt=\"image-20230321122633530\"></p>\n<p>slave2节点：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617803.png\" alt=\"image-20230321122717175\"></p>\n<p>基础环境搭建完成！！</p>\n<blockquote>\n<p>添加jpsall脚本(可选)</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> <span class=\"token variable\">$JAVA_HOME</span>/bin/jpsall\n<span class=\"token function\">chmod</span> +x <span class=\"token variable\">$JAVA_HOME</span>/bin/jpsall<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>脚本内容如下:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">hostname</span> <span class=\"token keyword\">in</span> master slave1 slave2\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token variable\">$hostname</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n  <span class=\"token function\">ssh</span> <span class=\"token variable\">$hostname</span> <span class=\"token string\">\". /etc/profile; jps\"</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-5-Hadoop环境搭建\"><a href=\"#2-5-Hadoop环境搭建\" class=\"headerlink\" title=\"2.5 Hadoop环境搭建\"></a>2.5 Hadoop环境搭建</h3><blockquote>\n<p>前提：已完成3个节点的免密登录，jdk配置</p>\n</blockquote>\n<h4 id=\"2-5-1-解压包到相应位置：\"><a href=\"#2-5-1-解压包到相应位置：\" class=\"headerlink\" title=\"2.5.1 解压包到相应位置：\"></a>2.5.1 解压包到相应位置：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar -zxvf /opt/software/hadoop-3.1.3.tar.gz -C /opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv hadoop-3.1.3/ hadoop\t#改一下名字，方便记忆</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-5-2-添加hadoop环境变量\"><a href=\"#2-5-2-添加hadoop环境变量\" class=\"headerlink\" title=\"2.5.2 添加hadoop环境变量\"></a>2.5.2 添加hadoop环境变量</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi /etc/profile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在末尾添加以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#HADOOP</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HADOOP_HOME</span><span class=\"token operator\">=</span>/opt/module/hadoop\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$HADOOP_HOME</span>/bin:<span class=\"token variable\">$HADOOP_HOME</span>/sbin\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HADOOP_CLASSPATH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>$HADOOP_HOME/bin/hadoop classpath<span class=\"token variable\">`</span></span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_NAMENODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_DATANODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_SECONDARYNAMENODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">YARN_RESOURCEMANAGER_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">YARN_NODEMANAGER_USER</span><span class=\"token operator\">=</span>root\n\n<span class=\"token comment\">#备注：3.0后的版本需要指定服务用户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>：wq 保存退出后，刷新环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># source /etc/profile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>配置好后，即可直接查看hadoop 版本号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># hadoop version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111621421.png\" alt=\"image-20230321124056646\"></p>\n<h3 id=\"2-6-修改6个主配置文件\"><a href=\"#2-6-修改6个主配置文件\" class=\"headerlink\" title=\"2.6 修改6个主配置文件\"></a>2.6 修改6个主配置文件</h3><ul>\n<li>:one: core.site.xml </li>\n<li>:two: hdfs-site.xml </li>\n<li>:three: mapred-site.xml </li>\n<li>:four:yarn-site.xml </li>\n<li>:five: hadoop-env.sh </li>\n<li>:six: workers</li>\n</ul>\n<p>&#x3D;&#x3D;配置参考官方文档&#x3D;&#x3D;</p>\n<blockquote>\n<p>目录:<code>\\hadoop-3.1.3\\share\\doc\\hadoop</code></p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042227312.png\" alt=\"image-20240104222735234\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042226052.png\" alt=\"image-20240104222630568\"></p>\n<p>或直接查看官方配置文件:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> ./ <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"core-de*\"</span> <span class=\"token parameter variable\">-o</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"hdfs-de*\"</span> <span class=\"token parameter variable\">-o</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"mapred-de*\"</span> <span class=\"token parameter variable\">-o</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"yarn-de*\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051527779.png\" alt=\"image-20240105152739131\"></p>\n<p>(记住主要参数名即可)</p>\n<h4 id=\"2-6-1先进入配置目录\"><a href=\"#2-6-1先进入配置目录\" class=\"headerlink\" title=\"2.6.1先进入配置目录\"></a>2.6.1先进入配置目录</h4><pre class=\"line-numbers language-SH\" data-language=\"SH\"><code class=\"language-SH\">[root@master module]# cd hadoop&#x2F;etc&#x2F;hadoop&#x2F;\n[root@master hadoop]# ll<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>可以看到如下文件：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630756.png\" alt=\"image-20230321124310396\"></p>\n<p>我们只用修改其中的6条</p>\n<h4 id=\"2-6-2-hadoop-env-sh配置：\"><a href=\"#2-6-2-hadoop-env-sh配置：\" class=\"headerlink\" title=\"2.6.2 hadoop-env.sh配置：\"></a>2.6.2 hadoop-env.sh配置：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi hadoop-env.sh #告诉hadoop jdk在哪里</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630692.png\" alt=\"image-20230321124524896\"></p>\n<h4 id=\"2-6-3-workers配置\"><a href=\"#2-6-3-workers配置\" class=\"headerlink\" title=\"2.6.3 workers配置\"></a>2.6.3 workers配置</h4><p>（根据自己的集群来进行配置）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi workers</span>\nmaster\nslave1\nslave2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630688.png\" alt=\"image-20230321124806539\"></p>\n<h4 id=\"2-6-4-core-site-xml配置：\"><a href=\"#2-6-4-core-site-xml配置：\" class=\"headerlink\" title=\"2.6.4 core.site.xml配置：\"></a>2.6.4 core.site.xml配置：</h4><p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042229494.png\" alt=\"image-20240104222915427\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi core-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- hdfs的地址名称：schame,ip,port--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>fs.defaultFS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>hdfs://master:9000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hadoop.tmp.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/tmp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-6-5-hdfs-site-xml\"><a href=\"#2-6-5-hdfs-site-xml\" class=\"headerlink\" title=\"2.6.5 hdfs.site.xml:\"></a>2.6.5 hdfs.site.xml:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi hdfs-site.xml </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- namenode守护进程管理的元数据文件fsimage存储的位置--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.name.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/dfs/name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.datanode.data.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/dfs/data<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 块的副本数--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.replication<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 块的大小(128M),下面的单位是字节--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.blocksize<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>134217728<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- secondarynamenode守护进程的http地址：主机名和端口号。参考守护进程布局--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.secondary.http-address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:9868<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- namenode守护进程的http地址：主机名和端口号。参考守护进程布局--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.http-address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:9870<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--是否开通HDFS的Web接口，3.0版本后默认端口是9870--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.webhdfs.enabled<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-6-6-mapred-site-xml\"><a href=\"#2-6-6-mapred-site-xml\" class=\"headerlink\" title=\"2.6.6 mapred-site.xml:\"></a>2.6.6 mapred-site.xml:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi mapred-site.xml </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 指定mapreduce使用yarn资源管理器--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.framework.name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>yarn<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置作业历史服务器的地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.jobhistory.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:10020<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置作业历史服务器的http地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.jobhistory.webapp.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:19888<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       \t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.app.mapreduce.am.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n      \t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.map.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      \t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       \t\t <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.reduce.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      \t\t <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>   \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-6-7-yarn-site-xml\"><a href=\"#2-6-7-yarn-site-xml\" class=\"headerlink\" title=\"2.6.7 yarn-site.xml:\"></a>2.6.7 yarn-site.xml:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi yarn-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- Site specific YARN configuration properties --></span>\n\t<span class=\"token comment\">&lt;!-- NodeManager获取数据的方式shuffle --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.nodemanager.aux-services<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>mapreduce_shuffle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- 指定YARN的ResourceManager的地址 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.hostname<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- yarn的web访问地址 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.webapp.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:8088<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.webapp.https.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:8090<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.log-aggregation-enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- 设置聚合日志在hdfs上的保存时间 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.log-aggregation.retain-seconds<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>604800<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以前hadoop 2.X 版本，访问web界面，hdfs端口号是50070，现在3.X版本，端口号是9870（最好自己指定端口号）</p>\n<h4 id=\"2-6-8-配置好后分发到副节点（别忘了环境变量也要再次分发）：\"><a href=\"#2-6-8-配置好后分发到副节点（别忘了环境变量也要再次分发）：\" class=\"headerlink\" title=\"2.6.8 配置好后分发到副节点（别忘了环境变量也要再次分发）：\"></a>2.6.8 配置好后分发到副节点（别忘了环境变量也要再次分发）：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp /etc/profile root@slave1:/etc/profile</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp /etc/profile root@slave2:/etc/profile</span>\n\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -r /opt/module/hadoop root@slave1:/opt/module</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -r /opt/module/hadoop root@slave2:/opt/module</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分发完后去副节点刷新环境变量</p>\n<h4 id=\"2-6-9-初始化namenode：\"><a href=\"#2-6-9-初始化namenode：\" class=\"headerlink\" title=\"2.6.9 初始化namenode：\"></a>2.6.9 初始化namenode：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs namenode -format</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630315.png\" alt=\"image-20230320183413920\"></p>\n<h4 id=\"2-6-10-开启集群：\"><a href=\"#2-6-10-开启集群：\" class=\"headerlink\" title=\"2.6.10 开启集群：\"></a>2.6.10 开启集群：</h4><p>简易启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># start-all.sh </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看结果:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">方法1:\njps\n方法2:<span class=\"token punctuation\">(</span>手动添加脚本<span class=\"token punctuation\">)</span>\njpsall<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结果：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630752.png\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051740271.png\" alt=\"image-20240105174003166\"></p>\n<h3 id=\"2-7-web端口访问测试\"><a href=\"#2-7-web端口访问测试\" class=\"headerlink\" title=\"2.7 web端口访问测试\"></a>2.7 web端口访问测试</h3><p><a href=\"http://ip:9870/\">http://ip:9870</a></p>\n<p><a href=\"http://ip:8088/\">http://ip:8088</a></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531566.png\" alt=\"image-20240105153102460\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531631.png\" alt=\"image-20240105153114530\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531093.png\" alt=\"image-20240105153148000\"></p>\n<p>完成</p>\n<h2 id=\"3-Hadoop-HA\"><a href=\"#3-Hadoop-HA\" class=\"headerlink\" title=\"3. Hadoop HA\"></a>3. Hadoop HA</h2><h3 id=\"3-1-部署zookeeper集群\"><a href=\"#3-1-部署zookeeper集群\" class=\"headerlink\" title=\"3.1 部署zookeeper集群\"></a>3.1 部署zookeeper集群</h3><h4 id=\"3-1-1-解压所需压缩包并重命名\"><a href=\"#3-1-1-解压所需压缩包并重命名\" class=\"headerlink\" title=\"3.1.1 解压所需压缩包并重命名\"></a>3.1.1 解压所需压缩包并重命名</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar -zxvf /opt/software/zookeeper-3.4.6.tar.gz -C /opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv /opt/module/zookeeper-3.4.6/ /opt/module/zookeeper</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>创建数据目录和日志目录</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#数据目录</span>\n<span class=\"token function\">mkdir</span> /opt/module/zookeeper/data\n<span class=\"token comment\">#日志目录</span>\n<span class=\"token function\">mkdir</span> /opt/module/zookeeper/logs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-1-2-配置环境变量\"><a href=\"#3-1-2-配置环境变量\" class=\"headerlink\" title=\"3.1.2 配置环境变量\"></a>3.1.2 配置环境变量</h4><blockquote>\n<p>所有节点添加</p>\n</blockquote>\n<p>添加环境变量:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#zookeeper</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ZK_HOME</span><span class=\"token operator\">=</span>/opt/module/zookeeper\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$ZK_HOME</span>/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">>></span>/etc/profile<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n#zookeeper\nexport ZK_HOME=/opt/module/zookeeper\nexport PATH=\\<span class=\"token environment constant\">$PATH</span>:\\<span class=\"token variable\">$ZK_HOME</span>/bin\nEOF</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>刷新生效:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-1-3-配置zoo-cfg文件\"><a href=\"#3-1-3-配置zoo-cfg文件\" class=\"headerlink\" title=\"3.1.3 配置zoo.cfg文件\"></a>3.1.3 配置zoo.cfg文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">创建数据目录和日志目录\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir /opt/module/zookeeper/&#123;data,logs&#125;</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp /opt/module/zookeeper/conf/zoo_sample.cfg /opt/module/zookeeper/conf/zoo.cfg</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi /opt/module/zookeeper/conf/zoo.cfg</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>配置内容如下:</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat zoo.cfg </span>\n<span class=\"token assign-left variable\">tickTime</span><span class=\"token operator\">=</span><span class=\"token number\">2000</span>\n<span class=\"token assign-left variable\">initLimit</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token assign-left variable\">syncLimit</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n<span class=\"token assign-left variable\">dataDir</span><span class=\"token operator\">=</span>/opt/module/zookeeper/data\n<span class=\"token assign-left variable\">dataLogDir</span><span class=\"token operator\">=</span>/opt/module/zookeeper/logs\n<span class=\"token assign-left variable\">clientPort</span><span class=\"token operator\">=</span><span class=\"token number\">2181</span>\n<span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>master:2888:3888\n<span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>slave1:2888:3888\n<span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>slave2:2888:3888<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置详解:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@kafka1 opt<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -Ev \"#|^$\" /usr/local/zookeeper/conf/zoo.cfg </span>\n<span class=\"token assign-left variable\">tickTime</span><span class=\"token operator\">=</span><span class=\"token number\">2000</span>\n<span class=\"token assign-left variable\">initLimit</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token assign-left variable\">syncLimit</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n<span class=\"token assign-left variable\">dataDir</span><span class=\"token operator\">=</span>/opt/module/zookeeper/data\n<span class=\"token assign-left variable\">dataLogDir</span><span class=\"token operator\">=</span>/opt/module/zookeeper/logs\n<span class=\"token assign-left variable\">clientPort</span><span class=\"token operator\">=</span><span class=\"token number\">2181</span>\n<span class=\"token assign-left variable\">maxClientCnxns</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>\t<span class=\"token comment\">#(可选)</span>\n<span class=\"token assign-left variable\">autopurge.snapRetainCount</span><span class=\"token operator\">=</span><span class=\"token number\">128</span>   <span class=\"token comment\"># /opt/zookeeper里保存快照的最大数量(可选)</span>\n<span class=\"token assign-left variable\">autopurge.purgeInterval</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>   <span class=\"token comment\"># 几小时清理一次(可选)</span>\n<span class=\"token comment\"># 可以用主机名，因为设置了映射</span>\n<span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>master:2888:3888\n<span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>slave1:2888:3888\n<span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>slave2:2888:3888\n\n配置参数解读：\n<span class=\"token assign-left variable\">server.A</span><span class=\"token operator\">=</span>B:C:D\n\nA是一个数字，表示这个是第几号服务器。myid中的编号就是这个值。zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。\nB是这个服务器的地址。\nC是这个服务器Follower与集群中的Leader服务器交换信息的端口。\nD是万一集群中的leader服务器挂了，需要一个端口来重新进行选举，选举一个新的leader，而这个端口就是用来执行选举时服务器相互通信的端口。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结果:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201018515.png\" alt=\"image-20240105162313246\"></p>\n<h4 id=\"3-1-4-配置myid文件\"><a href=\"#3-1-4-配置myid文件\" class=\"headerlink\" title=\"3.1.4 配置myid文件\"></a>3.1.4 配置<code>myid</code>文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master zookeeper<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 1 > $ZK_HOME/data/myid</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-1-5-分发文件给子节点并分别修改myid文件\"><a href=\"#3-1-5-分发文件给子节点并分别修改myid文件\" class=\"headerlink\" title=\"3.1.5 分发文件给子节点并分别修改myid文件\"></a>3.1.5 分发文件给子节点并分别修改myid文件</h4><blockquote>\n<p>:warning:注意:如果子节点没有配置环境变量,也要一同分发</p>\n</blockquote>\n<p>分发:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -r /opt/module/zookeeper/ root@slave1:/opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -r /opt/module/zookeeper/ root@slave2:/opt/module/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>修改myid文件:</p>\n<p>slave1:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@slave1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 2 > /opt/module/zookeeper/data/myid</span>\n<span class=\"token punctuation\">[</span>root@slave1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 2 > $ZK_HOME/data/myid</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>slave2:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@slave2 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 3 > /opt/module/zookeeper/data/myid</span>\n<span class=\"token punctuation\">[</span>root@slave2 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 3 > $ZK_HOME/data/myid</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-1-6-启动zk服务\"><a href=\"#3-1-6-启动zk服务\" class=\"headerlink\" title=\"3.1.6 启动zk服务\"></a>3.1.6 启动zk服务</h4><p>所有节点启动:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/module/zookeeper/bin/zkServer.sh start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看启动状态:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/module/zookeeper/bin/zkServer.sh status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>master:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020411.png\" alt=\"image-20240105165336746\"></p>\n<p>slave1:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020560.png\" alt=\"image-20240105165353343\"></p>\n<p>slave2:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020484.png\" alt=\"image-20240105165433958\"></p>\n<h3 id=\"3-2-配置Hadoop-HA\"><a href=\"#3-2-配置Hadoop-HA\" class=\"headerlink\" title=\"3.2 配置Hadoop HA\"></a>3.2 配置Hadoop HA</h3><p>操作步骤和完全分布式一样，主要修改配置文件，这里从<code>2.6</code>开始</p>\n<h4 id=\"3-2-1-hadoop-env-sh配置\"><a href=\"#3-2-1-hadoop-env-sh配置\" class=\"headerlink\" title=\"3.2.1 hadoop-env.sh配置\"></a>3.2.1 hadoop-env.sh配置</h4><p>添加以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/opt/module/jdk1.8.0_162\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_NAMENODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_DATANODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_SECONDARYNAMENODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">YARN_RESOURCEMANAGER_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">YARN_NODEMANAGER_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token comment\">#ha新增</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_JOURNALNODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_ZKFC_USER</span><span class=\"token operator\">=</span>root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如下：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202007642.png\" alt=\"image-20240220200709576\"></p>\n<h4 id=\"3-2-2-workers配置\"><a href=\"#3-2-2-workers配置\" class=\"headerlink\" title=\"3.2.2 workers配置\"></a>3.2.2 workers配置</h4><p>添加集群信息：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat workers</span>\nmaster\nslave1\nslave2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-3-core-site-xml配置\"><a href=\"#3-3-3-core-site-xml配置\" class=\"headerlink\" title=\"3.3.3 core-site.xml配置\"></a>3.3.3 core-site.xml配置</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim core-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加以下配置：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- hdfs的地址名称：schame,ip,port--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>fs.defaultFS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>hdfs://master:9000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hadoop.tmp.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/tmp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- ha.zookeeper.quorum 指定zookeeper服务,新增配置 --></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>ha.zookeeper.quorum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n            \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:2181,slave1:2181,slave2:2181<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-4-hdfs-site-xml配置-star\"><a href=\"#3-3-4-hdfs-site-xml配置-star\" class=\"headerlink\" title=\"3.3.4 hdfs-site.xml配置:star:\"></a>3.3.4 hdfs-site.xml配置:star:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim hdfs-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- namenode是一个组，指定namenode的组名称，自己可以定义--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.nameservices<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>mycluster<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 指定namenode组的成员--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.ha.namenodes.mycluster<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>nn1,nn2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 角色1 的rpc 地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.rpc-address.mycluster.nn1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:9000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 角色2 的rpc 地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.rpc-address.mycluster.nn2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>slave1:9000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- Namenode 1 的地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.http-address.mycluster.nn1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:9870<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>   \n<span class=\"token comment\">&lt;!-- Namenode 2 的地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.http-address.mycluster.nn2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>slave1:9870<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span> \n<span class=\"token comment\">&lt;!--JournalNode 的地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.shared.edits.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>qjournal://master:8485;slave1:8485;slave2:8485/mycluster<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- namenode守护进程管理的元数据文件fsimage存储的位置--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.name.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/dfs/name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.datanode.data.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/dfs/data<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--JournalNode 的数据存放地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.journalnode.edits.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/journal<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--Failover 类服务名--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.client.failover.proxy.provider.mycluster<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--远程管理方式，sshfence 使用 ssh 远程管理--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.ha.fencing.methods<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n               <span class=\"token comment\">&lt;!-- &lt;value>sshfence&lt;/value>--></span>\n               <span class=\"token comment\">&lt;!--但如果只配置sshfence，如果在机器宕机后不可达，则sshfence会返回false，即fence失败，所以得要配置成--></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>shell(true)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--ssh 私钥的位置--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.ha.fencing.ssh.private-key-files<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/.ssh/id_rsa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--配置自动故障切换，true【自动故障切换】，false【手动故障切换】--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.ha.automatic-failover.enabled<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--文件副本数量--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.replication<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>   \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-5-mapred-site-xml配置\"><a href=\"#3-3-5-mapred-site-xml配置\" class=\"headerlink\" title=\"3.3.5 mapred-site.xml配置\"></a>3.3.5 mapred-site.xml配置</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- 指定mapreduce使用yarn资源管理器--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.framework.name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>yarn<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置作业历史服务器的地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.jobhistory.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:10020<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置作业历史服务器的http地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.jobhistory.webapp.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:19888<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.app.mapreduce.am.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n      \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.map.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.reduce.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>    \n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-6-yarn-site-xml配置-star\"><a href=\"#3-3-6-yarn-site-xml配置-star\" class=\"headerlink\" title=\"3.3.6 yarn-site.xml配置:star:\"></a>3.3.6 yarn-site.xml配置:star:</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- NodeManager获取数据的方式shuffle --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.nodemanager.aux-services<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>mapreduce_shuffle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--激活HA 配置--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.ha.enabled<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 管理节点状态自动恢复 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.recovery.enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 定义数据状态保持介质 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.store.class<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--指定zookeeper的服务地址，为了防止单节点故障，指定三个节点--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.zk-address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:2181,slave1:2181,slave2:2181<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--集群 ID--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.cluster-id<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>yarn-ha<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--定义两个 resourcemanager 角色--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.ha.rm-ids<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>rm1,rm2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token comment\">&lt;!--角色1 对应主机地址--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.hostname.rm1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>   \n<span class=\"token comment\">&lt;!--角色2 对应主机地址--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.hostname.rm2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>slave1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>         \n<span class=\"token comment\">&lt;!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 (可选)--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.log-aggregation-enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 设置聚合日志在hdfs上的保存时间（可选） --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.log-aggregation.retain-seconds<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>604800<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>配置完成之后分发到子节点,再进行服务启动准备:warning:</p>\n</blockquote>\n<h3 id=\"3-3-服务启动准备\"><a href=\"#3-3-服务启动准备\" class=\"headerlink\" title=\"3.3 服务启动准备\"></a>3.3 服务启动准备</h3><h4 id=\"3-3-1-启动journalnode服务\"><a href=\"#3-3-1-启动journalnode服务\" class=\"headerlink\" title=\"3.3.1 启动journalnode服务\"></a>3.3.1 启动journalnode服务</h4><blockquote>\n<p><code>所有节点</code>启动journalnode</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hadoop-daemon.sh start journalnode<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-2-初始化namenode\"><a href=\"#3-3-2-初始化namenode\" class=\"headerlink\" title=\"3.3.2 初始化namenode\"></a>3.3.2 初始化namenode</h4><blockquote>\n<p>master(<code>nn1</code>)节点初始化namenode</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hdfs namenode <span class=\"token parameter variable\">-format</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>结果如下：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201950935.png\" alt=\"image-20240220195039832\"></p>\n<blockquote>\n<p>同步元数据到<code>nn2</code>（slave1）</p>\n</blockquote>\n<p>:one: 方式1: 直接从主节点(<code>nn1</code>)发送到主节点(<code>nn2</code>)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> <span class=\"token parameter variable\">-r</span> hadoopdir/dfs/ root@slave1:/root/hadoopdir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201951392.png\"></p>\n<p>:two: 方式2:在主节点(<code>nn2</code>)使用指令同步</p>\n<p>首先需要在主几点(<code>nn1</code>)启动namenode服务,否则在主节点(<code>nn2</code>)节点中同步元数据会失败,</p>\n<p>提示找不到<code>master</code>的namenode服务,如下图:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062328858.png\" alt=\"image-20241006232852729\"></p>\n<p>关键错误是<code>“Connection refused”</code>，这表明备用NameNode无法连接到活动NameNode（192.168.10.11:9000）。</p>\n<p><strong>正确步骤如下:</strong></p>\n<p>1.在master(nn1)启动namenode服务:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs --daemon start namenode</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.在slave1(nn2)使用指令同步元数据</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@slave1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs namenode -bootstrapStandby</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062326234.png\" alt=\"image-20241006232636095\"></p>\n<p>同步需要进一步确定是否成功,可以直接查看<code>/root/hadoopdir</code>数据目录下是否成功同步过来,如下图:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062332270.png\" alt=\"image-20241006233249156\"></p>\n<p>(方式2和方式1一样,所以我觉得直接使用scp更高效点ovO…)</p>\n<h4 id=\"3-3-3-master节点初始化zk\"><a href=\"#3-3-3-master节点初始化zk\" class=\"headerlink\" title=\"3.3.3 master节点初始化zk\"></a>3.3.3 master节点初始化zk</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hdfs zkfc <span class=\"token parameter variable\">-formatZK</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>结果如下：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062356870.png\" alt=\"image-20241006235656731\"></p>\n<h4 id=\"3-3-4-启动集群\"><a href=\"#3-3-4-启动集群\" class=\"headerlink\" title=\"3.3.4 启动集群\"></a>3.3.4 启动集群</h4><p>在主节点（master）执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">start-all.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>所有节点启动(已启动则忽略):</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hadoop-daemon.sh start journalnode<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>启动后的进程如下：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201954941.png\" alt=\"image-20240220195417889\"></p>\n<h3 id=\"3-4-使用命令分别查看服务nn2与rm2进程状态\"><a href=\"#3-4-使用命令分别查看服务nn2与rm2进程状态\" class=\"headerlink\" title=\"3.4 使用命令分别查看服务nn2与rm2进程状态\"></a>3.4 使用命令分别查看服务nn2与rm2进程状态</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs haadmin -getServiceState nn2</span>\nactive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141257798.png\" alt=\"image-20240314125738637\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yarn rmadmin -getServiceState rm2</span>\nactive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141259321.png\" alt=\"image-20240314125900240\"></p>\n<p>全部服务状态：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yarn rmadmin -getServiceState rm1</span>\nstandby\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yarn rmadmin -getServiceState rm2</span>\nactive\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs haadmin -getServiceState nn1</span>\nstandby\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs haadmin -getServiceState nn2</span>\nactive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141300299.png\" alt=\"image-20240314130004169\"></p>\n<h3 id=\"3-5-测试HA\"><a href=\"#3-5-测试HA\" class=\"headerlink\" title=\"3.5 测试HA\"></a>3.5 测试HA</h3><p>单服务启动的方式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hdfs <span class=\"token parameter variable\">--daemon</span> start namenode<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>进入192.168.10.10:9870 &#x2F; master:9870  <code>主节点</code></p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201957420.png\" alt=\"image-20240220195746352\"></p>\n<blockquote>\n<p>进入192.168.10.20:9870 &#x2F; slave1:9870\t<code>备用节点</code></p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201959110.png\" alt=\"image-20240220195931025\"></p>\n<blockquote>\n<p>kill 掉master的namenode服务刷新slave1的web端查看</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202001326.png\" alt=\"image-20240220200123248\"></p>\n<p>master的web端口：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202002860.png\" alt=\"image-20240220200224797\"></p>\n<p>发现此时的master节点的namenode已经无法访问，这里手动启动namenode服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs --daemon start namenode</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202004994.png\" alt=\"image-20240220200436908\"></p>\n<p>Hadoop HA部署完成</p>\n<h2 id=\"4-HDFS-操作指令\"><a href=\"#4-HDFS-操作指令\" class=\"headerlink\" title=\"4. HDFS 操作指令\"></a>4. HDFS 操作指令</h2><p>常用指令:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hdfs dfs -cat</td>\n<td>用于查看分布式文件系统中指定文件里面的内容</td>\n</tr>\n<tr>\n<td>hdfs dfs -chmod -R</td>\n<td>对分布式文件系统中的文件进行授权</td>\n</tr>\n<tr>\n<td>hdfs dfs -copyFromLocal -f -l -p</td>\n<td>把本地的文件复制到 HDFS 路径中</td>\n</tr>\n<tr>\n<td>hdfs dfs -copyToLocal -p -ignoreCrc</td>\n<td>把分布式文件系统中的文件复制到本地路径中</td>\n</tr>\n<tr>\n<td>hdfs dfs -put (-f -p -l)</td>\n<td>用于来将本地的文件上传到HDFS分布式文件系统中</td>\n</tr>\n<tr>\n<td>Hdfs dfs -find</td>\n<td>作用是用于查询分布式文件系统中的文件</td>\n</tr>\n<tr>\n<td>hdfs dfs -help</td>\n<td>用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书</td>\n</tr>\n<tr>\n<td>hdfs dfs -mv</td>\n<td>将分布式文件系统中的文件进行移动</td>\n</tr>\n<tr>\n<td>hdfs dfs -moveFromLocal</td>\n<td>把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）</td>\n</tr>\n<tr>\n<td>hdfs dfs -moveToLocal</td>\n<td>把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地）</td>\n</tr>\n<tr>\n<td>hdfs dfs -mkdir -p</td>\n<td>用来创建HDFS分布式文件系统中的文件</td>\n</tr>\n<tr>\n<td>hdfs dfs -rm -f -r</td>\n<td>将分布式文件系统中的文件进行删除</td>\n</tr>\n<tr>\n<td>hdfs dfs -rmdir</td>\n<td>用来进行递归删除文件&#x2F;文件夹，文件夹中有文件也能删除</td>\n</tr>\n</tbody></table>\n<p>全部指令:</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">1、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">cat</span> ：用于查看分布式文件系统中指定文件里面的内容\n2、hdfs dfs <span class=\"token operator\">-</span>checksum：用来查看指定文件的MD5值\n3、hdfs dfs <span class=\"token operator\">-</span>chmod <span class=\"token operator\">-</span>R：对分布式文件系统中的文件进行授权\n4、Hdfs dfs <span class=\"token operator\">-</span>copyFromLocal <span class=\"token operator\">-</span>f <span class=\"token operator\">-</span>l <span class=\"token operator\">-</span>p：把本地的文件复制到 HDFS 路径中\n5、Hdfs dfs <span class=\"token operator\">-</span>copyToLocal <span class=\"token operator\">-</span>p <span class=\"token operator\">-</span>ignoreCrc ：把分布式文件系统中的文件复制到本地路径中\n6、Hdfs dfs <span class=\"token operator\">-</span>count <span class=\"token operator\">-</span>q <span class=\"token operator\">-</span>h：用来进行统计计数操作\n7、dfs dfs <span class=\"token operator\">-</span>count <span class=\"token operator\">-</span>q <span class=\"token operator\">-</span>h：用来进行统计计数操作\n8、Hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">cp</span> <span class=\"token operator\">-</span>f <span class=\"token operator\">-</span>p：该命令的作用相当于我们windwos下的复制命令，作用是从 HDFS 的一个路径复制（拷贝）到 HDFS 的另一个路径\n9、Hdfs dfs <span class=\"token operator\">-</span>createSnapshot ：用来创建分布式文件系统的快照\n10、Hdfs dfs <span class=\"token operator\">-</span>deleteSnapshot：作用是用于删除分布式文件系统的快照\n11、Hdfs dfs <span class=\"token operator\">-</span>df <span class=\"token operator\">-</span>h：用于查看分布式文件系统硬盘的使用情况\n12、Hdfs dfs <span class=\"token operator\">-</span>du <span class=\"token operator\">-</span>s <span class=\"token operator\">-</span>h：用来查看分布式文件系统中指定文件的大小\n13、Hdfs dfs <span class=\"token operator\">-</span>expunge：用来对分布式文件系统中垃圾箱进行清空操作\n14、Hdfs dfs <span class=\"token operator\">-</span>find：作用是用于查询分布式文件系统中的文件\n15、Hdfs dfs <span class=\"token operator\">-</span>get <span class=\"token operator\">-</span>p <span class=\"token operator\">-</span>crc <span class=\"token operator\">-</span>ignoreCrc：作用是将分布式文件系统中的文件传输到本地机器上，相当于下载\n16、hdfs dfs <span class=\"token operator\">-</span>getfacl <span class=\"token operator\">-</span>R：获取对象或目录的 ACL（访问控制列表）\n17、hdfs dfs <span class=\"token operator\">-</span>getfatter <span class=\"token operator\">-</span>R：获取对象或目录的扩展属性\n18、hdfs dfs <span class=\"token operator\">-</span>getmerge <span class=\"token operator\">-</span>nl：获取对象属性\n19、hdfs dfs <span class=\"token operator\">-</span>help：用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书\n20、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">ls</span> <span class=\"token operator\">-</span>d <span class=\"token operator\">-</span>h <span class=\"token operator\">-</span>R ：该命令的作用是列出分布式文件系统中指定路径下的文件列表\n21、hdfs dfs <span class=\"token operator\">-</span>mkdir <span class=\"token operator\">-</span>p：用来创建HDFS分布式文件系统中的文件\n22、hdfs dfs <span class=\"token operator\">-</span>moveFromLocal：把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）\n23、hdfs dfs <span class=\"token operator\">-</span>moveToLocal：把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地）\n24、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">mv</span>：将分布式文件系统中的文件进行移动\n25、hdfs dfs <span class=\"token operator\">-</span>put <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>f <span class=\"token operator\">-</span>p <span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span>：用于来将本地的文件上传到HDFS分布式文件系统中\n26、hdfs dfs <span class=\"token operator\">-</span>renameSnapshot：用于对分布式文件系统中的快照进行更名\n27、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">rm</span> <span class=\"token operator\">-</span>f <span class=\"token operator\">-</span>r：将分布式文件系统中的文件进行删除\n28、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">rmdir</span> ：用来进行递归删除文件<span class=\"token operator\">/</span>文件夹，文件夹中有文件也能删除\n29、hdfs dfs <span class=\"token operator\">-</span>setfacl <span class=\"token operator\">-</span>R：设置对象或目录的 ACL（访问控制列表）\n30、hdfs dfs <span class=\"token operator\">-</span>setfattr <span class=\"token operator\">-</span>n：设置对象或目录的扩展属性\n31、hdfs dfs <span class=\"token operator\">-</span>setrep <span class=\"token operator\">-</span>R：用来设置 HDFS 中文件的副本数量\n32、hdfs dfs <span class=\"token operator\">-</span>stat：根据格式显示指定对象的信息\n33、hdfs dfs <span class=\"token operator\">-</span>tail <span class=\"token operator\">-</span>f：作用是显示指定文件的末尾\n34、hdfs dfs <span class=\"token operator\">-</span>test：用来判断指定文件的类型\n35、hdfs dfs <span class=\"token operator\">-</span>text：作用是以字符形式打印一个文件的内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Hadoop\"><a href=\"#Hadoop\" class=\"headerlink\" title=\"Hadoop\"></a>Hadoop</h1><h2 id=\"1-Hadoop-概述\"><a href=\"#1-Hadoop-概述\" class=\"headerlink\" title=\"1.Hadoop 概述\"></a>1.Hadoop 概述</h2><p><strong>1.1 Hadoop 是什么</strong></p>\n<p>（1）Hadoop是一个由Apache基金会所开发的<font color=\"red\" size=\"3\">分布式系统基础架构</font> </p>\n<p>（2）主要解决海量数据的<font color=\"red\" size=\"3\">存储</font>和海量数据的<font color=\"red\" size=\"3\">分析计算</font>问题 </p>\n<p>（3）广义上来说，Hadoop通常是指一个更广泛的概念——<font color=\"red\" size=\"3\">Hadoop生态圈</font></p>\n<p><strong>1.2 Hadoop 优势</strong></p>\n<p>（1）<strong>高可靠性</strong>：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。 </p>\n<p>（2）<strong>高扩展性</strong>：在集群间分配任务数据，可方便的扩展数以千计的节点。 </p>\n<p>（3）<strong>高效性</strong>：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。 </p>\n<p>（4）<strong>高容错性</strong>：能够自动将失败的任务重新分配。</p>\n<p><strong>1.3 Hadoop 组成（面试重点）</strong></p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527570.png\" alt=\"在这里插入图片描述\"> \n\n<p>在Hadoop1.x 时代，Hadoop中的MapReduce同时处理业务逻辑运算和资源的调度，耦合性较大。 在Hadoop2.x时代，增加了Yarn。Yarn只负责资源的调度，MapReduce 只负责运算。 &#x3D;&#x3D;Hadoop3.x在组成上没有变化。&#x3D;&#x3D;</p>\n<p><strong>1.3.1 HDFS 架构概述</strong></p>\n<p>Hadoop Distributed File System，简称<font color=\"red\" size=\"3\">HDFS</font>，是一个分布式文件系统。</p>\n<p>（1）<code>NameNode</code>（nn）：存储文件的<strong>元数据</strong>，如<strong>文件名</strong>，<strong>文件目录结构</strong>，<strong>文件属性</strong>（生成时间、副本数、文件权限），以及每个文件的<strong>块列表</strong>和<strong>块所在的DataNode</strong>等。 </p>\n<p>（2）<code>DataNode</code>(dn)：在本地文件系统<strong>存储文件块数据</strong>，以及<strong>块数据的校验和</strong>。 </p>\n<p>（3）<code>Secondary NameNode</code>(2nn)：<strong>每隔一段时间对NameNode元数据备份</strong>。</p>\n<p><strong>1.3.2 YARN 架构概述</strong></p>\n<p>Yet Another Resource Negotiator 简称YARN ，另一种资源协调者，是Hadoop 的资源管理器。</p>\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111625192.png\" alt=\"在这里插入图片描述\">\n\n<p><code>ResourceManager</code>(RM)：整个集群资源（内存、CPU等）的管理者 </p>\n<p><code>NodeManager</code>(NM)：单个节点服务器资源的管理者。 </p>\n<p><code>ApplicationMaster</code>(AM)：单个任务运行的管理者。 </p>\n<p><code>Container</code>：容器，相当于一台独立的服务器，里面封装了任务运行所需要的资源，如<strong>内存、CPU、磁盘、网络</strong>等。</p>\n<p>说明： </p>\n<p>（1）客户端可以有多个 </p>\n<p>（2）集群上可以运行多个ApplicationMaster </p>\n<p>（3）每个NodeManager上可以有多个Container</p>\n<p><strong>1.3.3 MapReduce 架构概述</strong></p>\n<p>MapReduce 将计算过程分为两个阶段：Map 和Reduce 1）Map 阶段并行处理输入数据 2）Reduce 阶段对Map 结果进行汇总 </p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527808.png\" alt=\"在这里插入图片描述\">\n\n<p><strong>1.3.4 HDFS、YARN、MapReduce 三者关系</strong></p>\n<p>如图所示：</p>\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527601.png\" alt=\"在这里插入图片描述\">\n\n<p><strong>1.3.5 大数据技术生态体系</strong></p>\n<p>如图所示： <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527584.png\" alt=\"在这里插入图片描述\"> </p>\n<p>图中涉及的技术名词解释如下：</p>\n<p>（1）<code>Sqoop</code>：Sqoop 是一款开源的工具，主要用于在Hadoop、Hive 与传统的数据库（MySQL）间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop 的HDFS 中，也可以将HDFS 的数据导进到关系型数据库中。 </p>\n<p>（2）<code>Flume</code>：Flume 是一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume 支持在日志系统中定制各类数据发送方，用于收集数据。 （3）<code>Kafka</code>：Kafka 是一种高吞吐量的分布式发布订阅消息系统。 </p>\n<p>（4）<code>Spark</code>：Spark 是当前最流行的开源大数据内存计算框架。可以基于Hadoop 上存储的大数据进行计算。</p>\n<p>（5）<code>Flink</code>：Flink 是当前最流行的开源大数据内存计算框架。用于实时计算的场景较多。 </p>\n<p>（6）<code>Oozie</code>：Oozie 是一个管理Hadoop 作业（job）的工作流程调度管理系统。 </p>\n<p>（7）<code>Hbase</code>：HBase 是一个分布式的、面向列的开源数据库。HBase 不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。 </p>\n<p>（8）<code>Hive</code>：Hive 是基于Hadoop 的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL 查询功能，可以将SQL 语句转换为MapReduce 任务进行运行。其优点是学习成本低，可以通过类SQL 语句快速实现简单的MapReduce 统计，不必开发专门的MapReduce 应用，十分适合数据仓库的统计分析。 </p>\n<p>（9）<code>ZooKeeper</code>：它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、分布式同步、组服务等。</p>\n<p><strong>1.3.6 推荐系统框架图</strong></p>\n<p>推荐系统项目框架</p>\n <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111527591.png\" alt=\"在这里插入图片描述\">\n\n<p><strong>1.3.7 常用端口号说明</strong></p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111537682.png\" alt=\"在这里插入图片描述\">\n\n<h2 id=\"2-Hadoop-完全分部署运行环境搭建\"><a href=\"#2-Hadoop-完全分部署运行环境搭建\" class=\"headerlink\" title=\"2. Hadoop 完全分部署运行环境搭建\"></a>2. Hadoop 完全分部署运行环境搭建</h2><p>环境说明:</p>\n<table>\n<thead>\n<tr>\n<th>容器</th>\n<th>容器ip</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>master</td>\n<td>192.168.1.10</td>\n</tr>\n<tr>\n<td>slave1</td>\n<td>192.168.1.20</td>\n</tr>\n<tr>\n<td>slave2</td>\n<td>192.168.1.30</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-配置主机名\"><a href=\"#2-1-配置主机名\" class=\"headerlink\" title=\"2.1 配置主机名\"></a>2.1 配置主机名</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hostnamectl set-hostname master <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">bash</span>\nhostnamectl set-hostname slave1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">bash</span>\nhostnamectl set-hostname slave2 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-2-修改hosts，添加映射，关闭防火墙\"><a href=\"#2-2-修改hosts，添加映射，关闭防火墙\" class=\"headerlink\" title=\"2.2 修改hosts，添加映射，关闭防火墙\"></a>2.2 修改hosts，添加映射，关闭防火墙</h3><blockquote>\n<p>所有节点执行</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat /etc/hosts</span>\n<span class=\"token number\">127.0</span>.0.1\tlocalhost\n::1\tlocalhost ip6-localhost ip6-loopback\nfe00::0\tip6-localnet\nff00::0\tip6-mcastprefix\nff02::1\tip6-allnodes\nff02::2\tip6-allrouters\n<span class=\"token number\">192.168</span>.1.10\tmaster\n<span class=\"token number\">192.168</span>.1.20\tslave1\n<span class=\"token number\">192.168</span>.1.30\tslave2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">systemctl stop firewalld\nsystemctl disable firewalld<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-3-设置三台主机的免密登录\"><a href=\"#2-3-设置三台主机的免密登录\" class=\"headerlink\" title=\"2.3 设置三台主机的免密登录\"></a>2.3 设置三台主机的免密登录</h3><h4 id=\"2-3-1-生成免密公钥\"><a href=\"#2-3-1-生成免密公钥\" class=\"headerlink\" title=\"2.3.1 生成免密公钥\"></a>2.3.1 生成免密公钥</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ssh-keygen -t rsa\t\t#然后一直回车</span>\n或者\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ssh-keygen -f ~/.ssh/id_rsa -P '' #免回车</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607877.png\" alt=\"image-20230321114300354\"></p>\n<h4 id=\"2-3-2-复制公钥到服务器\"><a href=\"#2-3-2-复制公钥到服务器\" class=\"headerlink\" title=\"2.3.2 复制公钥到服务器\"></a>2.3.2 复制公钥到服务器</h4><pre class=\"line-numbers language-hss\" data-language=\"hss\"><code class=\"language-hss\">ssh-copy-id master\nssh-copy-id slave1\nssh-copy-id slave2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111607997.png\" alt=\"image-20230321115337762\"></p>\n<p>(另外两个节点也是如此操作，这里就不演示了)</p>\n<h3 id=\"2-4-JDK配置\"><a href=\"#2-4-JDK配置\" class=\"headerlink\" title=\"2.4 JDK配置\"></a>2.4 JDK配置</h3><p>解压文件到相应的位置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar -zxvf /opt/software/jdk-8u162-linux-x64.tar.gz -C /opt/module/</span>\n\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd /opt/module/\t#进入解压目录，可以给解压后的文件改个名字，方便记忆</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv jdk1.8.0_162/ jdk</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>设置jdk环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi /etc/profile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在末尾添加如下配置：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#JAVA_HOME</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/opt/module/jdk\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$JAVA_HOME</span>/bin:<span class=\"token variable\">$JAVA_HOME</span>/jre/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>刷新环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># source /etc/profile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>配置完后即可查看jdk版本号：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># java -version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617633.png\" alt=\"image-20230321122027954\"></p>\n<p>分发JDK和环境变量到两个副节点：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp /etc/profile root@slave1:/etc/profile</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp /etc/profile root@slave2:/etc/profile</span>\n\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -rq jdk/ root@slave1:/opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -rq jdk/ root@slave2:/opt/module/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617652.png\" alt=\"image-20230321122308314\"></p>\n<p>分发到两个副节点后，刷新环境变量，查看JAVA版本：</p>\n<p>slave1节点：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617692.png\" alt=\"image-20230321122633530\"></p>\n<p>slave2节点：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111617803.png\" alt=\"image-20230321122717175\"></p>\n<p>基础环境搭建完成！！</p>\n<blockquote>\n<p>添加jpsall脚本(可选)</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> <span class=\"token variable\">$JAVA_HOME</span>/bin/jpsall\n<span class=\"token function\">chmod</span> +x <span class=\"token variable\">$JAVA_HOME</span>/bin/jpsall<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>脚本内容如下:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n<span class=\"token keyword\">for</span> <span class=\"token for-or-select variable\">hostname</span> <span class=\"token keyword\">in</span> master slave1 slave2\n<span class=\"token keyword\">do</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token variable\">$hostname</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span>\n  <span class=\"token function\">ssh</span> <span class=\"token variable\">$hostname</span> <span class=\"token string\">\". /etc/profile; jps\"</span>\n<span class=\"token keyword\">done</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"2-5-Hadoop环境搭建\"><a href=\"#2-5-Hadoop环境搭建\" class=\"headerlink\" title=\"2.5 Hadoop环境搭建\"></a>2.5 Hadoop环境搭建</h3><blockquote>\n<p>前提：已完成3个节点的免密登录，jdk配置</p>\n</blockquote>\n<h4 id=\"2-5-1-解压包到相应位置：\"><a href=\"#2-5-1-解压包到相应位置：\" class=\"headerlink\" title=\"2.5.1 解压包到相应位置：\"></a>2.5.1 解压包到相应位置：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar -zxvf /opt/software/hadoop-3.1.3.tar.gz -C /opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv hadoop-3.1.3/ hadoop\t#改一下名字，方便记忆</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-5-2-添加hadoop环境变量\"><a href=\"#2-5-2-添加hadoop环境变量\" class=\"headerlink\" title=\"2.5.2 添加hadoop环境变量\"></a>2.5.2 添加hadoop环境变量</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi /etc/profile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>在末尾添加以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#HADOOP</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HADOOP_HOME</span><span class=\"token operator\">=</span>/opt/module/hadoop\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$HADOOP_HOME</span>/bin:<span class=\"token variable\">$HADOOP_HOME</span>/sbin\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HADOOP_CLASSPATH</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">`</span>$HADOOP_HOME/bin/hadoop classpath<span class=\"token variable\">`</span></span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_NAMENODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_DATANODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_SECONDARYNAMENODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">YARN_RESOURCEMANAGER_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">YARN_NODEMANAGER_USER</span><span class=\"token operator\">=</span>root\n\n<span class=\"token comment\">#备注：3.0后的版本需要指定服务用户</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>：wq 保存退出后，刷新环境变量：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># source /etc/profile</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>配置好后，即可直接查看hadoop 版本号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># hadoop version</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111621421.png\" alt=\"image-20230321124056646\"></p>\n<h3 id=\"2-6-修改6个主配置文件\"><a href=\"#2-6-修改6个主配置文件\" class=\"headerlink\" title=\"2.6 修改6个主配置文件\"></a>2.6 修改6个主配置文件</h3><ul>\n<li>:one: core.site.xml </li>\n<li>:two: hdfs-site.xml </li>\n<li>:three: mapred-site.xml </li>\n<li>:four:yarn-site.xml </li>\n<li>:five: hadoop-env.sh </li>\n<li>:six: workers</li>\n</ul>\n<p>&#x3D;&#x3D;配置参考官方文档&#x3D;&#x3D;</p>\n<blockquote>\n<p>目录:<code>\\hadoop-3.1.3\\share\\doc\\hadoop</code></p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042227312.png\" alt=\"image-20240104222735234\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042226052.png\" alt=\"image-20240104222630568\"></p>\n<p>或直接查看官方配置文件:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> ./ <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"core-de*\"</span> <span class=\"token parameter variable\">-o</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"hdfs-de*\"</span> <span class=\"token parameter variable\">-o</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"mapred-de*\"</span> <span class=\"token parameter variable\">-o</span> <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"yarn-de*\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051527779.png\" alt=\"image-20240105152739131\"></p>\n<p>(记住主要参数名即可)</p>\n<h4 id=\"2-6-1先进入配置目录\"><a href=\"#2-6-1先进入配置目录\" class=\"headerlink\" title=\"2.6.1先进入配置目录\"></a>2.6.1先进入配置目录</h4><pre class=\"line-numbers language-SH\" data-language=\"SH\"><code class=\"language-SH\">[root@master module]# cd hadoop&#x2F;etc&#x2F;hadoop&#x2F;\n[root@master hadoop]# ll<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>可以看到如下文件：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630756.png\" alt=\"image-20230321124310396\"></p>\n<p>我们只用修改其中的6条</p>\n<h4 id=\"2-6-2-hadoop-env-sh配置：\"><a href=\"#2-6-2-hadoop-env-sh配置：\" class=\"headerlink\" title=\"2.6.2 hadoop-env.sh配置：\"></a>2.6.2 hadoop-env.sh配置：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi hadoop-env.sh #告诉hadoop jdk在哪里</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630692.png\" alt=\"image-20230321124524896\"></p>\n<h4 id=\"2-6-3-workers配置\"><a href=\"#2-6-3-workers配置\" class=\"headerlink\" title=\"2.6.3 workers配置\"></a>2.6.3 workers配置</h4><p>（根据自己的集群来进行配置）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi workers</span>\nmaster\nslave1\nslave2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630688.png\" alt=\"image-20230321124806539\"></p>\n<h4 id=\"2-6-4-core-site-xml配置：\"><a href=\"#2-6-4-core-site-xml配置：\" class=\"headerlink\" title=\"2.6.4 core.site.xml配置：\"></a>2.6.4 core.site.xml配置：</h4><p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401042229494.png\" alt=\"image-20240104222915427\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi core-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- hdfs的地址名称：schame,ip,port--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>fs.defaultFS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>hdfs://master:9000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hadoop.tmp.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/tmp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-6-5-hdfs-site-xml\"><a href=\"#2-6-5-hdfs-site-xml\" class=\"headerlink\" title=\"2.6.5 hdfs.site.xml:\"></a>2.6.5 hdfs.site.xml:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi hdfs-site.xml </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- namenode守护进程管理的元数据文件fsimage存储的位置--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.name.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/dfs/name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.datanode.data.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/dfs/data<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 块的副本数--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.replication<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 块的大小(128M),下面的单位是字节--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.blocksize<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>134217728<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- secondarynamenode守护进程的http地址：主机名和端口号。参考守护进程布局--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.secondary.http-address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:9868<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- namenode守护进程的http地址：主机名和端口号。参考守护进程布局--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.http-address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:9870<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--是否开通HDFS的Web接口，3.0版本后默认端口是9870--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.webhdfs.enabled<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-6-6-mapred-site-xml\"><a href=\"#2-6-6-mapred-site-xml\" class=\"headerlink\" title=\"2.6.6 mapred-site.xml:\"></a>2.6.6 mapred-site.xml:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi mapred-site.xml </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 指定mapreduce使用yarn资源管理器--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.framework.name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>yarn<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置作业历史服务器的地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.jobhistory.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:10020<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置作业历史服务器的http地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.jobhistory.webapp.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:19888<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       \t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.app.mapreduce.am.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n      \t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.map.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      \t\t  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       \t\t <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.reduce.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      \t\t <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>   \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-6-7-yarn-site-xml\"><a href=\"#2-6-7-yarn-site-xml\" class=\"headerlink\" title=\"2.6.7 yarn-site.xml:\"></a>2.6.7 yarn-site.xml:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi yarn-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- Site specific YARN configuration properties --></span>\n\t<span class=\"token comment\">&lt;!-- NodeManager获取数据的方式shuffle --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.nodemanager.aux-services<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>mapreduce_shuffle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- 指定YARN的ResourceManager的地址 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.hostname<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- yarn的web访问地址 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.webapp.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:8088<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.webapp.https.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:8090<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.log-aggregation-enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!-- 设置聚合日志在hdfs上的保存时间 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.log-aggregation.retain-seconds<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>604800<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>以前hadoop 2.X 版本，访问web界面，hdfs端口号是50070，现在3.X版本，端口号是9870（最好自己指定端口号）</p>\n<h4 id=\"2-6-8-配置好后分发到副节点（别忘了环境变量也要再次分发）：\"><a href=\"#2-6-8-配置好后分发到副节点（别忘了环境变量也要再次分发）：\" class=\"headerlink\" title=\"2.6.8 配置好后分发到副节点（别忘了环境变量也要再次分发）：\"></a>2.6.8 配置好后分发到副节点（别忘了环境变量也要再次分发）：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp /etc/profile root@slave1:/etc/profile</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp /etc/profile root@slave2:/etc/profile</span>\n\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -r /opt/module/hadoop root@slave1:/opt/module</span>\n<span class=\"token punctuation\">[</span>root@master module<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -r /opt/module/hadoop root@slave2:/opt/module</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>分发完后去副节点刷新环境变量</p>\n<h4 id=\"2-6-9-初始化namenode：\"><a href=\"#2-6-9-初始化namenode：\" class=\"headerlink\" title=\"2.6.9 初始化namenode：\"></a>2.6.9 初始化namenode：</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs namenode -format</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630315.png\" alt=\"image-20230320183413920\"></p>\n<h4 id=\"2-6-10-开启集群：\"><a href=\"#2-6-10-开启集群：\" class=\"headerlink\" title=\"2.6.10 开启集群：\"></a>2.6.10 开启集群：</h4><p>简易启动：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># start-all.sh </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看结果:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">方法1:\njps\n方法2:<span class=\"token punctuation\">(</span>手动添加脚本<span class=\"token punctuation\">)</span>\njpsall<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结果：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111630752.png\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051740271.png\" alt=\"image-20240105174003166\"></p>\n<h3 id=\"2-7-web端口访问测试\"><a href=\"#2-7-web端口访问测试\" class=\"headerlink\" title=\"2.7 web端口访问测试\"></a>2.7 web端口访问测试</h3><p><a href=\"http://ip:9870/\">http://ip:9870</a></p>\n<p><a href=\"http://ip:8088/\">http://ip:8088</a></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531566.png\" alt=\"image-20240105153102460\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531631.png\" alt=\"image-20240105153114530\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401051531093.png\" alt=\"image-20240105153148000\"></p>\n<p>完成</p>\n<h2 id=\"3-Hadoop-HA\"><a href=\"#3-Hadoop-HA\" class=\"headerlink\" title=\"3. Hadoop HA\"></a>3. Hadoop HA</h2><h3 id=\"3-1-部署zookeeper集群\"><a href=\"#3-1-部署zookeeper集群\" class=\"headerlink\" title=\"3.1 部署zookeeper集群\"></a>3.1 部署zookeeper集群</h3><h4 id=\"3-1-1-解压所需压缩包并重命名\"><a href=\"#3-1-1-解压所需压缩包并重命名\" class=\"headerlink\" title=\"3.1.1 解压所需压缩包并重命名\"></a>3.1.1 解压所需压缩包并重命名</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar -zxvf /opt/software/zookeeper-3.4.6.tar.gz -C /opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv /opt/module/zookeeper-3.4.6/ /opt/module/zookeeper</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>创建数据目录和日志目录</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#数据目录</span>\n<span class=\"token function\">mkdir</span> /opt/module/zookeeper/data\n<span class=\"token comment\">#日志目录</span>\n<span class=\"token function\">mkdir</span> /opt/module/zookeeper/logs<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-1-2-配置环境变量\"><a href=\"#3-1-2-配置环境变量\" class=\"headerlink\" title=\"3.1.2 配置环境变量\"></a>3.1.2 配置环境变量</h4><blockquote>\n<p>所有节点添加</p>\n</blockquote>\n<p>添加环境变量:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#zookeeper</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">ZK_HOME</span><span class=\"token operator\">=</span>/opt/module/zookeeper\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$ZK_HOME</span>/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">>></span>/etc/profile<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n#zookeeper\nexport ZK_HOME=/opt/module/zookeeper\nexport PATH=\\<span class=\"token environment constant\">$PATH</span>:\\<span class=\"token variable\">$ZK_HOME</span>/bin\nEOF</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>刷新生效:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-1-3-配置zoo-cfg文件\"><a href=\"#3-1-3-配置zoo-cfg文件\" class=\"headerlink\" title=\"3.1.3 配置zoo.cfg文件\"></a>3.1.3 配置zoo.cfg文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">创建数据目录和日志目录\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mkdir /opt/module/zookeeper/&#123;data,logs&#125;</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp /opt/module/zookeeper/conf/zoo_sample.cfg /opt/module/zookeeper/conf/zoo.cfg</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi /opt/module/zookeeper/conf/zoo.cfg</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>配置内容如下:</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat zoo.cfg </span>\n<span class=\"token assign-left variable\">tickTime</span><span class=\"token operator\">=</span><span class=\"token number\">2000</span>\n<span class=\"token assign-left variable\">initLimit</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token assign-left variable\">syncLimit</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n<span class=\"token assign-left variable\">dataDir</span><span class=\"token operator\">=</span>/opt/module/zookeeper/data\n<span class=\"token assign-left variable\">dataLogDir</span><span class=\"token operator\">=</span>/opt/module/zookeeper/logs\n<span class=\"token assign-left variable\">clientPort</span><span class=\"token operator\">=</span><span class=\"token number\">2181</span>\n<span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>master:2888:3888\n<span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>slave1:2888:3888\n<span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>slave2:2888:3888<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>配置详解:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@kafka1 opt<span class=\"token punctuation\">]</span><span class=\"token comment\"># grep -Ev \"#|^$\" /usr/local/zookeeper/conf/zoo.cfg </span>\n<span class=\"token assign-left variable\">tickTime</span><span class=\"token operator\">=</span><span class=\"token number\">2000</span>\n<span class=\"token assign-left variable\">initLimit</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\n<span class=\"token assign-left variable\">syncLimit</span><span class=\"token operator\">=</span><span class=\"token number\">5</span>\n<span class=\"token assign-left variable\">dataDir</span><span class=\"token operator\">=</span>/opt/module/zookeeper/data\n<span class=\"token assign-left variable\">dataLogDir</span><span class=\"token operator\">=</span>/opt/module/zookeeper/logs\n<span class=\"token assign-left variable\">clientPort</span><span class=\"token operator\">=</span><span class=\"token number\">2181</span>\n<span class=\"token assign-left variable\">maxClientCnxns</span><span class=\"token operator\">=</span><span class=\"token number\">4096</span>\t<span class=\"token comment\">#(可选)</span>\n<span class=\"token assign-left variable\">autopurge.snapRetainCount</span><span class=\"token operator\">=</span><span class=\"token number\">128</span>   <span class=\"token comment\"># /opt/zookeeper里保存快照的最大数量(可选)</span>\n<span class=\"token assign-left variable\">autopurge.purgeInterval</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>   <span class=\"token comment\"># 几小时清理一次(可选)</span>\n<span class=\"token comment\"># 可以用主机名，因为设置了映射</span>\n<span class=\"token assign-left variable\">server.1</span><span class=\"token operator\">=</span>master:2888:3888\n<span class=\"token assign-left variable\">server.2</span><span class=\"token operator\">=</span>slave1:2888:3888\n<span class=\"token assign-left variable\">server.3</span><span class=\"token operator\">=</span>slave2:2888:3888\n\n配置参数解读：\n<span class=\"token assign-left variable\">server.A</span><span class=\"token operator\">=</span>B:C:D\n\nA是一个数字，表示这个是第几号服务器。myid中的编号就是这个值。zookeeper启动时读取此文件，拿到里面的数据与zoo.cfg里面的配置信息比较从而判断到底是哪个server。\nB是这个服务器的地址。\nC是这个服务器Follower与集群中的Leader服务器交换信息的端口。\nD是万一集群中的leader服务器挂了，需要一个端口来重新进行选举，选举一个新的leader，而这个端口就是用来执行选举时服务器相互通信的端口。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>结果:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201018515.png\" alt=\"image-20240105162313246\"></p>\n<h4 id=\"3-1-4-配置myid文件\"><a href=\"#3-1-4-配置myid文件\" class=\"headerlink\" title=\"3.1.4 配置myid文件\"></a>3.1.4 配置<code>myid</code>文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master zookeeper<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 1 > $ZK_HOME/data/myid</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-1-5-分发文件给子节点并分别修改myid文件\"><a href=\"#3-1-5-分发文件给子节点并分别修改myid文件\" class=\"headerlink\" title=\"3.1.5 分发文件给子节点并分别修改myid文件\"></a>3.1.5 分发文件给子节点并分别修改myid文件</h4><blockquote>\n<p>:warning:注意:如果子节点没有配置环境变量,也要一同分发</p>\n</blockquote>\n<p>分发:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -r /opt/module/zookeeper/ root@slave1:/opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># scp -r /opt/module/zookeeper/ root@slave2:/opt/module/</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>修改myid文件:</p>\n<p>slave1:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@slave1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 2 > /opt/module/zookeeper/data/myid</span>\n<span class=\"token punctuation\">[</span>root@slave1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 2 > $ZK_HOME/data/myid</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>slave2:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@slave2 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 3 > /opt/module/zookeeper/data/myid</span>\n<span class=\"token punctuation\">[</span>root@slave2 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># echo 3 > $ZK_HOME/data/myid</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-1-6-启动zk服务\"><a href=\"#3-1-6-启动zk服务\" class=\"headerlink\" title=\"3.1.6 启动zk服务\"></a>3.1.6 启动zk服务</h4><p>所有节点启动:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/module/zookeeper/bin/zkServer.sh start<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看启动状态:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">/opt/module/zookeeper/bin/zkServer.sh status<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n<p>master:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020411.png\" alt=\"image-20240105165336746\"></p>\n<p>slave1:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020560.png\" alt=\"image-20240105165353343\"></p>\n<p>slave2:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201020484.png\" alt=\"image-20240105165433958\"></p>\n<h3 id=\"3-2-配置Hadoop-HA\"><a href=\"#3-2-配置Hadoop-HA\" class=\"headerlink\" title=\"3.2 配置Hadoop HA\"></a>3.2 配置Hadoop HA</h3><p>操作步骤和完全分布式一样，主要修改配置文件，这里从<code>2.6</code>开始</p>\n<h4 id=\"3-2-1-hadoop-env-sh配置\"><a href=\"#3-2-1-hadoop-env-sh配置\" class=\"headerlink\" title=\"3.2.1 hadoop-env.sh配置\"></a>3.2.1 hadoop-env.sh配置</h4><p>添加以下内容：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span>/opt/module/jdk1.8.0_162\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_NAMENODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_DATANODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_SECONDARYNAMENODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">YARN_RESOURCEMANAGER_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">YARN_NODEMANAGER_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token comment\">#ha新增</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_JOURNALNODE_USER</span><span class=\"token operator\">=</span>root\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HDFS_ZKFC_USER</span><span class=\"token operator\">=</span>root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如下：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202007642.png\" alt=\"image-20240220200709576\"></p>\n<h4 id=\"3-2-2-workers配置\"><a href=\"#3-2-2-workers配置\" class=\"headerlink\" title=\"3.2.2 workers配置\"></a>3.2.2 workers配置</h4><p>添加集群信息：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># cat workers</span>\nmaster\nslave1\nslave2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-3-core-site-xml配置\"><a href=\"#3-3-3-core-site-xml配置\" class=\"headerlink\" title=\"3.3.3 core-site.xml配置\"></a>3.3.3 core-site.xml配置</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim core-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加以下配置：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- hdfs的地址名称：schame,ip,port--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>fs.defaultFS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>hdfs://master:9000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- hdfs的基础路径，被其他属性所依赖的一个基础路径 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hadoop.tmp.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/tmp<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- ha.zookeeper.quorum 指定zookeeper服务,新增配置 --></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>ha.zookeeper.quorum<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n            \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:2181,slave1:2181,slave2:2181<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-4-hdfs-site-xml配置-star\"><a href=\"#3-3-4-hdfs-site-xml配置-star\" class=\"headerlink\" title=\"3.3.4 hdfs-site.xml配置:star:\"></a>3.3.4 hdfs-site.xml配置:star:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hadoop<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim hdfs-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>添加以下内容：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- namenode是一个组，指定namenode的组名称，自己可以定义--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.nameservices<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>mycluster<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 指定namenode组的成员--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.ha.namenodes.mycluster<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>nn1,nn2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 角色1 的rpc 地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.rpc-address.mycluster.nn1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:9000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 角色2 的rpc 地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.rpc-address.mycluster.nn2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>slave1:9000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- Namenode 1 的地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.http-address.mycluster.nn1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:9870<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>   \n<span class=\"token comment\">&lt;!-- Namenode 2 的地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.http-address.mycluster.nn2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>slave1:9870<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span> \n<span class=\"token comment\">&lt;!--JournalNode 的地址及端口号--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.shared.edits.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>qjournal://master:8485;slave1:8485;slave2:8485/mycluster<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- namenode守护进程管理的元数据文件fsimage存储的位置--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.namenode.name.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/dfs/name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 确定DFS数据节点应该将其块存储在本地文件系统的何处--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.datanode.data.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/dfs/data<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--JournalNode 的数据存放地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.journalnode.edits.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/hadoopdir/journal<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--Failover 类服务名--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.client.failover.proxy.provider.mycluster<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>org.apache.hadoop.hdfs.server.namenode.ha.ConfiguredFailoverProxyProvider<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--远程管理方式，sshfence 使用 ssh 远程管理--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.ha.fencing.methods<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n               <span class=\"token comment\">&lt;!-- &lt;value>sshfence&lt;/value>--></span>\n               <span class=\"token comment\">&lt;!--但如果只配置sshfence，如果在机器宕机后不可达，则sshfence会返回false，即fence失败，所以得要配置成--></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>shell(true)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--ssh 私钥的位置--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.ha.fencing.ssh.private-key-files<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/root/.ssh/id_rsa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--配置自动故障切换，true【自动故障切换】，false【手动故障切换】--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.ha.automatic-failover.enabled<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--文件副本数量--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>dfs.replication<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>   \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-5-mapred-site-xml配置\"><a href=\"#3-3-5-mapred-site-xml配置\" class=\"headerlink\" title=\"3.3.5 mapred-site.xml配置\"></a>3.3.5 mapred-site.xml配置</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">&lt;!-- 指定mapreduce使用yarn资源管理器--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.framework.name<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>yarn<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置作业历史服务器的地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.jobhistory.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:10020<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 配置作业历史服务器的http地址--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.jobhistory.webapp.address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:19888<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--确保 MapReduce 应用程序能够正确地找到 Hadoop 分发目录并加载所需的类和资源  否者会导致hive使用异常--></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.app.mapreduce.am.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n      \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.map.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>mapreduce.reduce.env<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n      \t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>    \n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-6-yarn-site-xml配置-star\"><a href=\"#3-3-6-yarn-site-xml配置-star\" class=\"headerlink\" title=\"3.3.6 yarn-site.xml配置:star:\"></a>3.3.6 yarn-site.xml配置:star:</h4><pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- NodeManager获取数据的方式shuffle --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.nodemanager.aux-services<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>mapreduce_shuffle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--激活HA 配置--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.ha.enabled<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 管理节点状态自动恢复 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.recovery.enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 定义数据状态保持介质 --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.store.class<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>org.apache.hadoop.yarn.server.resourcemanager.recovery.ZKRMStateStore<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--指定zookeeper的服务地址，为了防止单节点故障，指定三个节点--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.zk-address<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master:2181,slave1:2181,slave2:2181<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--集群 ID--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.cluster-id<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>yarn-ha<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--定义两个 resourcemanager 角色--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.ha.rm-ids<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>rm1,rm2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>  \n<span class=\"token comment\">&lt;!--角色1 对应主机地址--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.hostname.rm1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>master<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>   \n<span class=\"token comment\">&lt;!--角色2 对应主机地址--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.resourcemanager.hostname.rm2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>slave1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>         \n<span class=\"token comment\">&lt;!-- 开启日志聚合功能，方便我们查看任务执行完成之后的日志记录 (可选)--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.log-aggregation-enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 设置聚合日志在hdfs上的保存时间（可选） --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>yarn.log-aggregation.retain-seconds<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>604800<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>配置完成之后分发到子节点,再进行服务启动准备:warning:</p>\n</blockquote>\n<h3 id=\"3-3-服务启动准备\"><a href=\"#3-3-服务启动准备\" class=\"headerlink\" title=\"3.3 服务启动准备\"></a>3.3 服务启动准备</h3><h4 id=\"3-3-1-启动journalnode服务\"><a href=\"#3-3-1-启动journalnode服务\" class=\"headerlink\" title=\"3.3.1 启动journalnode服务\"></a>3.3.1 启动journalnode服务</h4><blockquote>\n<p><code>所有节点</code>启动journalnode</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hadoop-daemon.sh start journalnode<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-2-初始化namenode\"><a href=\"#3-3-2-初始化namenode\" class=\"headerlink\" title=\"3.3.2 初始化namenode\"></a>3.3.2 初始化namenode</h4><blockquote>\n<p>master(<code>nn1</code>)节点初始化namenode</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hdfs namenode <span class=\"token parameter variable\">-format</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>结果如下：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201950935.png\" alt=\"image-20240220195039832\"></p>\n<blockquote>\n<p>同步元数据到<code>nn2</code>（slave1）</p>\n</blockquote>\n<p>:one: 方式1: 直接从主节点(<code>nn1</code>)发送到主节点(<code>nn2</code>)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">scp</span> <span class=\"token parameter variable\">-r</span> hadoopdir/dfs/ root@slave1:/root/hadoopdir<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201951392.png\"></p>\n<p>:two: 方式2:在主节点(<code>nn2</code>)使用指令同步</p>\n<p>首先需要在主几点(<code>nn1</code>)启动namenode服务,否则在主节点(<code>nn2</code>)节点中同步元数据会失败,</p>\n<p>提示找不到<code>master</code>的namenode服务,如下图:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062328858.png\" alt=\"image-20241006232852729\"></p>\n<p>关键错误是<code>“Connection refused”</code>，这表明备用NameNode无法连接到活动NameNode（192.168.10.11:9000）。</p>\n<p><strong>正确步骤如下:</strong></p>\n<p>1.在master(nn1)启动namenode服务:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs --daemon start namenode</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.在slave1(nn2)使用指令同步元数据</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@slave1 ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs namenode -bootstrapStandby</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062326234.png\" alt=\"image-20241006232636095\"></p>\n<p>同步需要进一步确定是否成功,可以直接查看<code>/root/hadoopdir</code>数据目录下是否成功同步过来,如下图:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062332270.png\" alt=\"image-20241006233249156\"></p>\n<p>(方式2和方式1一样,所以我觉得直接使用scp更高效点ovO…)</p>\n<h4 id=\"3-3-3-master节点初始化zk\"><a href=\"#3-3-3-master节点初始化zk\" class=\"headerlink\" title=\"3.3.3 master节点初始化zk\"></a>3.3.3 master节点初始化zk</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hdfs zkfc <span class=\"token parameter variable\">-formatZK</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>结果如下：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202410062356870.png\" alt=\"image-20241006235656731\"></p>\n<h4 id=\"3-3-4-启动集群\"><a href=\"#3-3-4-启动集群\" class=\"headerlink\" title=\"3.3.4 启动集群\"></a>3.3.4 启动集群</h4><p>在主节点（master）执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">start-all.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>所有节点启动(已启动则忽略):</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hadoop-daemon.sh start journalnode<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>启动后的进程如下：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201954941.png\" alt=\"image-20240220195417889\"></p>\n<h3 id=\"3-4-使用命令分别查看服务nn2与rm2进程状态\"><a href=\"#3-4-使用命令分别查看服务nn2与rm2进程状态\" class=\"headerlink\" title=\"3.4 使用命令分别查看服务nn2与rm2进程状态\"></a>3.4 使用命令分别查看服务nn2与rm2进程状态</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs haadmin -getServiceState nn2</span>\nactive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141257798.png\" alt=\"image-20240314125738637\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yarn rmadmin -getServiceState rm2</span>\nactive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141259321.png\" alt=\"image-20240314125900240\"></p>\n<p>全部服务状态：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yarn rmadmin -getServiceState rm1</span>\nstandby\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yarn rmadmin -getServiceState rm2</span>\nactive\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs haadmin -getServiceState nn1</span>\nstandby\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs haadmin -getServiceState nn2</span>\nactive<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202403141300299.png\" alt=\"image-20240314130004169\"></p>\n<h3 id=\"3-5-测试HA\"><a href=\"#3-5-测试HA\" class=\"headerlink\" title=\"3.5 测试HA\"></a>3.5 测试HA</h3><p>单服务启动的方式：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hdfs <span class=\"token parameter variable\">--daemon</span> start namenode<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>进入192.168.10.10:9870 &#x2F; master:9870  <code>主节点</code></p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201957420.png\" alt=\"image-20240220195746352\"></p>\n<blockquote>\n<p>进入192.168.10.20:9870 &#x2F; slave1:9870\t<code>备用节点</code></p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402201959110.png\" alt=\"image-20240220195931025\"></p>\n<blockquote>\n<p>kill 掉master的namenode服务刷新slave1的web端查看</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202001326.png\" alt=\"image-20240220200123248\"></p>\n<p>master的web端口：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202002860.png\" alt=\"image-20240220200224797\"></p>\n<p>发现此时的master节点的namenode已经无法访问，这里手动启动namenode服务：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs --daemon start namenode</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images202402202004994.png\" alt=\"image-20240220200436908\"></p>\n<p>Hadoop HA部署完成</p>\n<h2 id=\"4-HDFS-操作指令\"><a href=\"#4-HDFS-操作指令\" class=\"headerlink\" title=\"4. HDFS 操作指令\"></a>4. HDFS 操作指令</h2><p>常用指令:</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hdfs dfs -cat</td>\n<td>用于查看分布式文件系统中指定文件里面的内容</td>\n</tr>\n<tr>\n<td>hdfs dfs -chmod -R</td>\n<td>对分布式文件系统中的文件进行授权</td>\n</tr>\n<tr>\n<td>hdfs dfs -copyFromLocal -f -l -p</td>\n<td>把本地的文件复制到 HDFS 路径中</td>\n</tr>\n<tr>\n<td>hdfs dfs -copyToLocal -p -ignoreCrc</td>\n<td>把分布式文件系统中的文件复制到本地路径中</td>\n</tr>\n<tr>\n<td>hdfs dfs -put (-f -p -l)</td>\n<td>用于来将本地的文件上传到HDFS分布式文件系统中</td>\n</tr>\n<tr>\n<td>Hdfs dfs -find</td>\n<td>作用是用于查询分布式文件系统中的文件</td>\n</tr>\n<tr>\n<td>hdfs dfs -help</td>\n<td>用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书</td>\n</tr>\n<tr>\n<td>hdfs dfs -mv</td>\n<td>将分布式文件系统中的文件进行移动</td>\n</tr>\n<tr>\n<td>hdfs dfs -moveFromLocal</td>\n<td>把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）</td>\n</tr>\n<tr>\n<td>hdfs dfs -moveToLocal</td>\n<td>把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地）</td>\n</tr>\n<tr>\n<td>hdfs dfs -mkdir -p</td>\n<td>用来创建HDFS分布式文件系统中的文件</td>\n</tr>\n<tr>\n<td>hdfs dfs -rm -f -r</td>\n<td>将分布式文件系统中的文件进行删除</td>\n</tr>\n<tr>\n<td>hdfs dfs -rmdir</td>\n<td>用来进行递归删除文件&#x2F;文件夹，文件夹中有文件也能删除</td>\n</tr>\n</tbody></table>\n<p>全部指令:</p>\n<pre class=\"line-numbers language-powershell\" data-language=\"powershell\"><code class=\"language-powershell\">1、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">cat</span> ：用于查看分布式文件系统中指定文件里面的内容\n2、hdfs dfs <span class=\"token operator\">-</span>checksum：用来查看指定文件的MD5值\n3、hdfs dfs <span class=\"token operator\">-</span>chmod <span class=\"token operator\">-</span>R：对分布式文件系统中的文件进行授权\n4、Hdfs dfs <span class=\"token operator\">-</span>copyFromLocal <span class=\"token operator\">-</span>f <span class=\"token operator\">-</span>l <span class=\"token operator\">-</span>p：把本地的文件复制到 HDFS 路径中\n5、Hdfs dfs <span class=\"token operator\">-</span>copyToLocal <span class=\"token operator\">-</span>p <span class=\"token operator\">-</span>ignoreCrc ：把分布式文件系统中的文件复制到本地路径中\n6、Hdfs dfs <span class=\"token operator\">-</span>count <span class=\"token operator\">-</span>q <span class=\"token operator\">-</span>h：用来进行统计计数操作\n7、dfs dfs <span class=\"token operator\">-</span>count <span class=\"token operator\">-</span>q <span class=\"token operator\">-</span>h：用来进行统计计数操作\n8、Hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">cp</span> <span class=\"token operator\">-</span>f <span class=\"token operator\">-</span>p：该命令的作用相当于我们windwos下的复制命令，作用是从 HDFS 的一个路径复制（拷贝）到 HDFS 的另一个路径\n9、Hdfs dfs <span class=\"token operator\">-</span>createSnapshot ：用来创建分布式文件系统的快照\n10、Hdfs dfs <span class=\"token operator\">-</span>deleteSnapshot：作用是用于删除分布式文件系统的快照\n11、Hdfs dfs <span class=\"token operator\">-</span>df <span class=\"token operator\">-</span>h：用于查看分布式文件系统硬盘的使用情况\n12、Hdfs dfs <span class=\"token operator\">-</span>du <span class=\"token operator\">-</span>s <span class=\"token operator\">-</span>h：用来查看分布式文件系统中指定文件的大小\n13、Hdfs dfs <span class=\"token operator\">-</span>expunge：用来对分布式文件系统中垃圾箱进行清空操作\n14、Hdfs dfs <span class=\"token operator\">-</span>find：作用是用于查询分布式文件系统中的文件\n15、Hdfs dfs <span class=\"token operator\">-</span>get <span class=\"token operator\">-</span>p <span class=\"token operator\">-</span>crc <span class=\"token operator\">-</span>ignoreCrc：作用是将分布式文件系统中的文件传输到本地机器上，相当于下载\n16、hdfs dfs <span class=\"token operator\">-</span>getfacl <span class=\"token operator\">-</span>R：获取对象或目录的 ACL（访问控制列表）\n17、hdfs dfs <span class=\"token operator\">-</span>getfatter <span class=\"token operator\">-</span>R：获取对象或目录的扩展属性\n18、hdfs dfs <span class=\"token operator\">-</span>getmerge <span class=\"token operator\">-</span>nl：获取对象属性\n19、hdfs dfs <span class=\"token operator\">-</span>help：用来显示分布式文件系统的所有操作，获取帮助。相当于我们平时所看到的说明书\n20、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">ls</span> <span class=\"token operator\">-</span>d <span class=\"token operator\">-</span>h <span class=\"token operator\">-</span>R ：该命令的作用是列出分布式文件系统中指定路径下的文件列表\n21、hdfs dfs <span class=\"token operator\">-</span>mkdir <span class=\"token operator\">-</span>p：用来创建HDFS分布式文件系统中的文件\n22、hdfs dfs <span class=\"token operator\">-</span>moveFromLocal：把本地的文件移动到分布式文件系统中（从本地剪切粘贴到HDFS）\n23、hdfs dfs <span class=\"token operator\">-</span>moveToLocal：把分布式文件系统中的文件移动到本地中（从HDFS将文件剪切粘贴到本地）\n24、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">mv</span>：将分布式文件系统中的文件进行移动\n25、hdfs dfs <span class=\"token operator\">-</span>put <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>f <span class=\"token operator\">-</span>p <span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span>：用于来将本地的文件上传到HDFS分布式文件系统中\n26、hdfs dfs <span class=\"token operator\">-</span>renameSnapshot：用于对分布式文件系统中的快照进行更名\n27、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">rm</span> <span class=\"token operator\">-</span>f <span class=\"token operator\">-</span>r：将分布式文件系统中的文件进行删除\n28、hdfs dfs <span class=\"token operator\">-</span><span class=\"token function\">rmdir</span> ：用来进行递归删除文件<span class=\"token operator\">/</span>文件夹，文件夹中有文件也能删除\n29、hdfs dfs <span class=\"token operator\">-</span>setfacl <span class=\"token operator\">-</span>R：设置对象或目录的 ACL（访问控制列表）\n30、hdfs dfs <span class=\"token operator\">-</span>setfattr <span class=\"token operator\">-</span>n：设置对象或目录的扩展属性\n31、hdfs dfs <span class=\"token operator\">-</span>setrep <span class=\"token operator\">-</span>R：用来设置 HDFS 中文件的副本数量\n32、hdfs dfs <span class=\"token operator\">-</span>stat：根据格式显示指定对象的信息\n33、hdfs dfs <span class=\"token operator\">-</span>tail <span class=\"token operator\">-</span>f：作用是显示指定文件的末尾\n34、hdfs dfs <span class=\"token operator\">-</span>test：用来判断指定文件的类型\n35、hdfs dfs <span class=\"token operator\">-</span>text：作用是以字符形式打印一个文件的内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Hive之Hiveserver2 metastore环境部署","date":"2024-11-09T14:38:45.000Z","_content":"# Hive\n\n## 1. Hive入门\n\n### 1.1 什么是Hive\n\nHive：由Facebook开源用于解决海量结构化日志的数据统计。\n\nHive是基于Hadoop的一个`数据仓库工具`，可以将`结构化的数据文件映射为一张表`，并提供`类SQL`查询功能。\n\n`本质是：将HQL转化成MapReduce程序`\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511957.png\" alt=\"image-20200916135459253\">\n\n1）Hive处理的数据存储在HDFS\n\n2）Hive分析数据底层的实现是MapReduce\n\n3）执行程序运行在Yarn上\n\n### 1.2 Hive的优缺点\n\n#### 1.2.1 优点\n\n1.  操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。 \n1.  避免了去写MapReduce，减少开发人员的学习成本。 \n1.  Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。 \n1.  Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。\n1.  Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。\n\n#### 1.2.2 缺点\n\n1．Hive的HQL表达能力有限\n\n（1）迭代式算法无法表达\n\n（2）数据挖掘方面不擅长\n\n\n\n2．Hive的效率比较低\n\n（1）Hive自动生成的MapReduce作业，通常情况下不够智能化\n\n（2）Hive调优比较困难，粒度较粗\n\n### 1.3Hive架构原理\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511001.png\" alt=\"img\">\n\n**1．用户接口：Client**\n\nCLI（hive shell）、JDBC/ODBC(java访问hive)、WEBUI（浏览器访问hive）\n\n\n\n**2．元数据：Metastore**\n\n元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等；\n\n`默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore`\n\n\n\n**3．Hadoop**\n\n使用HDFS进行存储，使用MapReduce进行计算。\n\n\n\n**4．驱动器：Driver**\n\n（1）解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。\n\n（2）编译器（Physical Plan）：将AST编译生成逻辑执行计划。\n\n（3）优化器（Query Optimizer）：对逻辑执行计划进行优化。\n\n（4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark。\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511219.png\" alt=\"image-20200916140721644\">\n\nHive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。\n\n\n\n## 2. Hive组件快速安装配置\n\n\n\n**实验环境**:\n\n| 容器系统 | 容器主机名 | 容器ip       | 容器用户名 |\n| -------- | ---------- | ------------ | ---------- |\n| centos7  | master     | 192.168.1.10 | root       |\n| centos7  | slave1     | 192.168.1.20 | root       |\n| centos7  | slave2     | 192.168.1.30 | root       |\n\n**组件版本**\n\n| 组件   | 版本  |\n| ------ | ----- |\n| java   | 1.8   |\n| Hadoop | 3.1.3 |\n| Hive   | 3.1.2 |\n| Mysql  | 5.7   |\n\n**数据库信息**\n\n| 数据库 | 用户名 | 密码   |\n| ------ | ------ | ------ |\n| mysql  | root   | 123456 |\n\n### 2.1 mysql部署\n\n#### 2.1.1 rpm方式部署\n\n>  (1) 进入mysql资源文件夹，加载所有安装包：\n\n![image-20240107152437021](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071524098.png)\n\n```sh\nrpm -Uvh *.rpm --nodeps --force\n```\n\n结果:![image-20240107152542173](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071525227.png)\n\n> (2) 查看安装情况：\n\n```sh\nrpm -qa|grep mysql\n```\n\n结果:![image-20240107152611487](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071526546.png)\n\n> (3) 数据库初始化：\n\n```sql\nmysqld --initialize --user=mysql\n```\n\n> (4) 查看临时产生的root用户密码：\n\n```sh\ngrep 'temporary password' /var/log/mysqld.log\n```\n\n![image-20240107152701968](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071527022.png)\n\n\n\n> (5) 启动Mysql服务，然后登陆数据库，输入临时密码\n\n\n\n启动:\n\n```sh\n[root@master mysql]# systemctl start mysqld\n[root@master mysql]# systemctl status mysqld\n```\n\n![image-20240107152816325](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071528386.png)\n\n\n\n登录数据库:\n\n```sh\n[root@master mysql]# mysql -uroot -p'zDfW:um0hgdi'\n```\n\n![image-20240107153027330](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071530387.png)\n\n\n\n\n\n> (6) 修改root用户密码\n\n```sql\nmysql> set password =\"123456\";\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n> (7) 修改MySQL库下的user表中的root用户允许任意ip连接：\n\n\n\n**方法1:**\n\n```sql\nmysql> grant all privileges on *.* to 'root'@'%' identified by '123456';\nmysql> flush privileges;  #刷新MySQL的系统权限相关表，否则会拒绝访问\n```\n\n**方法2:**\n\n查看 MySQL 数据库中存在的用户及其允许连接的主机:\n\n==(修改后一定要刷新权限表)==\n\n```sql\n#可以看出root用户只允许本地连接\nmysql> select user,host from mysql.user;\n+---------------+-----------+\n| user          | host      |\n+---------------+-----------+\n| mysql.session | localhost |\n| mysql.sys     | localhost |\n| root          | localhost |\n+---------------+-----------+\n3 rows in set (0.00 sec)\n```\n\n修改root用户允许任意ip连接:\n\n```sql\nmysql> UPDATE mysql.user SET host = '%' WHERE user = 'root';\nmysql> flush privileges;\n```\n\n再次查看用户信息:\n\n```sql\nmysql> select user,host from mysql.user;\n+---------------+-----------+\n| user          | host      |\n+---------------+-----------+\n| root          | %         |\n| mysql.session | localhost |\n| mysql.sys     | localhost |\n+---------------+-----------+\n3 rows in set (0.00 sec)\n```\n\n修改成功\n\n\n\n**测试远程连接:**\n\n(如果是docker部署,记得开放端口)\n\n![image-20240107160016412](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071600539.png)\n\n\n\n\n\n> :warning::warning::warning:可能会遇到的问题:\n\n\n\n`问题1`：在配置Mysql时候，需要授权出现密码不满足当前政策要求（密码安全等级）\n\n首先查看一下密码安全设置：\n\n```sql\nSHOW VARIABLES LIKE 'validate_password%';\n```\n\n如果不是最低权限，设置为最低权限：\n\n```sql\nset global validate_password_policy=LOW;  \\\\等级\nset global validate_password_length=6;   \\\\长度\nmysql> flush privileges;  #刷新MySQL的系统权限相关表，否则会拒绝访问\n```\n\n重新授权：\n\n```sql\nmysql> grant all privileges on *.* to 'root'@'%' identified by '123456';\nmysql> flush privileges;  #刷新MySQL的系统权限相关表，否则会拒绝访问\n```\n\n\n\n`问题2`: mysql安装失败：\n\n卸载MySQL：\n\n```sh\nyum remove mysql* -y\n```\n\n删除MySQL的安装残留文件\n\n```sh\nfind / -name \"mysql*\"  #查询所有mysql的文件\n```\n\n```sh\nfind / -name \"*mysql*\"|xargs rm -rfv  #删除所有查询到的mysql目录，安装包也会被删除\n```\n\n清理后重新安装\n\n\n\n**rpm 常用命令：**\n\n1.安装一个包 （展示正在安装的文件信息以及安装进度）\n\n```sh\nrpm -ivh\n```\n\n2.升级一个包\n\n```sh\nrpm -Uvh\n```\n\n3.卸载一个包\n\n```sh\nrpm -e\n```\n\n4.安装参数 --force / -–nodeps\n\n```sh\n-–force 即使覆盖属于其它包的文件也强迫安装\n-–nodeps 如果该RPM包的安装依赖其它包，即使其它包没装，也强迫安装（不检查依赖直接安装）。\n```\n\n#### 2.1.2 Docker 一键部署MySQL\n\n> (1) 拉取MySQL镜像\n\n```sh\n[root@bigdata ~]# docker pull mysql/mysql-server:5.7\n```\n\n> (2) 启动MySQL\n\n```sh\ndocker run -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_ROOT_HOST=% -p 3306:3306 --name=mysql1 -d mysql/mysql-server:5.7 --character-set-server=utf8mb4\n```\n\n参数详解:\n\n- `docker run`: Docker 命令，用于运行一个新的容器。\n- `-e MYSQL_ROOT_PASSWORD=123456`: 设置 MySQL 根用户的密码为 `123456`。这是通过环境变量设置的。\n- `-e MYSQL_ROOT_HOST=%`: 允许 MySQL 根用户从任何主机连接。这是通过环境变量设置的，`%` 表示通配符，表示所有主机。\n- `-p 3306:3306`: 将容器内的 MySQL 端口 `3306` 映射到宿主机的端口 `3307`。这是用于让外部应用程序能够连接到 MySQL 服务器。\n- `--name=mysql1`: 为容器命名为 `mysql1`。\n- `-d`: 让容器在后台运行（detach 模式）。\n- `mysql/mysql-server:5.7`: 使用的 MySQL Docker 镜像及其版本。\n- `--character-set-server=utf8mb4`: 设置 MySQL 服务器的字符集为 `utf8mb4`。\n\n\n\n**测试:**\n\n安装mariadb客户端:\n\n```sh\n[root@bigdata ~]# yum install mariadb -y\n```\n\n使用测试:\n\n```sh\n[root@bigdata ~]# mysql -uroot -p123456 -h 192.168.10.81 -P 3308 -e \"show databases;\"\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n```\n\nMySQL部署完成\n\n### 2.2 Hive部署\n\n#### 2.2.1 解压并重命名\n\n```sh\n[root@master ~]# tar -zxvf /opt/software/apache-hive-3.1.2-bin.tar.gz -C /opt/module/\n[root@master ~]# mv /opt/module/apache-hive-3.1.2-bin/ /opt/module/hive\n```\n\n#### 2.2.2 添加环境变量\n\n```sh\n#HIVE_HOME\nexport HIVE_HOME=/opt/module/hive\nexport PATH=$PATH:$HIVE_HOME/bin\n```\n\n```sh\n#命令行写入环境变量\ncat >>/etc/profile<<EOF\n#HIVE\nexport HIVE_HOME=/opt/module/hive\nexport PATH=\\$PATH:\\$HIVE_HOME/bin\nEOF\n#重新载入环境变量\nsource /etc/profile\n```\n\n#### 2.2.3 添加MySQL驱动\n\n将MySQL的JDBC驱动拷贝到Hive的lib目录下:\n\n```sh\n[root@master ~]# cp /opt/software/mysql/mysql-connector-java-5.1.44-bin.jar $HIVE_HOME/lib\n```\n\n查看是否拷贝成功:\n\n```sh\n[root@master ~]# ll $HIVE_HOME/lib | grep mysql\n-rw-r--r-- 1 root root   999635 Jan  7 09:19 mysql-connector-java-5.1.44-bin.jar\n-rw-r--r-- 1 root root    10476 Nov 15  2018 mysql-metadata-storage-0.12.0.jar\n```\n\n![image-20240107172131324](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071721497.png)\n\n\n\n在HDFS中的user新建hive目录（`Hive的数据表实际存储在hadoop中`，所以需要先在hdfs中配置数据目录）：\n\n```sh\n创建目录:\n[root@master ~]# hdfs dfs -mkdir -p /user/hive/warehouse \n查看是否创建成功:\n[root@master ~]# hdfs dfs -ls /user/hive \nFound 1 items\ndrwxr-xr-x   - root supergroup          0 2024-01-07 09:23 /user/hive/warehouse\n```\n\n![image-20240107172405192](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071724272.png)\n\n#### 2.2.4 解决guava版本问题(高版本替换低版本)\n\n```sh\n1.删除旧的guava-19.0.jar,将hadoop中的guava-27.0-jre.jar拷贝过来\n[root@master ~]# rm -rf $HIVE_HOME/lib/guava-19.0.jar\n[root@master ~]# cp $HADOOP_HOME/share/hadoop/common/lib/guava-27.0-jre.jar $HIVE_HOME/lib\n2.查看是否拷贝成功\n[root@master ~]# ll $HIVE_HOME/lib/guava-27.0-jre.jar \n-rw-r--r-- 1 root root 2747878 Jan  7 09:27 /opt/module/hive/lib/guava-27.0-jre.jar\n```\n\n#### 2.2.5 配置`hive-site.xml`配置文件\n\n> 方式1:直接修改官方模板\n>\n> ==测试环境部署(方便测试)==\n\n```sh\n[root@master ~]# cd $HIVE_HOME/conf\n[root@master conf]# cp hive-default.xml.template hive-site.xml\n[root@master conf]# vi hive-site.xml\n```\n\n**需要修改的配置位置如下:**\n\n\n\n<!-- jdbc 连接的 password --> \n\n```xml\n568     <name>javax.jdo.option.ConnectionPassword</name>\n569     <value>123456</value>\n```\n\n![image-20240107174234563](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071742987.png)\n\n<!-- jdbc 连接的 URL -->\n\n```xml\n583\t<name>javax.jdo.option.ConnectionURL</name>\n584\t<value>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false</value>\n\n连接参数:\njdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false\n&amp转义字符\n```\n\n![image-20240107175939389](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071759521.png)\n\n参数解释:\n\n- `jdbc:mysql://`: 指定 JDBC 驱动程序类型，这里是 MySQL 的 JDBC 驱动。\n- `192.168.1.10`: 数据库服务器的 IP 地址或主机名。\n- `3306`: MySQL 服务器的端口号，默认是 `3306`。\n- `metastore`: 数据库的名称（也称为数据库实例）。\n- `?createDatabaseIfNotExist=true`: 如果数据库不存在，则创建数据库。这是一个额外的参数，用于在连接时创建数据库。\n- `&amp`: 这是 HTML 实体编码中的 `&` 符号，用于分隔不同的连接参数。\n- `useSSL=false`: 禁用 SSL 连接，可以提高连接性能。\n\n\n\n综合起来，这个连接字符串表示你要连接到位于 `192.168.1.10` 主机上，端口为 `3306` 的 MySQL 数据库，数据库名称为 `metastore`。如果数据库不存在，它将尝试创建一个新的数据库。同时，它禁用了 SSL 连接。\n\n\n\n<!-- jdbc 连接的 Driver 驱动-->\n\n```xml\n1101\t<name>javax.jdo.option.ConnectionDriverName</name>\n1102\t<value>com.mysql.jdbc.Driver</value>\n```\n\n![image-20240107180037239](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071800309.png)\n\n<!-- jdbc 连接的 username(用户)--> \n\n```xml\n1126\t<name>javax.jdo.option.ConnectionUserName</name>\n1127\t<value>root</value>\n```\n\n![image-20240107180202550](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071802628.png)\n\n\n\n修改数据路径,在配置文件中修改所有的数据路径    4404\n\n所有${system:java.io.tmpdir}/${system:user.name}\n\n改成/home/hive/tmp/root\n\n```sh\nshift+:进入末行模式\n: %s@${system:user.name}@root@g\n: %s@${system:java.io.tmpdir}@/home/hive/tmp@g\n```\n\n删掉非法字符：&#8   3215行\n\n![image-20240107180735702](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071807782.png)\n\n\n\n完成！\n\n\n\n> 方式2:手动编写配置\n>\n> ==生产环境推荐(文档下面的新增配置都是以此配置为基础)==\n\n\n\n配置如下:\n\n```sh\nvi $HIVE_HOME/conf/hive-site.xml\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n<configuration>\n\t<property>\n\t<!--连接数据库URL-->\n\t\t<name>javax.jdo.option.ConnectionURL</name>\n\t\t<value>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false</value>\n\t</property>\n\t<property>\n\t<!--连接数据驱动-->\n\t\t<name>javax.jdo.option.ConnectionDriverName</name>\n\t\t<value>com.mysql.jdbc.Driver</value>\n\t</property>\n\t<property>\n\t<!--数据库连接用户名 jdbc 连接的 username-->\n\t\t<name>javax.jdo.option.ConnectionUserName</name>\n\t\t<value>root</value>\n\t</property>\n\t<property>\n\t<!--数据库连接密码 jdbc 连接的 password-->\n\t\t<name>javax.jdo.option.ConnectionPassword</name>\n\t\t<value>123456</value>\n\t</property>\n    <property>\n    <!-- Hive 元数据存储版本的验证 -->\n        <name>hive.metastore.schema.verification</name>\n        <value>false</value>\n    </property>\n    <property>\n    <!-- 元数据存储授权 -->\n        <name>hive.metastore.event.db.notification.api.auth</name>\n        <value>false</value>\n    </property>    \n    <property>\n\t<!--本机表的默认位置的URI Hive 默认在 HDFS 的工作目录-->\n\t\t<name>hive.metastore.warehouse.dir</name>\n\t\t<value>/user/hive/warehouse</value>\n\t</property>\n</configuration>\n```\n\n\n\n#### 2.2.6 编辑hive-env.sh配置文件\n\n```sh\n[root@master conf]# cp hive-env.sh.template hive-env.sh\n[root@master conf]# vi hive-env.sh\n```\n\n添加以下配置(告诉hive Hadoop在哪里):\n\n```sh\nexport HADOOP_HOME=/opt/module/hadoop\n```\n\n#### 2.2.7 初始化HIVE元数据库\n\n将hive写入mysql\n\n```sh\n[root@master hive]# schematool -dbType mysql -initSchema \n```\n\n结果如下为成功:\n\n![image-20240107181236159](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812254.png)\n\n![image-20240107181250765](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812841.png)\n\n竞赛使用:\n\n```sh\nschematool -dbType mysql -initSchema > hive.log\n```\n\n\n\n\n\n#### 2.2.8 查询数据库\n\n```sh\n[root@master conf]# hive -e \"show databases;\"\n```\n\n![image-20240107181433907](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071814990.png)\n\n\n\n> 发现hive shell中有许多日志信息的解决办法（hive-3.1.2）\n\n解决：\n\n需要在hive的安装目录下：`/opt/module/hive/conf/` 创建`log4j.properties`日志的配置文件，然后写入以下信息就可以了：\n\n```sh\n方式1:\nvi /opt/module/hive/conf/log4j.properties\n方式2:\nvi $HIVE_HOME/conf/log4j.properties\n```\n\n添加以下内容:\n\n```sh\nlog4j.rootLogger=WARN, CA\nlog4j.appender.CA=org.apache.log4j.ConsoleAppender\nlog4j.appender.CA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CA.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n\n```\n\n添加好后保存退出，重启hive即可解决\n\n\n\n**重新查询数据库:**\n\n```sh\n[root@master ~]# hive -e \"show databases;\"\n```\n\n![image-20240107181919652](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071819758.png)\n\n\n\n\n\n### 2.3 Hive 生产环境部署\n\n#### 2.3.1 Hiveserver2 服务\n\n​\tHive的hiveserver2服务的作用是提供jdbc/odbc接口，为用户提供远程访问Hive数据的功能，例如用户期望在个人电脑中访问远程服务中的Hive数据，就需要用到Hiveserver2。\n\n\n\n![image-20240113153640372](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131536469.png)\n\n\n\n> (1)用户说明\n\n​\t在远程访问Hive数据时，客户端并未直接访问Hadoop集群，而是由Hivesever2代理访问。由于Hadoop集群中的数据具备访问权限控制，所以此时需考虑一个问题：那就是访问Hadoop集群的用户身份是谁？是Hiveserver2的启动用户？还是客户端的登录用户？\n\n\n\n​\t答案是都有可能，具体是谁，由Hiveserver2的hive.server2.enable.doAs参数决定，该参数的含义是是否启用Hiveserver2用户模拟的功能。若启用，则Hiveserver2会模拟成客户端的登录用户去访问Hadoop集群的数据，不启用，则Hivesever2会直接使用启动用户访问Hadoop集群数据。模拟用户的功能，默认是开启的。\n\n具体逻辑如下：\n\n:one: 未开启用户模拟功能：\n\n![image-20240113154316776](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131543845.png)\n\n\n\n:two:开启用户模拟功能：\n\n![image-20240113154438046](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131544123.png)\n\n\n\n**生产环境，`推荐开启用户模拟功能`，因为开启后才能保证各用户之间的权限隔离**。\n\n\n\n> (2) Hiveserver2部署\n\n\n\n:one:Hadoop端配置\n\n​\thivesever2的模拟用户功能，依赖于Hadoop提供的proxy user（代理用户功能），只有Hadoop中的代理用户才能模拟其他用户的身份访问Hadoop集群。因此，需要`将hiveserver2的启动用户设置为Hadoop的代理用户`，配置方式如下：\n\n\n\n1. **`修改`配置文件core-site.xml，然后记得`分发`三台机器,然后再`重启`hadoop服务**\n\n```sh\nvim $HADOOP_HOME/etc/hadoop/core-site.xml\n```\n\n2. **增加如下配置:**\n\n```XML\n<!--配置所有节点的root用户都可作为代理用户-->\n\t<property>\n\t\t<name>hadoop.proxyuser.root.hosts</name>\n\t\t<value>*</value>\n\t</property>\n\n<!--配置root用户能够代理的用户组为任意组-->\n\t<property>\n\t\t<name>hadoop.proxyuser.root.groups</name>\n\t\t<value>*</value>\n\t</property>\n\n<!--配置root用户能够代理的用户为任意用户-->\n\t<property>\n\t\t<name>hadoop.proxyuser.root.users</name>\n\t\t<value>*</value>\n\t</property>\n```\n\n\n\n:two:Hive端配置\n\n1. **在 hive-site.xml 文件中添加以下配置信息**\n\n```sh\n[root@master ~]# vim $HIVE_HOME/conf/hive-site.xml\n```\n\n```xml\n    <property>\n\t<!--指定 hiveserver2 连接的 host (使用主机名需要添加本地映射)-->\n\t\t<name>hive.server2.thrift.bind.host</name>\n\t\t<value>192.168.1.10</value>\n\t</property>\n    <property>\n    <!-- 指定 hiveserver2 连接的端口号 -->\n        <name>hive.server2.thrift.port</name>\n        <value>10000</value>\n    </property>\n```\n\n:three:测试\n\n1. **启动hiveserver2**\n\n```sh\n[root@master ~]# hive --service hiveserver2\n```\n\n![image-20240113160812261](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131608356.png)\n\n\n\n查看端口是否已经存在,存在则成功启动hiveserver2\n\n```sh\n[root@master ~]# ss -tunlp |grep 10000\ntcp    LISTEN     0      50        *:10000                 *:*                   users:((\"java\",pid=9885,fd=511))\n```\n\n![image-20240113160740747](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131607826.png)\n\n\n\n2. **新打开一个终端,使用命令行客户端beeline进行远程访问**\n\n```sh\nbeeline -u jdbc:hive2://master:10000 -n atguigu\n```\n\n1. `beeline`：用于与Hive进行交互的命令行工具。\n2. `-u jdbc:hive2://master:10000`：指定JDBC连接URL，其中`master`是Hive服务器的主机名，`10000`是端口号。\n3. `-n atguigu`：指定连接时使用的Hive用户名（`atguigu`）。\n\n或\n\n```sh\nbeeline -u jdbc:hive2://master:10000\n```\n\n- `-u`标志用于指定JDBC连接URL，为Beeline提供连接到Hive服务器所需的信息。\n\n结果如下:\n\n![image-20240113202132033](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132021126.png)\n\n![image-20240113202033694](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132020816.png)\n\n\n\n4. **使用Datagrip图形化客户端进行远程访问**\n\n(1)创建连接:\n\n![image-20240113212219461](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132122559.png)\n\n(2)配置连接属性\n\n​\t有属性配置，和Hive的beeline客户端配置一致即可。初次使用，配置过程会提示缺少JDBC驱动，按照提示下载即可\n\n![image-20240113212331886](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132123984.png)\n\n（3）界面介绍\n\n\n\n![image-20240113213409280](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134380.png)\n\n（4）测试sql执行\n\n![image-20240113213430503](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134593.png)\n\n（5）修改数据库\n\n![image-20240113213449337](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134412.png)\n\n\n\n> **hiveserver2可能出现的报错:(可忽略)**\n\n![image-20240111111958040](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401111119587.png)\n\n参考: https://www.cnblogs.com/tianlingqun/p/16322927.html\n\n参考添加以下配置\n\n```xml\n    <property>\n\t<!-- 启动hive的高可用性,默认false -->\n\t\t<name>hive.server2.active.passive.ha.enable</name>\n\t\t<value>true</value>\n\t</property>\n```\n\n#### 2.3.2 metastore服务\n\n​\tHive的metastore服务的作用是为Hive CLI或者Hiveserver2提供元数据访问接口。\n\n\n\n:one:**metastore**运行模式\n\nmetastore有两种运行模式，分别为嵌入式模式和独立服务模式。下面分别对两种模式进行说明：\n\n\n\n> (1)嵌入式模式\n\n![image-20240113213712903](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137976.png)\n\n> (2)独立服务模式\n\n![image-20240113213743201](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137270.png)\n\n生产环境中，`不推荐使用嵌入式模式`。因为其存在以下两个问题：\n\n  (1）嵌入式模式下，每个Hive CLI都需要直接连接元数据库，当Hive CLI较多时，数据库压力会比较大。\n\n（2）每个客户端都需要用户元数据库的读写权限，元数据库的安全得不到很好的保证。\n\n\n\n:two:**metastore部署**\n\n\n\n> (1）嵌入式模式\n\n嵌入式模式下，只需保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中`包含连接元数据库所需要的以下参数即可`(前面部署时已添加)：\n\n```xml\n    <!-- jdbc连接的URL -->\n    <property>\n        <name>javax.jdo.option.ConnectionURL</name>\n        <value>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false</value>\n    </property>\n    \n    <!-- jdbc连接的Driver-->\n    <property>\n        <name>javax.jdo.option.ConnectionDriverName</name>\n        <value>com.mysql.jdbc.Driver</value>\n    </property>\n    \n\t<!-- jdbc连接的username-->\n    <property>\n        <name>javax.jdo.option.ConnectionUserName</name>\n        <value>root</value>\n    </property>\n\n    <!-- jdbc连接的password -->\n    <property>\n        <name>javax.jdo.option.ConnectionPassword</name>\n        <value>123456</value>\n    </property>\n```\n\n> （2）独立服务模式\n\n独立服务模式需做以下配置：\n\n首先，保证metastore服务的配置文件hive-site.xml中包含连接元数据库所需的以下参数：\n\n```xml\n    <!-- jdbc连接的URL -->\n    <property>\n        <name>javax.jdo.option.ConnectionURL</name>\n        <value>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false</value>\n    </property>\n    \n    <!-- jdbc连接的Driver-->\n    <property>\n        <name>javax.jdo.option.ConnectionDriverName</name>\n        <value>com.mysql.jdbc.Driver</value>\n    </property>\n    \n\t<!-- jdbc连接的username-->\n    <property>\n        <name>javax.jdo.option.ConnectionUserName</name>\n        <value>root</value>\n    </property>\n\n    <!-- jdbc连接的password -->\n    <property>\n        <name>javax.jdo.option.ConnectionPassword</name>\n        <value>123456</value>\n    </property>\n```\n\n其次，保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中`包含访问metastore服务`所需的以下参数：\n\n(`添加以下参数`)\n\n```xml\n\t<!-- 指定metastore服务的地址 -->\n\t<property>\n\t\t<name>hive.metastore.uris</name>\n\t\t<value>thrift://master:9083</value>\n\t</property>\n```\n\n注意：主机名需要改为metastore服务所在节点，端口号无需修改，metastore服务的默认端口就是9083。\n\n\n\n> (3) **测试**\n\n此时启动Hive CLI，执行shou databases语句，会出现一下错误提示信息：\n\n![image-20240113225247501](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132252589.png)\n\n​\t这是因为我们在Hive CLI的配置文件中配置了hive.metastore.uris参数，此时Hive CLI会去`请求我们执行的metastore服务地址`，所以`必须启动metastore服务`才能正常使用。\n\n\n\n**metastore服务的启动命令如下：**\n\n```sh\nhive --service metastore\n```\n\n注意：启动后该窗口不能再操作，需打开一个新的Xshell窗口来对Hive操作\n\n![image-20240113225511730](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132255816.png)\n\n\n\n新开一个终端,重新启动 Hive CLI，并执行shou databases语句，就能正常访问了:\n\n![image-20240113225647991](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132256079.png)\n\n#### 2.3.3 修改hive日志默认路径\n\n需要修改的文件模板如下:\n\n![image-20240114211120713](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142111810.png)\n\n\n\n如果初次配置,在conf文件夹下，复制一份模板\n\n```sh\n[root@master conf]# cp hive-exec-log4j2.properties.template hive-log4j2.properties\n[root@master conf]# vim hive-log4j2.properties\n```\n\n修改property.hive.log.dir\n`property.hive.log.dir = ${sys:java.io.tmpdir}/${sys:user.name}`这个会解析成/tmp/启动hive用户名称/hive.log\n配置的时候可以写成绝对路径\n\n![image-20240114211359832](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142113949.png)\n\n修改结果如下:\n\n```sh\n# list of properties\nproperty.hive.log.level = INFO\nproperty.hive.root.logger = DRFA\n#property.hive.log.dir = ${sys:java.io.tmpdir}/${sys:user.name}\nproperty.hive.log.dir = /opt/module/apache-hive-3.1.2/logs\nproperty.hive.log.file = hive.log\nproperty.hive.perflogger.log.level = INFO\n```\n\n\n\n#### 2.3.4 编写Hive服务启动脚本\n\n- nohup：放在命令开头，表示不挂起，也就是关闭终端进程也继续保持运行状态\n\n- /dev/null：是Linux文件系统中的一个文件，被称为黑洞，所有写入该文件的内容都会被自动丢弃\n\n- 2>&1：表示将错误重定向到标准输出上\n\n- &：放在命令结尾，表示后台运行\n\n一般会组合使用：nohup [xxx命令操作]> file 2>&1 &，表示将xxx命令运行的结果输出到file中，并保持命令启动的进程在后台运行。\n\n\n\n> 启动命令如下:\n\n```sh\nnohup hive --service metastore 2>&1 &\nnohup hive --service hiveserver2 2>&1 &\n```\n\n> 添加启动脚本(了解)\n\n```sh\n1.编辑启动脚本\nvi $HIVE_HOME/bin/hiveservices.sh\n2.编辑完后添加可执行权限\nchmod +x $HIVE_HOME/bin/hiveservices.sh\n```\n\n> 脚本内容如下:\n\n```sh\n#!/bin/bash\n\nHIVE_LOG_DIR=$HIVE_HOME/logs\nif [ ! -d $HIVE_LOG_DIR ]\nthen\n\tmkdir -p $HIVE_LOG_DIR\nfi\n\n#检查进程是否运行正常，参数1为进程名，参数2为进程端口\nfunction check_process()\n{\n    pid=$(ps -ef 2>/dev/null | grep -v grep | grep -i $1 | awk '{print $2}')\n    ppid=$(ss -nltp 2>/dev/null | grep $2 | awk '{print $7}' | cut -d '/' -f 1)\n    echo $pid\n    [[ \"$pid\" =~ \"$ppid\" ]] && [ \"$ppid\" ] && return 0 || return 1\n}\n\nfunction hive_start()\n{\n    metapid=$(check_process HiveMetastore 9083)\n    cmd=\"nohup hive --service metastore >$HIVE_LOG_DIR/metastore.log 2>&1 &\"\n    [ -z \"$metapid\" ] && eval $cmd || echo \"Metastroe服务已启动\"\n    server2pid=$(check_process HiveServer2 10000)\n    cmd=\"nohup hive --service hiveserver2 >$HIVE_LOG_DIR/hiveServer2.log 2>&1 &\"\n    [ -z \"$server2pid\" ] && eval $cmd || echo \"HiveServer2服务已启动\"\n}\n\nfunction hive_stop()\n{\nmetapid=$(check_process HiveMetastore 9083)\n    [ \"$metapid\" ] && kill $metapid || echo \"Metastore服务未启动\"\n    server2pid=$(check_process HiveServer2 10000)\n    [ \"$server2pid\" ] && kill $server2pid || echo \"HiveServer2服务未启动\"\n}\n\nfunction hive_status()\n{\n  ss -tunlp | grep 10000 > /dev/null\n  if [ $? -ne 0 ];then\n    sleep 3\n    echo \"HiveServer2服务运行异常\"\n  else\n    sleep 3\n    echo \"HiveServer2服务运行正常\"\n  fi\n  ss -tunlp | grep 9083 > /dev/null\n  if [ $? -ne 0 ];then\n    echo \"Metastore服务运行异常\"\n  else\n    echo \"Metastore服务运行正常\"\n  fi\n}\n\n\ncase $1 in\n\"start\")\n    hive_start\n    ;;\n\"stop\")\n    hive_stop\n    ;;\n\"restart\")\n    hive_stop\n    sleep 2\n    hive_start\n    ;;\n\"status\")\n#    check_process HiveMetastore 9083 >/dev/null && echo \"Metastore服务运行正常\" || echo \"Metastore服务运行异常\"\n#    check_process HiveServer2 10000 >/dev/null && echo \"HiveServer2服务运行正常\" || echo \"HiveServer2服务运行异常\"\n    hive_status\n    ;;\n*)\n    echo Invalid Args!\n    echo 'Usage: '$(basename $0)' start|stop|restart|status'\n    ;;\nesac\n```\n\n> 脚本启动测试\n\n```sh\n[root@master ~]# hiveservices.sh start\n```\n\n查看端口号是否已启动:\n\n![image-20240114113057354](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401141130477.png)\n\n脚本启动成功!\n\n\n\n部署完成!!!\n\n### 2.4  Hive使用技巧\n\n#### 2.4.1 Hive常用交互命令\n\n```sh\n查看帮助:\n[root@master hive]$ bin/hive -help\nusage: hive\n -d,--define <key=value>          Variable subsitution to apply to hive\n                                  commands. e.g. -d A=B or --define A=B\n    --database <databasename>     Specify the database to use\n -e <quoted-query-string>         SQL from command line\n -f <filename>                      SQL from files\n -H,--help                        Print help information\n    --hiveconf <property=value>   Use value for given property\n    --hivevar <key=value>         Variable subsitution to apply to hive\n                                  commands. e.g. --hivevar A=B\n -i <filename>                    Initialization SQL file\n -S,--silent                      Silent mode in interactive shell\n -v,--verbose                     Verbose mode (echo executed SQL to the console)\n```\n\n例1:\n\n```sql\n1）在Hive命令行里创建一个表student，并插入1条数据\nhive (default)> create table student(id int,name string);\nOK\nTime taken: 1.291 seconds\n\nhive (default)> insert into table student values(1,\"zhangsan\");\nhive (default)> select * from student;\nOK\nstudent.id\tstudent.name\n1\tzhangsan\nTime taken: 0.144 seconds, Fetched: 1 row(s)\n\n2）“-e”不进入hive的交互窗口执行hql语句\n[root@master hive]$ bin/hive -e \"select id from student;\"\n```\n\n```sh\n3）“-f”执行脚本中的hql语句\n（1）在/opt/module/hive/下创建datas目录并在datas目录下创建hivef.sql文件\n[atguigu@master hive]$ mkdir datas\n[atguigu@master datas]$ vim hivef.sql\n（2）文件中写入正确的hql语句\nselect * from student;\n（3）执行文件中的hql语句\n[atguigu@master hive]$ bin/hive -f /opt/module/hive/datas/hivef.sql\n（4）执行文件中的hql语句并将结果写入文件中\n[atguigu@master hive]$ bin/hive -f /opt/module/hive/datas/hivef.sql  > /opt/module/hive/datas/hive_result.txt\n```\n\n例2:\n\n```sql\ncreate table if  not exists orders(\nid string,\nuserno string,\npassword string,\nemail string,\nphone string,\nname string,\nidcard string,\nstatus int,\ndepid string\n)\nrow format  delimited fields terminated by ',';\n\n```\n\n从本地将csv文件导入hive(需要提前建好表)：\n\n```sh\nload data local inpath '文件路径' into table 表名;\nload data local inpath '/opt/user.csv' into table orders;\n```\n\n将hdfs中的文件导入hive：\n\n```sh\nload data inpath ‘hdfs中csv文件路径’ into table 表名;\nload data inpath '/data081/order.csv' into table orders;\n```\n\n导入完成\n\n执行导入语句说明：\n\n```sh\n load data inpath ‘/tmp/fun_user.txt’ into table fun_user_external;\n load data local inpath ‘/tmp/fun_user.txt’ into table fun_user_external;\n上面两条数据导入语句，如果有local这个关键字，则这个路径应该为本地文件系统路径，数据会被拷贝到目标位置；如果省略掉local关键字，那么这个路径应该是分布式文件系统中的路径，这种情况下，数据是从这个路径转移到目标位置的。\n```\n\n\n","source":"_posts/Hive之Hiveserver2-metastore环境部署.md","raw":"---\ntitle: Hive之Hiveserver2 metastore环境部署\ndate: 2024-11-09 22:38:45\ntags: Bigdata\ncategories: \n  - 大数据运维系列\n---\n# Hive\n\n## 1. Hive入门\n\n### 1.1 什么是Hive\n\nHive：由Facebook开源用于解决海量结构化日志的数据统计。\n\nHive是基于Hadoop的一个`数据仓库工具`，可以将`结构化的数据文件映射为一张表`，并提供`类SQL`查询功能。\n\n`本质是：将HQL转化成MapReduce程序`\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511957.png\" alt=\"image-20200916135459253\">\n\n1）Hive处理的数据存储在HDFS\n\n2）Hive分析数据底层的实现是MapReduce\n\n3）执行程序运行在Yarn上\n\n### 1.2 Hive的优缺点\n\n#### 1.2.1 优点\n\n1.  操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。 \n1.  避免了去写MapReduce，减少开发人员的学习成本。 \n1.  Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。 \n1.  Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。\n1.  Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。\n\n#### 1.2.2 缺点\n\n1．Hive的HQL表达能力有限\n\n（1）迭代式算法无法表达\n\n（2）数据挖掘方面不擅长\n\n\n\n2．Hive的效率比较低\n\n（1）Hive自动生成的MapReduce作业，通常情况下不够智能化\n\n（2）Hive调优比较困难，粒度较粗\n\n### 1.3Hive架构原理\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511001.png\" alt=\"img\">\n\n**1．用户接口：Client**\n\nCLI（hive shell）、JDBC/ODBC(java访问hive)、WEBUI（浏览器访问hive）\n\n\n\n**2．元数据：Metastore**\n\n元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列/分区字段、表的类型（是否是外部表）、表的数据所在目录等；\n\n`默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore`\n\n\n\n**3．Hadoop**\n\n使用HDFS进行存储，使用MapReduce进行计算。\n\n\n\n**4．驱动器：Driver**\n\n（1）解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。\n\n（2）编译器（Physical Plan）：将AST编译生成逻辑执行计划。\n\n（3）优化器（Query Optimizer）：对逻辑执行计划进行优化。\n\n（4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark。\n\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511219.png\" alt=\"image-20200916140721644\">\n\nHive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。\n\n\n\n## 2. Hive组件快速安装配置\n\n\n\n**实验环境**:\n\n| 容器系统 | 容器主机名 | 容器ip       | 容器用户名 |\n| -------- | ---------- | ------------ | ---------- |\n| centos7  | master     | 192.168.1.10 | root       |\n| centos7  | slave1     | 192.168.1.20 | root       |\n| centos7  | slave2     | 192.168.1.30 | root       |\n\n**组件版本**\n\n| 组件   | 版本  |\n| ------ | ----- |\n| java   | 1.8   |\n| Hadoop | 3.1.3 |\n| Hive   | 3.1.2 |\n| Mysql  | 5.7   |\n\n**数据库信息**\n\n| 数据库 | 用户名 | 密码   |\n| ------ | ------ | ------ |\n| mysql  | root   | 123456 |\n\n### 2.1 mysql部署\n\n#### 2.1.1 rpm方式部署\n\n>  (1) 进入mysql资源文件夹，加载所有安装包：\n\n![image-20240107152437021](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071524098.png)\n\n```sh\nrpm -Uvh *.rpm --nodeps --force\n```\n\n结果:![image-20240107152542173](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071525227.png)\n\n> (2) 查看安装情况：\n\n```sh\nrpm -qa|grep mysql\n```\n\n结果:![image-20240107152611487](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071526546.png)\n\n> (3) 数据库初始化：\n\n```sql\nmysqld --initialize --user=mysql\n```\n\n> (4) 查看临时产生的root用户密码：\n\n```sh\ngrep 'temporary password' /var/log/mysqld.log\n```\n\n![image-20240107152701968](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071527022.png)\n\n\n\n> (5) 启动Mysql服务，然后登陆数据库，输入临时密码\n\n\n\n启动:\n\n```sh\n[root@master mysql]# systemctl start mysqld\n[root@master mysql]# systemctl status mysqld\n```\n\n![image-20240107152816325](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071528386.png)\n\n\n\n登录数据库:\n\n```sh\n[root@master mysql]# mysql -uroot -p'zDfW:um0hgdi'\n```\n\n![image-20240107153027330](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071530387.png)\n\n\n\n\n\n> (6) 修改root用户密码\n\n```sql\nmysql> set password =\"123456\";\nQuery OK, 0 rows affected (0.00 sec)\n```\n\n> (7) 修改MySQL库下的user表中的root用户允许任意ip连接：\n\n\n\n**方法1:**\n\n```sql\nmysql> grant all privileges on *.* to 'root'@'%' identified by '123456';\nmysql> flush privileges;  #刷新MySQL的系统权限相关表，否则会拒绝访问\n```\n\n**方法2:**\n\n查看 MySQL 数据库中存在的用户及其允许连接的主机:\n\n==(修改后一定要刷新权限表)==\n\n```sql\n#可以看出root用户只允许本地连接\nmysql> select user,host from mysql.user;\n+---------------+-----------+\n| user          | host      |\n+---------------+-----------+\n| mysql.session | localhost |\n| mysql.sys     | localhost |\n| root          | localhost |\n+---------------+-----------+\n3 rows in set (0.00 sec)\n```\n\n修改root用户允许任意ip连接:\n\n```sql\nmysql> UPDATE mysql.user SET host = '%' WHERE user = 'root';\nmysql> flush privileges;\n```\n\n再次查看用户信息:\n\n```sql\nmysql> select user,host from mysql.user;\n+---------------+-----------+\n| user          | host      |\n+---------------+-----------+\n| root          | %         |\n| mysql.session | localhost |\n| mysql.sys     | localhost |\n+---------------+-----------+\n3 rows in set (0.00 sec)\n```\n\n修改成功\n\n\n\n**测试远程连接:**\n\n(如果是docker部署,记得开放端口)\n\n![image-20240107160016412](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071600539.png)\n\n\n\n\n\n> :warning::warning::warning:可能会遇到的问题:\n\n\n\n`问题1`：在配置Mysql时候，需要授权出现密码不满足当前政策要求（密码安全等级）\n\n首先查看一下密码安全设置：\n\n```sql\nSHOW VARIABLES LIKE 'validate_password%';\n```\n\n如果不是最低权限，设置为最低权限：\n\n```sql\nset global validate_password_policy=LOW;  \\\\等级\nset global validate_password_length=6;   \\\\长度\nmysql> flush privileges;  #刷新MySQL的系统权限相关表，否则会拒绝访问\n```\n\n重新授权：\n\n```sql\nmysql> grant all privileges on *.* to 'root'@'%' identified by '123456';\nmysql> flush privileges;  #刷新MySQL的系统权限相关表，否则会拒绝访问\n```\n\n\n\n`问题2`: mysql安装失败：\n\n卸载MySQL：\n\n```sh\nyum remove mysql* -y\n```\n\n删除MySQL的安装残留文件\n\n```sh\nfind / -name \"mysql*\"  #查询所有mysql的文件\n```\n\n```sh\nfind / -name \"*mysql*\"|xargs rm -rfv  #删除所有查询到的mysql目录，安装包也会被删除\n```\n\n清理后重新安装\n\n\n\n**rpm 常用命令：**\n\n1.安装一个包 （展示正在安装的文件信息以及安装进度）\n\n```sh\nrpm -ivh\n```\n\n2.升级一个包\n\n```sh\nrpm -Uvh\n```\n\n3.卸载一个包\n\n```sh\nrpm -e\n```\n\n4.安装参数 --force / -–nodeps\n\n```sh\n-–force 即使覆盖属于其它包的文件也强迫安装\n-–nodeps 如果该RPM包的安装依赖其它包，即使其它包没装，也强迫安装（不检查依赖直接安装）。\n```\n\n#### 2.1.2 Docker 一键部署MySQL\n\n> (1) 拉取MySQL镜像\n\n```sh\n[root@bigdata ~]# docker pull mysql/mysql-server:5.7\n```\n\n> (2) 启动MySQL\n\n```sh\ndocker run -e MYSQL_ROOT_PASSWORD=123456 -e MYSQL_ROOT_HOST=% -p 3306:3306 --name=mysql1 -d mysql/mysql-server:5.7 --character-set-server=utf8mb4\n```\n\n参数详解:\n\n- `docker run`: Docker 命令，用于运行一个新的容器。\n- `-e MYSQL_ROOT_PASSWORD=123456`: 设置 MySQL 根用户的密码为 `123456`。这是通过环境变量设置的。\n- `-e MYSQL_ROOT_HOST=%`: 允许 MySQL 根用户从任何主机连接。这是通过环境变量设置的，`%` 表示通配符，表示所有主机。\n- `-p 3306:3306`: 将容器内的 MySQL 端口 `3306` 映射到宿主机的端口 `3307`。这是用于让外部应用程序能够连接到 MySQL 服务器。\n- `--name=mysql1`: 为容器命名为 `mysql1`。\n- `-d`: 让容器在后台运行（detach 模式）。\n- `mysql/mysql-server:5.7`: 使用的 MySQL Docker 镜像及其版本。\n- `--character-set-server=utf8mb4`: 设置 MySQL 服务器的字符集为 `utf8mb4`。\n\n\n\n**测试:**\n\n安装mariadb客户端:\n\n```sh\n[root@bigdata ~]# yum install mariadb -y\n```\n\n使用测试:\n\n```sh\n[root@bigdata ~]# mysql -uroot -p123456 -h 192.168.10.81 -P 3308 -e \"show databases;\"\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n```\n\nMySQL部署完成\n\n### 2.2 Hive部署\n\n#### 2.2.1 解压并重命名\n\n```sh\n[root@master ~]# tar -zxvf /opt/software/apache-hive-3.1.2-bin.tar.gz -C /opt/module/\n[root@master ~]# mv /opt/module/apache-hive-3.1.2-bin/ /opt/module/hive\n```\n\n#### 2.2.2 添加环境变量\n\n```sh\n#HIVE_HOME\nexport HIVE_HOME=/opt/module/hive\nexport PATH=$PATH:$HIVE_HOME/bin\n```\n\n```sh\n#命令行写入环境变量\ncat >>/etc/profile<<EOF\n#HIVE\nexport HIVE_HOME=/opt/module/hive\nexport PATH=\\$PATH:\\$HIVE_HOME/bin\nEOF\n#重新载入环境变量\nsource /etc/profile\n```\n\n#### 2.2.3 添加MySQL驱动\n\n将MySQL的JDBC驱动拷贝到Hive的lib目录下:\n\n```sh\n[root@master ~]# cp /opt/software/mysql/mysql-connector-java-5.1.44-bin.jar $HIVE_HOME/lib\n```\n\n查看是否拷贝成功:\n\n```sh\n[root@master ~]# ll $HIVE_HOME/lib | grep mysql\n-rw-r--r-- 1 root root   999635 Jan  7 09:19 mysql-connector-java-5.1.44-bin.jar\n-rw-r--r-- 1 root root    10476 Nov 15  2018 mysql-metadata-storage-0.12.0.jar\n```\n\n![image-20240107172131324](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071721497.png)\n\n\n\n在HDFS中的user新建hive目录（`Hive的数据表实际存储在hadoop中`，所以需要先在hdfs中配置数据目录）：\n\n```sh\n创建目录:\n[root@master ~]# hdfs dfs -mkdir -p /user/hive/warehouse \n查看是否创建成功:\n[root@master ~]# hdfs dfs -ls /user/hive \nFound 1 items\ndrwxr-xr-x   - root supergroup          0 2024-01-07 09:23 /user/hive/warehouse\n```\n\n![image-20240107172405192](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071724272.png)\n\n#### 2.2.4 解决guava版本问题(高版本替换低版本)\n\n```sh\n1.删除旧的guava-19.0.jar,将hadoop中的guava-27.0-jre.jar拷贝过来\n[root@master ~]# rm -rf $HIVE_HOME/lib/guava-19.0.jar\n[root@master ~]# cp $HADOOP_HOME/share/hadoop/common/lib/guava-27.0-jre.jar $HIVE_HOME/lib\n2.查看是否拷贝成功\n[root@master ~]# ll $HIVE_HOME/lib/guava-27.0-jre.jar \n-rw-r--r-- 1 root root 2747878 Jan  7 09:27 /opt/module/hive/lib/guava-27.0-jre.jar\n```\n\n#### 2.2.5 配置`hive-site.xml`配置文件\n\n> 方式1:直接修改官方模板\n>\n> ==测试环境部署(方便测试)==\n\n```sh\n[root@master ~]# cd $HIVE_HOME/conf\n[root@master conf]# cp hive-default.xml.template hive-site.xml\n[root@master conf]# vi hive-site.xml\n```\n\n**需要修改的配置位置如下:**\n\n\n\n<!-- jdbc 连接的 password --> \n\n```xml\n568     <name>javax.jdo.option.ConnectionPassword</name>\n569     <value>123456</value>\n```\n\n![image-20240107174234563](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071742987.png)\n\n<!-- jdbc 连接的 URL -->\n\n```xml\n583\t<name>javax.jdo.option.ConnectionURL</name>\n584\t<value>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false</value>\n\n连接参数:\njdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false\n&amp转义字符\n```\n\n![image-20240107175939389](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071759521.png)\n\n参数解释:\n\n- `jdbc:mysql://`: 指定 JDBC 驱动程序类型，这里是 MySQL 的 JDBC 驱动。\n- `192.168.1.10`: 数据库服务器的 IP 地址或主机名。\n- `3306`: MySQL 服务器的端口号，默认是 `3306`。\n- `metastore`: 数据库的名称（也称为数据库实例）。\n- `?createDatabaseIfNotExist=true`: 如果数据库不存在，则创建数据库。这是一个额外的参数，用于在连接时创建数据库。\n- `&amp`: 这是 HTML 实体编码中的 `&` 符号，用于分隔不同的连接参数。\n- `useSSL=false`: 禁用 SSL 连接，可以提高连接性能。\n\n\n\n综合起来，这个连接字符串表示你要连接到位于 `192.168.1.10` 主机上，端口为 `3306` 的 MySQL 数据库，数据库名称为 `metastore`。如果数据库不存在，它将尝试创建一个新的数据库。同时，它禁用了 SSL 连接。\n\n\n\n<!-- jdbc 连接的 Driver 驱动-->\n\n```xml\n1101\t<name>javax.jdo.option.ConnectionDriverName</name>\n1102\t<value>com.mysql.jdbc.Driver</value>\n```\n\n![image-20240107180037239](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071800309.png)\n\n<!-- jdbc 连接的 username(用户)--> \n\n```xml\n1126\t<name>javax.jdo.option.ConnectionUserName</name>\n1127\t<value>root</value>\n```\n\n![image-20240107180202550](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071802628.png)\n\n\n\n修改数据路径,在配置文件中修改所有的数据路径    4404\n\n所有${system:java.io.tmpdir}/${system:user.name}\n\n改成/home/hive/tmp/root\n\n```sh\nshift+:进入末行模式\n: %s@${system:user.name}@root@g\n: %s@${system:java.io.tmpdir}@/home/hive/tmp@g\n```\n\n删掉非法字符：&#8   3215行\n\n![image-20240107180735702](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071807782.png)\n\n\n\n完成！\n\n\n\n> 方式2:手动编写配置\n>\n> ==生产环境推荐(文档下面的新增配置都是以此配置为基础)==\n\n\n\n配置如下:\n\n```sh\nvi $HIVE_HOME/conf/hive-site.xml\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?>\n<configuration>\n\t<property>\n\t<!--连接数据库URL-->\n\t\t<name>javax.jdo.option.ConnectionURL</name>\n\t\t<value>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false</value>\n\t</property>\n\t<property>\n\t<!--连接数据驱动-->\n\t\t<name>javax.jdo.option.ConnectionDriverName</name>\n\t\t<value>com.mysql.jdbc.Driver</value>\n\t</property>\n\t<property>\n\t<!--数据库连接用户名 jdbc 连接的 username-->\n\t\t<name>javax.jdo.option.ConnectionUserName</name>\n\t\t<value>root</value>\n\t</property>\n\t<property>\n\t<!--数据库连接密码 jdbc 连接的 password-->\n\t\t<name>javax.jdo.option.ConnectionPassword</name>\n\t\t<value>123456</value>\n\t</property>\n    <property>\n    <!-- Hive 元数据存储版本的验证 -->\n        <name>hive.metastore.schema.verification</name>\n        <value>false</value>\n    </property>\n    <property>\n    <!-- 元数据存储授权 -->\n        <name>hive.metastore.event.db.notification.api.auth</name>\n        <value>false</value>\n    </property>    \n    <property>\n\t<!--本机表的默认位置的URI Hive 默认在 HDFS 的工作目录-->\n\t\t<name>hive.metastore.warehouse.dir</name>\n\t\t<value>/user/hive/warehouse</value>\n\t</property>\n</configuration>\n```\n\n\n\n#### 2.2.6 编辑hive-env.sh配置文件\n\n```sh\n[root@master conf]# cp hive-env.sh.template hive-env.sh\n[root@master conf]# vi hive-env.sh\n```\n\n添加以下配置(告诉hive Hadoop在哪里):\n\n```sh\nexport HADOOP_HOME=/opt/module/hadoop\n```\n\n#### 2.2.7 初始化HIVE元数据库\n\n将hive写入mysql\n\n```sh\n[root@master hive]# schematool -dbType mysql -initSchema \n```\n\n结果如下为成功:\n\n![image-20240107181236159](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812254.png)\n\n![image-20240107181250765](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812841.png)\n\n竞赛使用:\n\n```sh\nschematool -dbType mysql -initSchema > hive.log\n```\n\n\n\n\n\n#### 2.2.8 查询数据库\n\n```sh\n[root@master conf]# hive -e \"show databases;\"\n```\n\n![image-20240107181433907](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071814990.png)\n\n\n\n> 发现hive shell中有许多日志信息的解决办法（hive-3.1.2）\n\n解决：\n\n需要在hive的安装目录下：`/opt/module/hive/conf/` 创建`log4j.properties`日志的配置文件，然后写入以下信息就可以了：\n\n```sh\n方式1:\nvi /opt/module/hive/conf/log4j.properties\n方式2:\nvi $HIVE_HOME/conf/log4j.properties\n```\n\n添加以下内容:\n\n```sh\nlog4j.rootLogger=WARN, CA\nlog4j.appender.CA=org.apache.log4j.ConsoleAppender\nlog4j.appender.CA.layout=org.apache.log4j.PatternLayout\nlog4j.appender.CA.layout.ConversionPattern=%-4r [%t] %-5p %c %x - %m%n\n```\n\n添加好后保存退出，重启hive即可解决\n\n\n\n**重新查询数据库:**\n\n```sh\n[root@master ~]# hive -e \"show databases;\"\n```\n\n![image-20240107181919652](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071819758.png)\n\n\n\n\n\n### 2.3 Hive 生产环境部署\n\n#### 2.3.1 Hiveserver2 服务\n\n​\tHive的hiveserver2服务的作用是提供jdbc/odbc接口，为用户提供远程访问Hive数据的功能，例如用户期望在个人电脑中访问远程服务中的Hive数据，就需要用到Hiveserver2。\n\n\n\n![image-20240113153640372](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131536469.png)\n\n\n\n> (1)用户说明\n\n​\t在远程访问Hive数据时，客户端并未直接访问Hadoop集群，而是由Hivesever2代理访问。由于Hadoop集群中的数据具备访问权限控制，所以此时需考虑一个问题：那就是访问Hadoop集群的用户身份是谁？是Hiveserver2的启动用户？还是客户端的登录用户？\n\n\n\n​\t答案是都有可能，具体是谁，由Hiveserver2的hive.server2.enable.doAs参数决定，该参数的含义是是否启用Hiveserver2用户模拟的功能。若启用，则Hiveserver2会模拟成客户端的登录用户去访问Hadoop集群的数据，不启用，则Hivesever2会直接使用启动用户访问Hadoop集群数据。模拟用户的功能，默认是开启的。\n\n具体逻辑如下：\n\n:one: 未开启用户模拟功能：\n\n![image-20240113154316776](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131543845.png)\n\n\n\n:two:开启用户模拟功能：\n\n![image-20240113154438046](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131544123.png)\n\n\n\n**生产环境，`推荐开启用户模拟功能`，因为开启后才能保证各用户之间的权限隔离**。\n\n\n\n> (2) Hiveserver2部署\n\n\n\n:one:Hadoop端配置\n\n​\thivesever2的模拟用户功能，依赖于Hadoop提供的proxy user（代理用户功能），只有Hadoop中的代理用户才能模拟其他用户的身份访问Hadoop集群。因此，需要`将hiveserver2的启动用户设置为Hadoop的代理用户`，配置方式如下：\n\n\n\n1. **`修改`配置文件core-site.xml，然后记得`分发`三台机器,然后再`重启`hadoop服务**\n\n```sh\nvim $HADOOP_HOME/etc/hadoop/core-site.xml\n```\n\n2. **增加如下配置:**\n\n```XML\n<!--配置所有节点的root用户都可作为代理用户-->\n\t<property>\n\t\t<name>hadoop.proxyuser.root.hosts</name>\n\t\t<value>*</value>\n\t</property>\n\n<!--配置root用户能够代理的用户组为任意组-->\n\t<property>\n\t\t<name>hadoop.proxyuser.root.groups</name>\n\t\t<value>*</value>\n\t</property>\n\n<!--配置root用户能够代理的用户为任意用户-->\n\t<property>\n\t\t<name>hadoop.proxyuser.root.users</name>\n\t\t<value>*</value>\n\t</property>\n```\n\n\n\n:two:Hive端配置\n\n1. **在 hive-site.xml 文件中添加以下配置信息**\n\n```sh\n[root@master ~]# vim $HIVE_HOME/conf/hive-site.xml\n```\n\n```xml\n    <property>\n\t<!--指定 hiveserver2 连接的 host (使用主机名需要添加本地映射)-->\n\t\t<name>hive.server2.thrift.bind.host</name>\n\t\t<value>192.168.1.10</value>\n\t</property>\n    <property>\n    <!-- 指定 hiveserver2 连接的端口号 -->\n        <name>hive.server2.thrift.port</name>\n        <value>10000</value>\n    </property>\n```\n\n:three:测试\n\n1. **启动hiveserver2**\n\n```sh\n[root@master ~]# hive --service hiveserver2\n```\n\n![image-20240113160812261](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131608356.png)\n\n\n\n查看端口是否已经存在,存在则成功启动hiveserver2\n\n```sh\n[root@master ~]# ss -tunlp |grep 10000\ntcp    LISTEN     0      50        *:10000                 *:*                   users:((\"java\",pid=9885,fd=511))\n```\n\n![image-20240113160740747](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131607826.png)\n\n\n\n2. **新打开一个终端,使用命令行客户端beeline进行远程访问**\n\n```sh\nbeeline -u jdbc:hive2://master:10000 -n atguigu\n```\n\n1. `beeline`：用于与Hive进行交互的命令行工具。\n2. `-u jdbc:hive2://master:10000`：指定JDBC连接URL，其中`master`是Hive服务器的主机名，`10000`是端口号。\n3. `-n atguigu`：指定连接时使用的Hive用户名（`atguigu`）。\n\n或\n\n```sh\nbeeline -u jdbc:hive2://master:10000\n```\n\n- `-u`标志用于指定JDBC连接URL，为Beeline提供连接到Hive服务器所需的信息。\n\n结果如下:\n\n![image-20240113202132033](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132021126.png)\n\n![image-20240113202033694](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132020816.png)\n\n\n\n4. **使用Datagrip图形化客户端进行远程访问**\n\n(1)创建连接:\n\n![image-20240113212219461](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132122559.png)\n\n(2)配置连接属性\n\n​\t有属性配置，和Hive的beeline客户端配置一致即可。初次使用，配置过程会提示缺少JDBC驱动，按照提示下载即可\n\n![image-20240113212331886](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132123984.png)\n\n（3）界面介绍\n\n\n\n![image-20240113213409280](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134380.png)\n\n（4）测试sql执行\n\n![image-20240113213430503](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134593.png)\n\n（5）修改数据库\n\n![image-20240113213449337](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134412.png)\n\n\n\n> **hiveserver2可能出现的报错:(可忽略)**\n\n![image-20240111111958040](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401111119587.png)\n\n参考: https://www.cnblogs.com/tianlingqun/p/16322927.html\n\n参考添加以下配置\n\n```xml\n    <property>\n\t<!-- 启动hive的高可用性,默认false -->\n\t\t<name>hive.server2.active.passive.ha.enable</name>\n\t\t<value>true</value>\n\t</property>\n```\n\n#### 2.3.2 metastore服务\n\n​\tHive的metastore服务的作用是为Hive CLI或者Hiveserver2提供元数据访问接口。\n\n\n\n:one:**metastore**运行模式\n\nmetastore有两种运行模式，分别为嵌入式模式和独立服务模式。下面分别对两种模式进行说明：\n\n\n\n> (1)嵌入式模式\n\n![image-20240113213712903](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137976.png)\n\n> (2)独立服务模式\n\n![image-20240113213743201](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137270.png)\n\n生产环境中，`不推荐使用嵌入式模式`。因为其存在以下两个问题：\n\n  (1）嵌入式模式下，每个Hive CLI都需要直接连接元数据库，当Hive CLI较多时，数据库压力会比较大。\n\n（2）每个客户端都需要用户元数据库的读写权限，元数据库的安全得不到很好的保证。\n\n\n\n:two:**metastore部署**\n\n\n\n> (1）嵌入式模式\n\n嵌入式模式下，只需保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中`包含连接元数据库所需要的以下参数即可`(前面部署时已添加)：\n\n```xml\n    <!-- jdbc连接的URL -->\n    <property>\n        <name>javax.jdo.option.ConnectionURL</name>\n        <value>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false</value>\n    </property>\n    \n    <!-- jdbc连接的Driver-->\n    <property>\n        <name>javax.jdo.option.ConnectionDriverName</name>\n        <value>com.mysql.jdbc.Driver</value>\n    </property>\n    \n\t<!-- jdbc连接的username-->\n    <property>\n        <name>javax.jdo.option.ConnectionUserName</name>\n        <value>root</value>\n    </property>\n\n    <!-- jdbc连接的password -->\n    <property>\n        <name>javax.jdo.option.ConnectionPassword</name>\n        <value>123456</value>\n    </property>\n```\n\n> （2）独立服务模式\n\n独立服务模式需做以下配置：\n\n首先，保证metastore服务的配置文件hive-site.xml中包含连接元数据库所需的以下参数：\n\n```xml\n    <!-- jdbc连接的URL -->\n    <property>\n        <name>javax.jdo.option.ConnectionURL</name>\n        <value>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true&amp;useSSL=false</value>\n    </property>\n    \n    <!-- jdbc连接的Driver-->\n    <property>\n        <name>javax.jdo.option.ConnectionDriverName</name>\n        <value>com.mysql.jdbc.Driver</value>\n    </property>\n    \n\t<!-- jdbc连接的username-->\n    <property>\n        <name>javax.jdo.option.ConnectionUserName</name>\n        <value>root</value>\n    </property>\n\n    <!-- jdbc连接的password -->\n    <property>\n        <name>javax.jdo.option.ConnectionPassword</name>\n        <value>123456</value>\n    </property>\n```\n\n其次，保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中`包含访问metastore服务`所需的以下参数：\n\n(`添加以下参数`)\n\n```xml\n\t<!-- 指定metastore服务的地址 -->\n\t<property>\n\t\t<name>hive.metastore.uris</name>\n\t\t<value>thrift://master:9083</value>\n\t</property>\n```\n\n注意：主机名需要改为metastore服务所在节点，端口号无需修改，metastore服务的默认端口就是9083。\n\n\n\n> (3) **测试**\n\n此时启动Hive CLI，执行shou databases语句，会出现一下错误提示信息：\n\n![image-20240113225247501](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132252589.png)\n\n​\t这是因为我们在Hive CLI的配置文件中配置了hive.metastore.uris参数，此时Hive CLI会去`请求我们执行的metastore服务地址`，所以`必须启动metastore服务`才能正常使用。\n\n\n\n**metastore服务的启动命令如下：**\n\n```sh\nhive --service metastore\n```\n\n注意：启动后该窗口不能再操作，需打开一个新的Xshell窗口来对Hive操作\n\n![image-20240113225511730](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132255816.png)\n\n\n\n新开一个终端,重新启动 Hive CLI，并执行shou databases语句，就能正常访问了:\n\n![image-20240113225647991](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132256079.png)\n\n#### 2.3.3 修改hive日志默认路径\n\n需要修改的文件模板如下:\n\n![image-20240114211120713](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142111810.png)\n\n\n\n如果初次配置,在conf文件夹下，复制一份模板\n\n```sh\n[root@master conf]# cp hive-exec-log4j2.properties.template hive-log4j2.properties\n[root@master conf]# vim hive-log4j2.properties\n```\n\n修改property.hive.log.dir\n`property.hive.log.dir = ${sys:java.io.tmpdir}/${sys:user.name}`这个会解析成/tmp/启动hive用户名称/hive.log\n配置的时候可以写成绝对路径\n\n![image-20240114211359832](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142113949.png)\n\n修改结果如下:\n\n```sh\n# list of properties\nproperty.hive.log.level = INFO\nproperty.hive.root.logger = DRFA\n#property.hive.log.dir = ${sys:java.io.tmpdir}/${sys:user.name}\nproperty.hive.log.dir = /opt/module/apache-hive-3.1.2/logs\nproperty.hive.log.file = hive.log\nproperty.hive.perflogger.log.level = INFO\n```\n\n\n\n#### 2.3.4 编写Hive服务启动脚本\n\n- nohup：放在命令开头，表示不挂起，也就是关闭终端进程也继续保持运行状态\n\n- /dev/null：是Linux文件系统中的一个文件，被称为黑洞，所有写入该文件的内容都会被自动丢弃\n\n- 2>&1：表示将错误重定向到标准输出上\n\n- &：放在命令结尾，表示后台运行\n\n一般会组合使用：nohup [xxx命令操作]> file 2>&1 &，表示将xxx命令运行的结果输出到file中，并保持命令启动的进程在后台运行。\n\n\n\n> 启动命令如下:\n\n```sh\nnohup hive --service metastore 2>&1 &\nnohup hive --service hiveserver2 2>&1 &\n```\n\n> 添加启动脚本(了解)\n\n```sh\n1.编辑启动脚本\nvi $HIVE_HOME/bin/hiveservices.sh\n2.编辑完后添加可执行权限\nchmod +x $HIVE_HOME/bin/hiveservices.sh\n```\n\n> 脚本内容如下:\n\n```sh\n#!/bin/bash\n\nHIVE_LOG_DIR=$HIVE_HOME/logs\nif [ ! -d $HIVE_LOG_DIR ]\nthen\n\tmkdir -p $HIVE_LOG_DIR\nfi\n\n#检查进程是否运行正常，参数1为进程名，参数2为进程端口\nfunction check_process()\n{\n    pid=$(ps -ef 2>/dev/null | grep -v grep | grep -i $1 | awk '{print $2}')\n    ppid=$(ss -nltp 2>/dev/null | grep $2 | awk '{print $7}' | cut -d '/' -f 1)\n    echo $pid\n    [[ \"$pid\" =~ \"$ppid\" ]] && [ \"$ppid\" ] && return 0 || return 1\n}\n\nfunction hive_start()\n{\n    metapid=$(check_process HiveMetastore 9083)\n    cmd=\"nohup hive --service metastore >$HIVE_LOG_DIR/metastore.log 2>&1 &\"\n    [ -z \"$metapid\" ] && eval $cmd || echo \"Metastroe服务已启动\"\n    server2pid=$(check_process HiveServer2 10000)\n    cmd=\"nohup hive --service hiveserver2 >$HIVE_LOG_DIR/hiveServer2.log 2>&1 &\"\n    [ -z \"$server2pid\" ] && eval $cmd || echo \"HiveServer2服务已启动\"\n}\n\nfunction hive_stop()\n{\nmetapid=$(check_process HiveMetastore 9083)\n    [ \"$metapid\" ] && kill $metapid || echo \"Metastore服务未启动\"\n    server2pid=$(check_process HiveServer2 10000)\n    [ \"$server2pid\" ] && kill $server2pid || echo \"HiveServer2服务未启动\"\n}\n\nfunction hive_status()\n{\n  ss -tunlp | grep 10000 > /dev/null\n  if [ $? -ne 0 ];then\n    sleep 3\n    echo \"HiveServer2服务运行异常\"\n  else\n    sleep 3\n    echo \"HiveServer2服务运行正常\"\n  fi\n  ss -tunlp | grep 9083 > /dev/null\n  if [ $? -ne 0 ];then\n    echo \"Metastore服务运行异常\"\n  else\n    echo \"Metastore服务运行正常\"\n  fi\n}\n\n\ncase $1 in\n\"start\")\n    hive_start\n    ;;\n\"stop\")\n    hive_stop\n    ;;\n\"restart\")\n    hive_stop\n    sleep 2\n    hive_start\n    ;;\n\"status\")\n#    check_process HiveMetastore 9083 >/dev/null && echo \"Metastore服务运行正常\" || echo \"Metastore服务运行异常\"\n#    check_process HiveServer2 10000 >/dev/null && echo \"HiveServer2服务运行正常\" || echo \"HiveServer2服务运行异常\"\n    hive_status\n    ;;\n*)\n    echo Invalid Args!\n    echo 'Usage: '$(basename $0)' start|stop|restart|status'\n    ;;\nesac\n```\n\n> 脚本启动测试\n\n```sh\n[root@master ~]# hiveservices.sh start\n```\n\n查看端口号是否已启动:\n\n![image-20240114113057354](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401141130477.png)\n\n脚本启动成功!\n\n\n\n部署完成!!!\n\n### 2.4  Hive使用技巧\n\n#### 2.4.1 Hive常用交互命令\n\n```sh\n查看帮助:\n[root@master hive]$ bin/hive -help\nusage: hive\n -d,--define <key=value>          Variable subsitution to apply to hive\n                                  commands. e.g. -d A=B or --define A=B\n    --database <databasename>     Specify the database to use\n -e <quoted-query-string>         SQL from command line\n -f <filename>                      SQL from files\n -H,--help                        Print help information\n    --hiveconf <property=value>   Use value for given property\n    --hivevar <key=value>         Variable subsitution to apply to hive\n                                  commands. e.g. --hivevar A=B\n -i <filename>                    Initialization SQL file\n -S,--silent                      Silent mode in interactive shell\n -v,--verbose                     Verbose mode (echo executed SQL to the console)\n```\n\n例1:\n\n```sql\n1）在Hive命令行里创建一个表student，并插入1条数据\nhive (default)> create table student(id int,name string);\nOK\nTime taken: 1.291 seconds\n\nhive (default)> insert into table student values(1,\"zhangsan\");\nhive (default)> select * from student;\nOK\nstudent.id\tstudent.name\n1\tzhangsan\nTime taken: 0.144 seconds, Fetched: 1 row(s)\n\n2）“-e”不进入hive的交互窗口执行hql语句\n[root@master hive]$ bin/hive -e \"select id from student;\"\n```\n\n```sh\n3）“-f”执行脚本中的hql语句\n（1）在/opt/module/hive/下创建datas目录并在datas目录下创建hivef.sql文件\n[atguigu@master hive]$ mkdir datas\n[atguigu@master datas]$ vim hivef.sql\n（2）文件中写入正确的hql语句\nselect * from student;\n（3）执行文件中的hql语句\n[atguigu@master hive]$ bin/hive -f /opt/module/hive/datas/hivef.sql\n（4）执行文件中的hql语句并将结果写入文件中\n[atguigu@master hive]$ bin/hive -f /opt/module/hive/datas/hivef.sql  > /opt/module/hive/datas/hive_result.txt\n```\n\n例2:\n\n```sql\ncreate table if  not exists orders(\nid string,\nuserno string,\npassword string,\nemail string,\nphone string,\nname string,\nidcard string,\nstatus int,\ndepid string\n)\nrow format  delimited fields terminated by ',';\n\n```\n\n从本地将csv文件导入hive(需要提前建好表)：\n\n```sh\nload data local inpath '文件路径' into table 表名;\nload data local inpath '/opt/user.csv' into table orders;\n```\n\n将hdfs中的文件导入hive：\n\n```sh\nload data inpath ‘hdfs中csv文件路径’ into table 表名;\nload data inpath '/data081/order.csv' into table orders;\n```\n\n导入完成\n\n执行导入语句说明：\n\n```sh\n load data inpath ‘/tmp/fun_user.txt’ into table fun_user_external;\n load data local inpath ‘/tmp/fun_user.txt’ into table fun_user_external;\n上面两条数据导入语句，如果有local这个关键字，则这个路径应该为本地文件系统路径，数据会被拷贝到目标位置；如果省略掉local关键字，那么这个路径应该是分布式文件系统中的路径，这种情况下，数据是从这个路径转移到目标位置的。\n```\n\n\n","slug":"Hive之Hiveserver2-metastore环境部署","published":1,"updated":"2024-11-11T12:27:45.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm3d099g3000be1mj0dwmf8gr","content":"<h1 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h1><h2 id=\"1-Hive入门\"><a href=\"#1-Hive入门\" class=\"headerlink\" title=\"1. Hive入门\"></a>1. Hive入门</h2><h3 id=\"1-1-什么是Hive\"><a href=\"#1-1-什么是Hive\" class=\"headerlink\" title=\"1.1 什么是Hive\"></a>1.1 什么是Hive</h3><p>Hive：由Facebook开源用于解决海量结构化日志的数据统计。</p>\n<p>Hive是基于Hadoop的一个<code>数据仓库工具</code>，可以将<code>结构化的数据文件映射为一张表</code>，并提供<code>类SQL</code>查询功能。</p>\n<p><code>本质是：将HQL转化成MapReduce程序</code></p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511957.png\" alt=\"image-20200916135459253\">\n\n<p>1）Hive处理的数据存储在HDFS</p>\n<p>2）Hive分析数据底层的实现是MapReduce</p>\n<p>3）执行程序运行在Yarn上</p>\n<h3 id=\"1-2-Hive的优缺点\"><a href=\"#1-2-Hive的优缺点\" class=\"headerlink\" title=\"1.2 Hive的优缺点\"></a>1.2 Hive的优缺点</h3><h4 id=\"1-2-1-优点\"><a href=\"#1-2-1-优点\" class=\"headerlink\" title=\"1.2.1 优点\"></a>1.2.1 优点</h4><ol>\n<li>操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。 </li>\n<li>避免了去写MapReduce，减少开发人员的学习成本。 </li>\n<li>Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。 </li>\n<li>Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。</li>\n<li>Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</li>\n</ol>\n<h4 id=\"1-2-2-缺点\"><a href=\"#1-2-2-缺点\" class=\"headerlink\" title=\"1.2.2 缺点\"></a>1.2.2 缺点</h4><p>1．Hive的HQL表达能力有限</p>\n<p>（1）迭代式算法无法表达</p>\n<p>（2）数据挖掘方面不擅长</p>\n<p>2．Hive的效率比较低</p>\n<p>（1）Hive自动生成的MapReduce作业，通常情况下不够智能化</p>\n<p>（2）Hive调优比较困难，粒度较粗</p>\n<h3 id=\"1-3Hive架构原理\"><a href=\"#1-3Hive架构原理\" class=\"headerlink\" title=\"1.3Hive架构原理\"></a>1.3Hive架构原理</h3><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511001.png\" alt=\"img\">\n\n<p><strong>1．用户接口：Client</strong></p>\n<p>CLI（hive shell）、JDBC&#x2F;ODBC(java访问hive)、WEBUI（浏览器访问hive）</p>\n<p><strong>2．元数据：Metastore</strong></p>\n<p>元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列&#x2F;分区字段、表的类型（是否是外部表）、表的数据所在目录等；</p>\n<p><code>默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore</code></p>\n<p><strong>3．Hadoop</strong></p>\n<p>使用HDFS进行存储，使用MapReduce进行计算。</p>\n<p><strong>4．驱动器：Driver</strong></p>\n<p>（1）解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。</p>\n<p>（2）编译器（Physical Plan）：将AST编译生成逻辑执行计划。</p>\n<p>（3）优化器（Query Optimizer）：对逻辑执行计划进行优化。</p>\n<p>（4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR&#x2F;Spark。</p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511219.png\" alt=\"image-20200916140721644\">\n\n<p>Hive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。</p>\n<h2 id=\"2-Hive组件快速安装配置\"><a href=\"#2-Hive组件快速安装配置\" class=\"headerlink\" title=\"2. Hive组件快速安装配置\"></a>2. Hive组件快速安装配置</h2><p><strong>实验环境</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>容器系统</th>\n<th>容器主机名</th>\n<th>容器ip</th>\n<th>容器用户名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>centos7</td>\n<td>master</td>\n<td>192.168.1.10</td>\n<td>root</td>\n</tr>\n<tr>\n<td>centos7</td>\n<td>slave1</td>\n<td>192.168.1.20</td>\n<td>root</td>\n</tr>\n<tr>\n<td>centos7</td>\n<td>slave2</td>\n<td>192.168.1.30</td>\n<td>root</td>\n</tr>\n</tbody></table>\n<p><strong>组件版本</strong></p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>java</td>\n<td>1.8</td>\n</tr>\n<tr>\n<td>Hadoop</td>\n<td>3.1.3</td>\n</tr>\n<tr>\n<td>Hive</td>\n<td>3.1.2</td>\n</tr>\n<tr>\n<td>Mysql</td>\n<td>5.7</td>\n</tr>\n</tbody></table>\n<p><strong>数据库信息</strong></p>\n<table>\n<thead>\n<tr>\n<th>数据库</th>\n<th>用户名</th>\n<th>密码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mysql</td>\n<td>root</td>\n<td>123456</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-mysql部署\"><a href=\"#2-1-mysql部署\" class=\"headerlink\" title=\"2.1 mysql部署\"></a>2.1 mysql部署</h3><h4 id=\"2-1-1-rpm方式部署\"><a href=\"#2-1-1-rpm方式部署\" class=\"headerlink\" title=\"2.1.1 rpm方式部署\"></a>2.1.1 rpm方式部署</h4><blockquote>\n<p> (1) 进入mysql资源文件夹，加载所有安装包：</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071524098.png\" alt=\"image-20240107152437021\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-Uvh</span> *.rpm <span class=\"token parameter variable\">--nodeps</span> <span class=\"token parameter variable\">--force</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071525227.png\" alt=\"image-20240107152542173\"></p>\n<blockquote>\n<p>(2) 查看安装情况：</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071526546.png\" alt=\"image-20240107152611487\"></p>\n<blockquote>\n<p>(3) 数据库初始化：</p>\n</blockquote>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysqld <span class=\"token comment\">--initialize --user=mysql</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>(4) 查看临时产生的root用户密码：</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">'temporary password'</span> /var/log/mysqld.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071527022.png\" alt=\"image-20240107152701968\"></p>\n<blockquote>\n<p>(5) 启动Mysql服务，然后登陆数据库，输入临时密码</p>\n</blockquote>\n<p>启动:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master mysql<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start mysqld</span>\n<span class=\"token punctuation\">[</span>root@master mysql<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status mysqld</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071528386.png\" alt=\"image-20240107152816325\"></p>\n<p>登录数据库:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master mysql<span class=\"token punctuation\">]</span><span class=\"token comment\"># mysql -uroot -p'zDfW:um0hgdi'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071530387.png\" alt=\"image-20240107153027330\"></p>\n<blockquote>\n<p>(6) 修改root用户密码</p>\n</blockquote>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">set</span> password <span class=\"token operator\">=</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>(7) 修改MySQL库下的user表中的root用户允许任意ip连接：</p>\n</blockquote>\n<p><strong>方法1:</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">grant</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">privileges</span> <span class=\"token keyword\">on</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">to</span> <span class=\"token string\">'root'</span><span class=\"token variable\">@'%'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> flush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#刷新MySQL的系统权限相关表，否则会拒绝访问</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>方法2:</strong></p>\n<p>查看 MySQL 数据库中存在的用户及其允许连接的主机:</p>\n<p>&#x3D;&#x3D;(修改后一定要刷新权限表)&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#可以看出root用户只允许本地连接</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">,</span>host <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">user</span>          <span class=\"token operator\">|</span> host      <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">session</span> <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span>sys     <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> root          <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改root用户允许任意ip连接:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">UPDATE</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">SET</span> host <span class=\"token operator\">=</span> <span class=\"token string\">'%'</span> <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">user</span> <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> flush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>再次查看用户信息:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">,</span>host <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">user</span>          <span class=\"token operator\">|</span> host      <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token operator\">|</span> root          <span class=\"token operator\">|</span> <span class=\"token operator\">%</span>         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">session</span> <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span>sys     <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改成功</p>\n<p><strong>测试远程连接:</strong></p>\n<p>(如果是docker部署,记得开放端口)</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071600539.png\" alt=\"image-20240107160016412\"></p>\n<blockquote>\n<p>:warning::warning::warning:可能会遇到的问题:</p>\n</blockquote>\n<p><code>问题1</code>：在配置Mysql时候，需要授权出现密码不满足当前政策要求（密码安全等级）</p>\n<p>首先查看一下密码安全设置：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'validate_password%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果不是最低权限，设置为最低权限：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> validate_password_policy<span class=\"token operator\">=</span>LOW<span class=\"token punctuation\">;</span>  \\\\等级\n<span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> validate_password_length<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>   \\\\长度\nmysql<span class=\"token operator\">></span> flush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#刷新MySQL的系统权限相关表，否则会拒绝访问</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>重新授权：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">grant</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">privileges</span> <span class=\"token keyword\">on</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">to</span> <span class=\"token string\">'root'</span><span class=\"token variable\">@'%'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> flush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#刷新MySQL的系统权限相关表，否则会拒绝访问</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><code>问题2</code>: mysql安装失败：</p>\n<p>卸载MySQL：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum remove mysql* <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除MySQL的安装残留文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"mysql*\"</span>  <span class=\"token comment\">#查询所有mysql的文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*mysql*\"</span><span class=\"token operator\">|</span><span class=\"token function\">xargs</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rfv</span>  <span class=\"token comment\">#删除所有查询到的mysql目录，安装包也会被删除</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>清理后重新安装</p>\n<p><strong>rpm 常用命令：</strong></p>\n<p>1.安装一个包 （展示正在安装的文件信息以及安装进度）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.升级一个包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-Uvh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3.卸载一个包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-e</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4.安装参数 –force &#x2F; -–nodeps</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-–force 即使覆盖属于其它包的文件也强迫安装\n-–nodeps 如果该RPM包的安装依赖其它包，即使其它包没装，也强迫安装（不检查依赖直接安装）。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-1-2-Docker-一键部署MySQL\"><a href=\"#2-1-2-Docker-一键部署MySQL\" class=\"headerlink\" title=\"2.1.2 Docker 一键部署MySQL\"></a>2.1.2 Docker 一键部署MySQL</h4><blockquote>\n<p>(1) 拉取MySQL镜像</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@bigdata ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker pull mysql/mysql-server:5.7</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>(2) 启动MySQL</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_HOST</span><span class=\"token operator\">=</span>% <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3306</span>:3306 <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>mysql1 <span class=\"token parameter variable\">-d</span> mysql/mysql-server:5.7 --character-set-server<span class=\"token operator\">=</span>utf8mb4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>参数详解:</p>\n<ul>\n<li><code>docker run</code>: Docker 命令，用于运行一个新的容器。</li>\n<li><code>-e MYSQL_ROOT_PASSWORD=123456</code>: 设置 MySQL 根用户的密码为 <code>123456</code>。这是通过环境变量设置的。</li>\n<li><code>-e MYSQL_ROOT_HOST=%</code>: 允许 MySQL 根用户从任何主机连接。这是通过环境变量设置的，<code>%</code> 表示通配符，表示所有主机。</li>\n<li><code>-p 3306:3306</code>: 将容器内的 MySQL 端口 <code>3306</code> 映射到宿主机的端口 <code>3307</code>。这是用于让外部应用程序能够连接到 MySQL 服务器。</li>\n<li><code>--name=mysql1</code>: 为容器命名为 <code>mysql1</code>。</li>\n<li><code>-d</code>: 让容器在后台运行（detach 模式）。</li>\n<li><code>mysql/mysql-server:5.7</code>: 使用的 MySQL Docker 镜像及其版本。</li>\n<li><code>--character-set-server=utf8mb4</code>: 设置 MySQL 服务器的字符集为 <code>utf8mb4</code>。</li>\n</ul>\n<p><strong>测试:</strong></p>\n<p>安装mariadb客户端:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@bigdata ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum install mariadb -y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用测试:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@bigdata ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mysql -uroot -p123456 -h 192.168.10.81 -P 3308 -e \"show databases;\"</span>\n+--------------------+\n<span class=\"token operator\">|</span> Database           <span class=\"token operator\">|</span>\n+--------------------+\n<span class=\"token operator\">|</span> information_schema <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql              <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> performance_schema <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> sys                <span class=\"token operator\">|</span>\n+--------------------+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>MySQL部署完成</p>\n<h3 id=\"2-2-Hive部署\"><a href=\"#2-2-Hive部署\" class=\"headerlink\" title=\"2.2 Hive部署\"></a>2.2 Hive部署</h3><h4 id=\"2-2-1-解压并重命名\"><a href=\"#2-2-1-解压并重命名\" class=\"headerlink\" title=\"2.2.1 解压并重命名\"></a>2.2.1 解压并重命名</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar -zxvf /opt/software/apache-hive-3.1.2-bin.tar.gz -C /opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv /opt/module/apache-hive-3.1.2-bin/ /opt/module/hive</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-2-添加环境变量\"><a href=\"#2-2-2-添加环境变量\" class=\"headerlink\" title=\"2.2.2 添加环境变量\"></a>2.2.2 添加环境变量</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#HIVE_HOME</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HIVE_HOME</span><span class=\"token operator\">=</span>/opt/module/hive\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$HIVE_HOME</span>/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#命令行写入环境变量</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">>></span>/etc/profile<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n#HIVE\nexport HIVE_HOME=/opt/module/hive\nexport PATH=\\<span class=\"token environment constant\">$PATH</span>:\\<span class=\"token variable\">$HIVE_HOME</span>/bin\nEOF</span>\n<span class=\"token comment\">#重新载入环境变量</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-3-添加MySQL驱动\"><a href=\"#2-2-3-添加MySQL驱动\" class=\"headerlink\" title=\"2.2.3 添加MySQL驱动\"></a>2.2.3 添加MySQL驱动</h4><p>将MySQL的JDBC驱动拷贝到Hive的lib目录下:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp /opt/software/mysql/mysql-connector-java-5.1.44-bin.jar $HIVE_HOME/lib</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看是否拷贝成功:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll $HIVE_HOME/lib | grep mysql</span>\n-rw-r--r-- <span class=\"token number\">1</span> root root   <span class=\"token number\">999635</span> Jan  <span class=\"token number\">7</span> 09:19 mysql-connector-java-5.1.44-bin.jar\n-rw-r--r-- <span class=\"token number\">1</span> root root    <span class=\"token number\">10476</span> Nov <span class=\"token number\">15</span>  <span class=\"token number\">2018</span> mysql-metadata-storage-0.12.0.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071721497.png\" alt=\"image-20240107172131324\"></p>\n<p>在HDFS中的user新建hive目录（<code>Hive的数据表实际存储在hadoop中</code>，所以需要先在hdfs中配置数据目录）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">创建目录:\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs dfs -mkdir -p /user/hive/warehouse </span>\n查看是否创建成功:\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs dfs -ls /user/hive </span>\nFound <span class=\"token number\">1</span> items\ndrwxr-xr-x   - root supergroup          <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-01-07 09:23 /user/hive/warehouse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071724272.png\" alt=\"image-20240107172405192\"></p>\n<h4 id=\"2-2-4-解决guava版本问题-高版本替换低版本\"><a href=\"#2-2-4-解决guava版本问题-高版本替换低版本\" class=\"headerlink\" title=\"2.2.4 解决guava版本问题(高版本替换低版本)\"></a>2.2.4 解决guava版本问题(高版本替换低版本)</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>.删除旧的guava-19.0.jar,将hadoop中的guava-27.0-jre.jar拷贝过来\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rm -rf $HIVE_HOME/lib/guava-19.0.jar</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp $HADOOP_HOME/share/hadoop/common/lib/guava-27.0-jre.jar $HIVE_HOME/lib</span>\n<span class=\"token number\">2</span>.查看是否拷贝成功\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll $HIVE_HOME/lib/guava-27.0-jre.jar </span>\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">2747878</span> Jan  <span class=\"token number\">7</span> 09:27 /opt/module/hive/lib/guava-27.0-jre.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-5-配置hive-site-xml配置文件\"><a href=\"#2-2-5-配置hive-site-xml配置文件\" class=\"headerlink\" title=\"2.2.5 配置hive-site.xml配置文件\"></a>2.2.5 配置<code>hive-site.xml</code>配置文件</h4><blockquote>\n<p>方式1:直接修改官方模板</p>\n<p>&#x3D;&#x3D;测试环境部署(方便测试)&#x3D;&#x3D;</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd $HIVE_HOME/conf</span>\n<span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp hive-default.xml.template hive-site.xml</span>\n<span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi hive-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>需要修改的配置位置如下:</strong></p>\n<!-- jdbc 连接的 password --> \n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">568     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n569     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071742987.png\" alt=\"image-20240107174234563\"></p>\n<!-- jdbc 连接的 URL -->\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">583\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n584\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\n连接参数:\njdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false\n&amp;amp转义字符<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071759521.png\" alt=\"image-20240107175939389\"></p>\n<p>参数解释:</p>\n<ul>\n<li><code>jdbc:mysql://</code>: 指定 JDBC 驱动程序类型，这里是 MySQL 的 JDBC 驱动。</li>\n<li><code>192.168.1.10</code>: 数据库服务器的 IP 地址或主机名。</li>\n<li><code>3306</code>: MySQL 服务器的端口号，默认是 <code>3306</code>。</li>\n<li><code>metastore</code>: 数据库的名称（也称为数据库实例）。</li>\n<li><code>?createDatabaseIfNotExist=true</code>: 如果数据库不存在，则创建数据库。这是一个额外的参数，用于在连接时创建数据库。</li>\n<li><code>&amp;amp</code>: 这是 HTML 实体编码中的 <code>&amp;</code> 符号，用于分隔不同的连接参数。</li>\n<li><code>useSSL=false</code>: 禁用 SSL 连接，可以提高连接性能。</li>\n</ul>\n<p>综合起来，这个连接字符串表示你要连接到位于 <code>192.168.1.10</code> 主机上，端口为 <code>3306</code> 的 MySQL 数据库，数据库名称为 <code>metastore</code>。如果数据库不存在，它将尝试创建一个新的数据库。同时，它禁用了 SSL 连接。</p>\n<!-- jdbc 连接的 Driver 驱动-->\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">1101\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n1102\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071800309.png\" alt=\"image-20240107180037239\"></p>\n<!-- jdbc 连接的 username(用户)--> \n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">1126\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n1127\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071802628.png\" alt=\"image-20240107180202550\"></p>\n<p>修改数据路径,在配置文件中修改所有的数据路径    4404</p>\n<p>所有${system:java.io.tmpdir}&#x2F;${system:user.name}</p>\n<p>改成&#x2F;home&#x2F;hive&#x2F;tmp&#x2F;root</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">shift+:进入末行模式\n<span class=\"token builtin class-name\">:</span> %s@<span class=\"token variable\">$&#123;system<span class=\"token operator\">:</span>user.name&#125;</span>@root@g\n<span class=\"token builtin class-name\">:</span> %s@<span class=\"token variable\">$&#123;system<span class=\"token operator\">:</span>java.io.tmpdir&#125;</span>@/home/hive/tmp@g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>删掉非法字符：&amp;#8   3215行</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071807782.png\" alt=\"image-20240107180735702\"></p>\n<p>完成！</p>\n<blockquote>\n<p>方式2:手动编写配置</p>\n<p>&#x3D;&#x3D;生产环境推荐(文档下面的新增配置都是以此配置为基础)&#x3D;&#x3D;</p>\n</blockquote>\n<p>配置如下:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> <span class=\"token variable\">$HIVE_HOME</span>/conf/hive-site.xml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?></span>\n<span class=\"token prolog\">&lt;?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--连接数据库URL--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--连接数据驱动--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--数据库连接用户名 jdbc 连接的 username--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--数据库连接密码 jdbc 连接的 password--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Hive 元数据存储版本的验证 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.metastore.schema.verification<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 元数据存储授权 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.metastore.event.db.notification.api.auth<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--本机表的默认位置的URI Hive 默认在 HDFS 的工作目录--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.metastore.warehouse.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/user/hive/warehouse<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-2-6-编辑hive-env-sh配置文件\"><a href=\"#2-2-6-编辑hive-env-sh配置文件\" class=\"headerlink\" title=\"2.2.6 编辑hive-env.sh配置文件\"></a>2.2.6 编辑hive-env.sh配置文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp hive-env.sh.template hive-env.sh</span>\n<span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi hive-env.sh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>添加以下配置(告诉hive Hadoop在哪里):</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HADOOP_HOME</span><span class=\"token operator\">=</span>/opt/module/hadoop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-2-7-初始化HIVE元数据库\"><a href=\"#2-2-7-初始化HIVE元数据库\" class=\"headerlink\" title=\"2.2.7 初始化HIVE元数据库\"></a>2.2.7 初始化HIVE元数据库</h4><p>将hive写入mysql</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hive<span class=\"token punctuation\">]</span><span class=\"token comment\"># schematool -dbType mysql -initSchema </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果如下为成功:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812254.png\" alt=\"image-20240107181236159\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812841.png\" alt=\"image-20240107181250765\"></p>\n<p>竞赛使用:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">schematool <span class=\"token parameter variable\">-dbType</span> mysql <span class=\"token parameter variable\">-initSchema</span> <span class=\"token operator\">></span> hive.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"2-2-8-查询数据库\"><a href=\"#2-2-8-查询数据库\" class=\"headerlink\" title=\"2.2.8 查询数据库\"></a>2.2.8 查询数据库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># hive -e \"show databases;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071814990.png\" alt=\"image-20240107181433907\"></p>\n<blockquote>\n<p>发现hive shell中有许多日志信息的解决办法（hive-3.1.2）</p>\n</blockquote>\n<p>解决：</p>\n<p>需要在hive的安装目录下：<code>/opt/module/hive/conf/</code> 创建<code>log4j.properties</code>日志的配置文件，然后写入以下信息就可以了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">方式1:\n<span class=\"token function\">vi</span> /opt/module/hive/conf/log4j.properties\n方式2:\n<span class=\"token function\">vi</span> <span class=\"token variable\">$HIVE_HOME</span>/conf/log4j.properties<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加以下内容:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">log4j.rootLogger</span><span class=\"token operator\">=</span>WARN, CA\n<span class=\"token assign-left variable\">log4j.appender.CA</span><span class=\"token operator\">=</span>org.apache.log4j.ConsoleAppender\n<span class=\"token assign-left variable\">log4j.appender.CA.layout</span><span class=\"token operator\">=</span>org.apache.log4j.PatternLayout\n<span class=\"token assign-left variable\">log4j.appender.CA.layout.ConversionPattern</span><span class=\"token operator\">=</span>%-4r <span class=\"token punctuation\">[</span>%t<span class=\"token punctuation\">]</span> %-5p %c %x - %m%n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加好后保存退出，重启hive即可解决</p>\n<p><strong>重新查询数据库:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hive -e \"show databases;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071819758.png\" alt=\"image-20240107181919652\"></p>\n<h3 id=\"2-3-Hive-生产环境部署\"><a href=\"#2-3-Hive-生产环境部署\" class=\"headerlink\" title=\"2.3 Hive 生产环境部署\"></a>2.3 Hive 生产环境部署</h3><h4 id=\"2-3-1-Hiveserver2-服务\"><a href=\"#2-3-1-Hiveserver2-服务\" class=\"headerlink\" title=\"2.3.1 Hiveserver2 服务\"></a>2.3.1 Hiveserver2 服务</h4><p>​\tHive的hiveserver2服务的作用是提供jdbc&#x2F;odbc接口，为用户提供远程访问Hive数据的功能，例如用户期望在个人电脑中访问远程服务中的Hive数据，就需要用到Hiveserver2。</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131536469.png\" alt=\"image-20240113153640372\"></p>\n<blockquote>\n<p>(1)用户说明</p>\n</blockquote>\n<p>​\t在远程访问Hive数据时，客户端并未直接访问Hadoop集群，而是由Hivesever2代理访问。由于Hadoop集群中的数据具备访问权限控制，所以此时需考虑一个问题：那就是访问Hadoop集群的用户身份是谁？是Hiveserver2的启动用户？还是客户端的登录用户？</p>\n<p>​\t答案是都有可能，具体是谁，由Hiveserver2的hive.server2.enable.doAs参数决定，该参数的含义是是否启用Hiveserver2用户模拟的功能。若启用，则Hiveserver2会模拟成客户端的登录用户去访问Hadoop集群的数据，不启用，则Hivesever2会直接使用启动用户访问Hadoop集群数据。模拟用户的功能，默认是开启的。</p>\n<p>具体逻辑如下：</p>\n<p>:one: 未开启用户模拟功能：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131543845.png\" alt=\"image-20240113154316776\"></p>\n<p>:two:开启用户模拟功能：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131544123.png\" alt=\"image-20240113154438046\"></p>\n<p><strong>生产环境，<code>推荐开启用户模拟功能</code>，因为开启后才能保证各用户之间的权限隔离</strong>。</p>\n<blockquote>\n<p>(2) Hiveserver2部署</p>\n</blockquote>\n<p>:one:Hadoop端配置</p>\n<p>​\thivesever2的模拟用户功能，依赖于Hadoop提供的proxy user（代理用户功能），只有Hadoop中的代理用户才能模拟其他用户的身份访问Hadoop集群。因此，需要<code>将hiveserver2的启动用户设置为Hadoop的代理用户</code>，配置方式如下：</p>\n<ol>\n<li><strong><code>修改</code>配置文件core-site.xml，然后记得<code>分发</code>三台机器,然后再<code>重启</code>hadoop服务</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> <span class=\"token variable\">$HADOOP_HOME</span>/etc/hadoop/core-site.xml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li><strong>增加如下配置:</strong></li>\n</ol>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--配置所有节点的root用户都可作为代理用户--&gt;\n\t&lt;property&gt;\n\t\t&lt;name&gt;hadoop.proxyuser.root.hosts&lt;&#x2F;name&gt;\n\t\t&lt;value&gt;*&lt;&#x2F;value&gt;\n\t&lt;&#x2F;property&gt;\n\n&lt;!--配置root用户能够代理的用户组为任意组--&gt;\n\t&lt;property&gt;\n\t\t&lt;name&gt;hadoop.proxyuser.root.groups&lt;&#x2F;name&gt;\n\t\t&lt;value&gt;*&lt;&#x2F;value&gt;\n\t&lt;&#x2F;property&gt;\n\n&lt;!--配置root用户能够代理的用户为任意用户--&gt;\n\t&lt;property&gt;\n\t\t&lt;name&gt;hadoop.proxyuser.root.users&lt;&#x2F;name&gt;\n\t\t&lt;value&gt;*&lt;&#x2F;value&gt;\n\t&lt;&#x2F;property&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>:two:Hive端配置</p>\n<ol>\n<li><strong>在 hive-site.xml 文件中添加以下配置信息</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim $HIVE_HOME/conf/hive-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--指定 hiveserver2 连接的 host (使用主机名需要添加本地映射)--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.server2.thrift.bind.host<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>192.168.1.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token comment\">&lt;!-- 指定 hiveserver2 连接的端口号 --></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.server2.thrift.port<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>10000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>:three:测试</p>\n<ol>\n<li><strong>启动hiveserver2</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hive --service hiveserver2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131608356.png\" alt=\"image-20240113160812261\"></p>\n<p>查看端口是否已经存在,存在则成功启动hiveserver2</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ss -tunlp |grep 10000</span>\ntcp    LISTEN     <span class=\"token number\">0</span>      <span class=\"token number\">50</span>        *:10000                 *:*                   users:<span class=\"token variable\"><span class=\"token punctuation\">((</span>\"java\"<span class=\"token punctuation\">,</span>pid<span class=\"token operator\">=</span><span class=\"token number\">9885</span><span class=\"token punctuation\">,</span>fd<span class=\"token operator\">=</span><span class=\"token number\">511</span><span class=\"token punctuation\">))</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131607826.png\" alt=\"image-20240113160740747\"></p>\n<ol start=\"2\">\n<li><strong>新打开一个终端,使用命令行客户端beeline进行远程访问</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">beeline <span class=\"token parameter variable\">-u</span> jdbc:hive2://master:10000 <span class=\"token parameter variable\">-n</span> atguigu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li><code>beeline</code>：用于与Hive进行交互的命令行工具。</li>\n<li><code>-u jdbc:hive2://master:10000</code>：指定JDBC连接URL，其中<code>master</code>是Hive服务器的主机名，<code>10000</code>是端口号。</li>\n<li><code>-n atguigu</code>：指定连接时使用的Hive用户名（<code>atguigu</code>）。</li>\n</ol>\n<p>或</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">beeline <span class=\"token parameter variable\">-u</span> jdbc:hive2://master:10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>-u</code>标志用于指定JDBC连接URL，为Beeline提供连接到Hive服务器所需的信息。</li>\n</ul>\n<p>结果如下:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132021126.png\" alt=\"image-20240113202132033\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132020816.png\" alt=\"image-20240113202033694\"></p>\n<ol start=\"4\">\n<li><strong>使用Datagrip图形化客户端进行远程访问</strong></li>\n</ol>\n<p>(1)创建连接:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132122559.png\" alt=\"image-20240113212219461\"></p>\n<p>(2)配置连接属性</p>\n<p>​\t有属性配置，和Hive的beeline客户端配置一致即可。初次使用，配置过程会提示缺少JDBC驱动，按照提示下载即可</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132123984.png\" alt=\"image-20240113212331886\"></p>\n<p>（3）界面介绍</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134380.png\" alt=\"image-20240113213409280\"></p>\n<p>（4）测试sql执行</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134593.png\" alt=\"image-20240113213430503\"></p>\n<p>（5）修改数据库</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134412.png\" alt=\"image-20240113213449337\"></p>\n<blockquote>\n<p><strong>hiveserver2可能出现的报错:(可忽略)</strong></p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401111119587.png\" alt=\"image-20240111111958040\"></p>\n<p>参考: <a href=\"https://www.cnblogs.com/tianlingqun/p/16322927.html\">https://www.cnblogs.com/tianlingqun/p/16322927.html</a></p>\n<p>参考添加以下配置</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 启动hive的高可用性,默认false --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.server2.active.passive.ha.enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-3-2-metastore服务\"><a href=\"#2-3-2-metastore服务\" class=\"headerlink\" title=\"2.3.2 metastore服务\"></a>2.3.2 metastore服务</h4><p>​\tHive的metastore服务的作用是为Hive CLI或者Hiveserver2提供元数据访问接口。</p>\n<p>:one:<strong>metastore</strong>运行模式</p>\n<p>metastore有两种运行模式，分别为嵌入式模式和独立服务模式。下面分别对两种模式进行说明：</p>\n<blockquote>\n<p>(1)嵌入式模式</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137976.png\" alt=\"image-20240113213712903\"></p>\n<blockquote>\n<p>(2)独立服务模式</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137270.png\" alt=\"image-20240113213743201\"></p>\n<p>生产环境中，<code>不推荐使用嵌入式模式</code>。因为其存在以下两个问题：</p>\n<p>  (1）嵌入式模式下，每个Hive CLI都需要直接连接元数据库，当Hive CLI较多时，数据库压力会比较大。</p>\n<p>（2）每个客户端都需要用户元数据库的读写权限，元数据库的安全得不到很好的保证。</p>\n<p>:two:<strong>metastore部署</strong></p>\n<blockquote>\n<p>(1）嵌入式模式</p>\n</blockquote>\n<p>嵌入式模式下，只需保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中<code>包含连接元数据库所需要的以下参数即可</code>(前面部署时已添加)：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">   <span class=\"token comment\">&lt;!-- jdbc连接的URL --></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   \n   <span class=\"token comment\">&lt;!-- jdbc连接的Driver--></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   \n<span class=\"token comment\">&lt;!-- jdbc连接的username--></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n   <span class=\"token comment\">&lt;!-- jdbc连接的password --></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>（2）独立服务模式</p>\n</blockquote>\n<p>独立服务模式需做以下配置：</p>\n<p>首先，保证metastore服务的配置文件hive-site.xml中包含连接元数据库所需的以下参数：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">   <span class=\"token comment\">&lt;!-- jdbc连接的URL --></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   \n   <span class=\"token comment\">&lt;!-- jdbc连接的Driver--></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   \n<span class=\"token comment\">&lt;!-- jdbc连接的username--></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n   <span class=\"token comment\">&lt;!-- jdbc连接的password --></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其次，保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中<code>包含访问metastore服务</code>所需的以下参数：</p>\n<p>(<code>添加以下参数</code>)</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- 指定metastore服务的地址 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.metastore.uris<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>thrift://master:9083<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：主机名需要改为metastore服务所在节点，端口号无需修改，metastore服务的默认端口就是9083。</p>\n<blockquote>\n<p>(3) <strong>测试</strong></p>\n</blockquote>\n<p>此时启动Hive CLI，执行shou databases语句，会出现一下错误提示信息：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132252589.png\" alt=\"image-20240113225247501\"></p>\n<p>​\t这是因为我们在Hive CLI的配置文件中配置了hive.metastore.uris参数，此时Hive CLI会去<code>请求我们执行的metastore服务地址</code>，所以<code>必须启动metastore服务</code>才能正常使用。</p>\n<p><strong>metastore服务的启动命令如下：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hive <span class=\"token parameter variable\">--service</span> metastore<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意：启动后该窗口不能再操作，需打开一个新的Xshell窗口来对Hive操作</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132255816.png\" alt=\"image-20240113225511730\"></p>\n<p>新开一个终端,重新启动 Hive CLI，并执行shou databases语句，就能正常访问了:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132256079.png\" alt=\"image-20240113225647991\"></p>\n<h4 id=\"2-3-3-修改hive日志默认路径\"><a href=\"#2-3-3-修改hive日志默认路径\" class=\"headerlink\" title=\"2.3.3 修改hive日志默认路径\"></a>2.3.3 修改hive日志默认路径</h4><p>需要修改的文件模板如下:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142111810.png\" alt=\"image-20240114211120713\"></p>\n<p>如果初次配置,在conf文件夹下，复制一份模板</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp hive-exec-log4j2.properties.template hive-log4j2.properties</span>\n<span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim hive-log4j2.properties</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>修改property.hive.log.dir<br><code>property.hive.log.dir = $&#123;sys:java.io.tmpdir&#125;/$&#123;sys:user.name&#125;</code>这个会解析成&#x2F;tmp&#x2F;启动hive用户名称&#x2F;hive.log<br>配置的时候可以写成绝对路径</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142113949.png\" alt=\"image-20240114211359832\"></p>\n<p>修改结果如下:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># list of properties</span>\nproperty.hive.log.level <span class=\"token operator\">=</span> INFO\nproperty.hive.root.logger <span class=\"token operator\">=</span> DRFA\n<span class=\"token comment\">#property.hive.log.dir = $&#123;sys:java.io.tmpdir&#125;/$&#123;sys:user.name&#125;</span>\nproperty.hive.log.dir <span class=\"token operator\">=</span> /opt/module/apache-hive-3.1.2/logs\nproperty.hive.log.file <span class=\"token operator\">=</span> hive.log\nproperty.hive.perflogger.log.level <span class=\"token operator\">=</span> INFO<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-3-4-编写Hive服务启动脚本\"><a href=\"#2-3-4-编写Hive服务启动脚本\" class=\"headerlink\" title=\"2.3.4 编写Hive服务启动脚本\"></a>2.3.4 编写Hive服务启动脚本</h4><ul>\n<li><p>nohup：放在命令开头，表示不挂起，也就是关闭终端进程也继续保持运行状态</p>\n</li>\n<li><p>&#x2F;dev&#x2F;null：是Linux文件系统中的一个文件，被称为黑洞，所有写入该文件的内容都会被自动丢弃</p>\n</li>\n<li><p>2&gt;&amp;1：表示将错误重定向到标准输出上</p>\n</li>\n<li><p>&amp;：放在命令结尾，表示后台运行</p>\n</li>\n</ul>\n<p>一般会组合使用：nohup [xxx命令操作]&gt; file 2&gt;&amp;1 &amp;，表示将xxx命令运行的结果输出到file中，并保持命令启动的进程在后台运行。</p>\n<blockquote>\n<p>启动命令如下:</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> hive <span class=\"token parameter variable\">--service</span> metastore <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span>\n<span class=\"token function\">nohup</span> hive <span class=\"token parameter variable\">--service</span> hiveserver2 <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>添加启动脚本(了解)</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>.编辑启动脚本\n<span class=\"token function\">vi</span> <span class=\"token variable\">$HIVE_HOME</span>/bin/hiveservices.sh\n<span class=\"token number\">2</span>.编辑完后添加可执行权限\n<span class=\"token function\">chmod</span> +x <span class=\"token variable\">$HIVE_HOME</span>/bin/hiveservices.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>脚本内容如下:</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">HIVE_LOG_DIR</span><span class=\"token operator\">=</span><span class=\"token variable\">$HIVE_HOME</span>/logs\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-d</span> <span class=\"token variable\">$HIVE_LOG_DIR</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n\t<span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$HIVE_LOG_DIR</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\">#检查进程是否运行正常，参数1为进程名，参数2为进程端口</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">check_process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token assign-left variable\">pid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> $1 <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $2&#125;'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">ppid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>ss <span class=\"token parameter variable\">-nltp</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> $2 <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $7&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'/'</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span><span class=\"token variable\">)</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$pid</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$pid</span>\"</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"<span class=\"token variable\">$ppid</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$ppid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">hive_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token assign-left variable\">metapid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>check_process HiveMetastore <span class=\"token number\">9083</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">cmd</span><span class=\"token operator\">=</span><span class=\"token string\">\"nohup hive --service metastore ><span class=\"token variable\">$HIVE_LOG_DIR</span>/metastore.log 2>&amp;1 &amp;\"</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$metapid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">eval</span> <span class=\"token variable\">$cmd</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Metastroe服务已启动\"</span>\n    <span class=\"token assign-left variable\">server2pid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>check_process HiveServer2 <span class=\"token number\">10000</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">cmd</span><span class=\"token operator\">=</span><span class=\"token string\">\"nohup hive --service hiveserver2 ><span class=\"token variable\">$HIVE_LOG_DIR</span>/hiveServer2.log 2>&amp;1 &amp;\"</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$server2pid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">eval</span> <span class=\"token variable\">$cmd</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HiveServer2服务已启动\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">hive_stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n<span class=\"token assign-left variable\">metapid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>check_process HiveMetastore <span class=\"token number\">9083</span><span class=\"token variable\">)</span></span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$metapid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">kill</span> <span class=\"token variable\">$metapid</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Metastore服务未启动\"</span>\n    <span class=\"token assign-left variable\">server2pid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>check_process HiveServer2 <span class=\"token number\">10000</span><span class=\"token variable\">)</span></span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$server2pid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">kill</span> <span class=\"token variable\">$server2pid</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HiveServer2服务未启动\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">hive_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  ss <span class=\"token parameter variable\">-tunlp</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">10000</span> <span class=\"token operator\">></span> /dev/null\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>\n    <span class=\"token function\">sleep</span> <span class=\"token number\">3</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HiveServer2服务运行异常\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token function\">sleep</span> <span class=\"token number\">3</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HiveServer2服务运行正常\"</span>\n  <span class=\"token keyword\">fi</span>\n  ss <span class=\"token parameter variable\">-tunlp</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">9083</span> <span class=\"token operator\">></span> /dev/null\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Metastore服务运行异常\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Metastore服务运行正常\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span>\n<span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span>\n    hive_start\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span>\n    hive_stop\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"restart\"</span><span class=\"token punctuation\">)</span>\n    hive_stop\n    <span class=\"token function\">sleep</span> <span class=\"token number\">2</span>\n    hive_start\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#    check_process HiveMetastore 9083 >/dev/null &amp;&amp; echo \"Metastore服务运行正常\" || echo \"Metastore服务运行异常\"</span>\n<span class=\"token comment\">#    check_process HiveServer2 10000 >/dev/null &amp;&amp; echo \"HiveServer2服务运行正常\" || echo \"HiveServer2服务运行异常\"</span>\n    hive_status\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n*<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> Invalid Args<span class=\"token operator\">!</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Usage: '</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $0<span class=\"token variable\">)</span></span><span class=\"token string\">' start|stop|restart|status'</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>脚本启动测试</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hiveservices.sh start</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看端口号是否已启动:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401141130477.png\" alt=\"image-20240114113057354\"></p>\n<p>脚本启动成功!</p>\n<p>部署完成!!!</p>\n<h3 id=\"2-4-Hive使用技巧\"><a href=\"#2-4-Hive使用技巧\" class=\"headerlink\" title=\"2.4  Hive使用技巧\"></a>2.4  Hive使用技巧</h3><h4 id=\"2-4-1-Hive常用交互命令\"><a href=\"#2-4-1-Hive常用交互命令\" class=\"headerlink\" title=\"2.4.1 Hive常用交互命令\"></a>2.4.1 Hive常用交互命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看帮助:\n<span class=\"token punctuation\">[</span>root@master hive<span class=\"token punctuation\">]</span>$ bin/hive <span class=\"token parameter variable\">-help</span>\nusage: hive\n -d,--define <span class=\"token operator\">&lt;</span>key<span class=\"token operator\">=</span>value<span class=\"token operator\">></span>          Variable subsitution to apply to hive\n                                  commands. e.g. <span class=\"token parameter variable\">-d</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span>B or <span class=\"token parameter variable\">--define</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span>B\n    <span class=\"token parameter variable\">--database</span> <span class=\"token operator\">&lt;</span>databasename<span class=\"token operator\">></span>     Specify the database to use\n <span class=\"token parameter variable\">-e</span> <span class=\"token operator\">&lt;</span>quoted-query-string<span class=\"token operator\">></span>         SQL from <span class=\"token builtin class-name\">command</span> line\n <span class=\"token parameter variable\">-f</span> <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span>                      SQL from files\n -H,--help                        Print <span class=\"token builtin class-name\">help</span> information\n    <span class=\"token parameter variable\">--hiveconf</span> <span class=\"token operator\">&lt;</span>property<span class=\"token operator\">=</span>value<span class=\"token operator\">></span>   Use value <span class=\"token keyword\">for</span> given property\n    <span class=\"token parameter variable\">--hivevar</span> <span class=\"token operator\">&lt;</span>key<span class=\"token operator\">=</span>value<span class=\"token operator\">></span>         Variable subsitution to apply to hive\n                                  commands. e.g. <span class=\"token parameter variable\">--hivevar</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span>B\n <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span>                    Initialization SQL <span class=\"token function\">file</span>\n -S,--silent                      Silent mode <span class=\"token keyword\">in</span> interactive shell\n -v,--verbose                     Verbose mode <span class=\"token punctuation\">(</span>echo executed SQL to the console<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例1:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token number\">1</span>）在Hive命令行里创建一个表student，并插入<span class=\"token number\">1</span>条数据\nhive <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>name string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nOK\n<span class=\"token keyword\">Time</span> taken: <span class=\"token number\">1.291</span> seconds\n\nhive <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhive <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\nOK\nstudent<span class=\"token punctuation\">.</span>id\tstudent<span class=\"token punctuation\">.</span>name\n<span class=\"token number\">1</span>\tzhangsan\n<span class=\"token keyword\">Time</span> taken: <span class=\"token number\">0.144</span> seconds<span class=\"token punctuation\">,</span> Fetched: <span class=\"token number\">1</span> <span class=\"token keyword\">row</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">2</span>）“<span class=\"token operator\">-</span>e”不进入hive的交互窗口执行hql语句\n<span class=\"token punctuation\">[</span>root<span class=\"token variable\">@master</span> hive<span class=\"token punctuation\">]</span>$ bin<span class=\"token operator\">/</span>hive <span class=\"token operator\">-</span>e <span class=\"token string\">\"select id from student;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">3</span>）“-f”执行脚本中的hql语句\n（1）在/opt/module/hive/下创建datas目录并在datas目录下创建hivef.sql文件\n<span class=\"token punctuation\">[</span>atguigu@master hive<span class=\"token punctuation\">]</span>$ <span class=\"token function\">mkdir</span> datas\n<span class=\"token punctuation\">[</span>atguigu@master datas<span class=\"token punctuation\">]</span>$ <span class=\"token function\">vim</span> hivef.sql\n（2）文件中写入正确的hql语句\n<span class=\"token keyword\">select</span> * from student<span class=\"token punctuation\">;</span>\n（3）执行文件中的hql语句\n<span class=\"token punctuation\">[</span>atguigu@master hive<span class=\"token punctuation\">]</span>$ bin/hive <span class=\"token parameter variable\">-f</span> /opt/module/hive/datas/hivef.sql\n（4）执行文件中的hql语句并将结果写入文件中\n<span class=\"token punctuation\">[</span>atguigu@master hive<span class=\"token punctuation\">]</span>$ bin/hive <span class=\"token parameter variable\">-f</span> /opt/module/hive/datas/hivef.sql  <span class=\"token operator\">></span> /opt/module/hive/datas/hive_result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例2:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span>  <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> orders<span class=\"token punctuation\">(</span>\nid string<span class=\"token punctuation\">,</span>\nuserno string<span class=\"token punctuation\">,</span>\npassword string<span class=\"token punctuation\">,</span>\nemail string<span class=\"token punctuation\">,</span>\nphone string<span class=\"token punctuation\">,</span>\nname string<span class=\"token punctuation\">,</span>\nidcard string<span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">status</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\ndepid string\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">row</span> format  delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">','</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从本地将csv文件导入hive(需要提前建好表)：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">load data <span class=\"token builtin class-name\">local</span> inpath <span class=\"token string\">'文件路径'</span> into table 表名<span class=\"token punctuation\">;</span>\nload data <span class=\"token builtin class-name\">local</span> inpath <span class=\"token string\">'/opt/user.csv'</span> into table orders<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>将hdfs中的文件导入hive：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">load data inpath ‘hdfs中csv文件路径’ into table 表名<span class=\"token punctuation\">;</span>\nload data inpath <span class=\"token string\">'/data081/order.csv'</span> into table orders<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>导入完成</p>\n<p>执行导入语句说明：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"> load data inpath ‘/tmp/fun_user.txt’ into table fun_user_external<span class=\"token punctuation\">;</span>\n load data <span class=\"token builtin class-name\">local</span> inpath ‘/tmp/fun_user.txt’ into table fun_user_external<span class=\"token punctuation\">;</span>\n上面两条数据导入语句，如果有local这个关键字，则这个路径应该为本地文件系统路径，数据会被拷贝到目标位置；如果省略掉local关键字，那么这个路径应该是分布式文件系统中的路径，这种情况下，数据是从这个路径转移到目标位置的。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"Hive\"><a href=\"#Hive\" class=\"headerlink\" title=\"Hive\"></a>Hive</h1><h2 id=\"1-Hive入门\"><a href=\"#1-Hive入门\" class=\"headerlink\" title=\"1. Hive入门\"></a>1. Hive入门</h2><h3 id=\"1-1-什么是Hive\"><a href=\"#1-1-什么是Hive\" class=\"headerlink\" title=\"1.1 什么是Hive\"></a>1.1 什么是Hive</h3><p>Hive：由Facebook开源用于解决海量结构化日志的数据统计。</p>\n<p>Hive是基于Hadoop的一个<code>数据仓库工具</code>，可以将<code>结构化的数据文件映射为一张表</code>，并提供<code>类SQL</code>查询功能。</p>\n<p><code>本质是：将HQL转化成MapReduce程序</code></p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511957.png\" alt=\"image-20200916135459253\">\n\n<p>1）Hive处理的数据存储在HDFS</p>\n<p>2）Hive分析数据底层的实现是MapReduce</p>\n<p>3）执行程序运行在Yarn上</p>\n<h3 id=\"1-2-Hive的优缺点\"><a href=\"#1-2-Hive的优缺点\" class=\"headerlink\" title=\"1.2 Hive的优缺点\"></a>1.2 Hive的优缺点</h3><h4 id=\"1-2-1-优点\"><a href=\"#1-2-1-优点\" class=\"headerlink\" title=\"1.2.1 优点\"></a>1.2.1 优点</h4><ol>\n<li>操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。 </li>\n<li>避免了去写MapReduce，减少开发人员的学习成本。 </li>\n<li>Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。 </li>\n<li>Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。</li>\n<li>Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</li>\n</ol>\n<h4 id=\"1-2-2-缺点\"><a href=\"#1-2-2-缺点\" class=\"headerlink\" title=\"1.2.2 缺点\"></a>1.2.2 缺点</h4><p>1．Hive的HQL表达能力有限</p>\n<p>（1）迭代式算法无法表达</p>\n<p>（2）数据挖掘方面不擅长</p>\n<p>2．Hive的效率比较低</p>\n<p>（1）Hive自动生成的MapReduce作业，通常情况下不够智能化</p>\n<p>（2）Hive调优比较困难，粒度较粗</p>\n<h3 id=\"1-3Hive架构原理\"><a href=\"#1-3Hive架构原理\" class=\"headerlink\" title=\"1.3Hive架构原理\"></a>1.3Hive架构原理</h3><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511001.png\" alt=\"img\">\n\n<p><strong>1．用户接口：Client</strong></p>\n<p>CLI（hive shell）、JDBC&#x2F;ODBC(java访问hive)、WEBUI（浏览器访问hive）</p>\n<p><strong>2．元数据：Metastore</strong></p>\n<p>元数据包括：表名、表所属的数据库（默认是default）、表的拥有者、列&#x2F;分区字段、表的类型（是否是外部表）、表的数据所在目录等；</p>\n<p><code>默认存储在自带的derby数据库中，推荐使用MySQL存储Metastore</code></p>\n<p><strong>3．Hadoop</strong></p>\n<p>使用HDFS进行存储，使用MapReduce进行计算。</p>\n<p><strong>4．驱动器：Driver</strong></p>\n<p>（1）解析器（SQL Parser）：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。</p>\n<p>（2）编译器（Physical Plan）：将AST编译生成逻辑执行计划。</p>\n<p>（3）优化器（Query Optimizer）：对逻辑执行计划进行优化。</p>\n<p>（4）执行器（Execution）：把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR&#x2F;Spark。</p>\n<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071511219.png\" alt=\"image-20200916140721644\">\n\n<p>Hive通过给用户提供的一系列交互接口，接收到用户的指令(SQL)，使用自己的Driver，结合元数据(MetaStore)，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。</p>\n<h2 id=\"2-Hive组件快速安装配置\"><a href=\"#2-Hive组件快速安装配置\" class=\"headerlink\" title=\"2. Hive组件快速安装配置\"></a>2. Hive组件快速安装配置</h2><p><strong>实验环境</strong>:</p>\n<table>\n<thead>\n<tr>\n<th>容器系统</th>\n<th>容器主机名</th>\n<th>容器ip</th>\n<th>容器用户名</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>centos7</td>\n<td>master</td>\n<td>192.168.1.10</td>\n<td>root</td>\n</tr>\n<tr>\n<td>centos7</td>\n<td>slave1</td>\n<td>192.168.1.20</td>\n<td>root</td>\n</tr>\n<tr>\n<td>centos7</td>\n<td>slave2</td>\n<td>192.168.1.30</td>\n<td>root</td>\n</tr>\n</tbody></table>\n<p><strong>组件版本</strong></p>\n<table>\n<thead>\n<tr>\n<th>组件</th>\n<th>版本</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>java</td>\n<td>1.8</td>\n</tr>\n<tr>\n<td>Hadoop</td>\n<td>3.1.3</td>\n</tr>\n<tr>\n<td>Hive</td>\n<td>3.1.2</td>\n</tr>\n<tr>\n<td>Mysql</td>\n<td>5.7</td>\n</tr>\n</tbody></table>\n<p><strong>数据库信息</strong></p>\n<table>\n<thead>\n<tr>\n<th>数据库</th>\n<th>用户名</th>\n<th>密码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>mysql</td>\n<td>root</td>\n<td>123456</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-1-mysql部署\"><a href=\"#2-1-mysql部署\" class=\"headerlink\" title=\"2.1 mysql部署\"></a>2.1 mysql部署</h3><h4 id=\"2-1-1-rpm方式部署\"><a href=\"#2-1-1-rpm方式部署\" class=\"headerlink\" title=\"2.1.1 rpm方式部署\"></a>2.1.1 rpm方式部署</h4><blockquote>\n<p> (1) 进入mysql资源文件夹，加载所有安装包：</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071524098.png\" alt=\"image-20240107152437021\"></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-Uvh</span> *.rpm <span class=\"token parameter variable\">--nodeps</span> <span class=\"token parameter variable\">--force</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071525227.png\" alt=\"image-20240107152542173\"></p>\n<blockquote>\n<p>(2) 查看安装情况：</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> -qa<span class=\"token operator\">|</span><span class=\"token function\">grep</span> mysql<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果:<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071526546.png\" alt=\"image-20240107152611487\"></p>\n<blockquote>\n<p>(3) 数据库初始化：</p>\n</blockquote>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysqld <span class=\"token comment\">--initialize --user=mysql</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>(4) 查看临时产生的root用户密码：</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">grep</span> <span class=\"token string\">'temporary password'</span> /var/log/mysqld.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071527022.png\" alt=\"image-20240107152701968\"></p>\n<blockquote>\n<p>(5) 启动Mysql服务，然后登陆数据库，输入临时密码</p>\n</blockquote>\n<p>启动:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master mysql<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl start mysqld</span>\n<span class=\"token punctuation\">[</span>root@master mysql<span class=\"token punctuation\">]</span><span class=\"token comment\"># systemctl status mysqld</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071528386.png\" alt=\"image-20240107152816325\"></p>\n<p>登录数据库:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master mysql<span class=\"token punctuation\">]</span><span class=\"token comment\"># mysql -uroot -p'zDfW:um0hgdi'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071530387.png\" alt=\"image-20240107153027330\"></p>\n<blockquote>\n<p>(6) 修改root用户密码</p>\n</blockquote>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">set</span> password <span class=\"token operator\">=</span><span class=\"token string\">\"123456\"</span><span class=\"token punctuation\">;</span>\nQuery OK<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span> <span class=\"token keyword\">rows</span> affected <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>(7) 修改MySQL库下的user表中的root用户允许任意ip连接：</p>\n</blockquote>\n<p><strong>方法1:</strong></p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">grant</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">privileges</span> <span class=\"token keyword\">on</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">to</span> <span class=\"token string\">'root'</span><span class=\"token variable\">@'%'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> flush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#刷新MySQL的系统权限相关表，否则会拒绝访问</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><strong>方法2:</strong></p>\n<p>查看 MySQL 数据库中存在的用户及其允许连接的主机:</p>\n<p>&#x3D;&#x3D;(修改后一定要刷新权限表)&#x3D;&#x3D;</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token comment\">#可以看出root用户只允许本地连接</span>\nmysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">,</span>host <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">user</span>          <span class=\"token operator\">|</span> host      <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">session</span> <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span>sys     <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> root          <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改root用户允许任意ip连接:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">UPDATE</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span> <span class=\"token keyword\">SET</span> host <span class=\"token operator\">=</span> <span class=\"token string\">'%'</span> <span class=\"token keyword\">WHERE</span> <span class=\"token keyword\">user</span> <span class=\"token operator\">=</span> <span class=\"token string\">'root'</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> flush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>再次查看用户信息:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token keyword\">user</span><span class=\"token punctuation\">,</span>host <span class=\"token keyword\">from</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">user</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token operator\">|</span> <span class=\"token keyword\">user</span>          <span class=\"token operator\">|</span> host      <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token operator\">|</span> root          <span class=\"token operator\">|</span> <span class=\"token operator\">%</span>         <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span><span class=\"token keyword\">session</span> <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql<span class=\"token punctuation\">.</span>sys     <span class=\"token operator\">|</span> localhost <span class=\"token operator\">|</span>\n<span class=\"token operator\">+</span><span class=\"token comment\">---------------+-----------+</span>\n<span class=\"token number\">3</span> <span class=\"token keyword\">rows</span> <span class=\"token operator\">in</span> <span class=\"token keyword\">set</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.00</span> sec<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>修改成功</p>\n<p><strong>测试远程连接:</strong></p>\n<p>(如果是docker部署,记得开放端口)</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071600539.png\" alt=\"image-20240107160016412\"></p>\n<blockquote>\n<p>:warning::warning::warning:可能会遇到的问题:</p>\n</blockquote>\n<p><code>问题1</code>：在配置Mysql时候，需要授权出现密码不满足当前政策要求（密码安全等级）</p>\n<p>首先查看一下密码安全设置：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">SHOW</span> VARIABLES <span class=\"token operator\">LIKE</span> <span class=\"token string\">'validate_password%'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果不是最低权限，设置为最低权限：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> validate_password_policy<span class=\"token operator\">=</span>LOW<span class=\"token punctuation\">;</span>  \\\\等级\n<span class=\"token keyword\">set</span> <span class=\"token keyword\">global</span> validate_password_length<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span>   \\\\长度\nmysql<span class=\"token operator\">></span> flush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#刷新MySQL的系统权限相关表，否则会拒绝访问</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>重新授权：</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\">mysql<span class=\"token operator\">></span> <span class=\"token keyword\">grant</span> <span class=\"token keyword\">all</span> <span class=\"token keyword\">privileges</span> <span class=\"token keyword\">on</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">.</span><span class=\"token operator\">*</span> <span class=\"token keyword\">to</span> <span class=\"token string\">'root'</span><span class=\"token variable\">@'%'</span> identified <span class=\"token keyword\">by</span> <span class=\"token string\">'123456'</span><span class=\"token punctuation\">;</span>\nmysql<span class=\"token operator\">></span> flush <span class=\"token keyword\">privileges</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">#刷新MySQL的系统权限相关表，否则会拒绝访问</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<p><code>问题2</code>: mysql安装失败：</p>\n<p>卸载MySQL：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum remove mysql* <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>删除MySQL的安装残留文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"mysql*\"</span>  <span class=\"token comment\">#查询所有mysql的文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-name</span> <span class=\"token string\">\"*mysql*\"</span><span class=\"token operator\">|</span><span class=\"token function\">xargs</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rfv</span>  <span class=\"token comment\">#删除所有查询到的mysql目录，安装包也会被删除</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>清理后重新安装</p>\n<p><strong>rpm 常用命令：</strong></p>\n<p>1.安装一个包 （展示正在安装的文件信息以及安装进度）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-ivh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.升级一个包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-Uvh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>3.卸载一个包</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rpm</span> <span class=\"token parameter variable\">-e</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>4.安装参数 –force &#x2F; -–nodeps</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">-–force 即使覆盖属于其它包的文件也强迫安装\n-–nodeps 如果该RPM包的安装依赖其它包，即使其它包没装，也强迫安装（不检查依赖直接安装）。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-1-2-Docker-一键部署MySQL\"><a href=\"#2-1-2-Docker-一键部署MySQL\" class=\"headerlink\" title=\"2.1.2 Docker 一键部署MySQL\"></a>2.1.2 Docker 一键部署MySQL</h4><blockquote>\n<p>(1) 拉取MySQL镜像</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@bigdata ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker pull mysql/mysql-server:5.7</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>(2) 启动MySQL</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token number\">123456</span> <span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">MYSQL_ROOT_HOST</span><span class=\"token operator\">=</span>% <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3306</span>:3306 <span class=\"token parameter variable\">--name</span><span class=\"token operator\">=</span>mysql1 <span class=\"token parameter variable\">-d</span> mysql/mysql-server:5.7 --character-set-server<span class=\"token operator\">=</span>utf8mb4<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>参数详解:</p>\n<ul>\n<li><code>docker run</code>: Docker 命令，用于运行一个新的容器。</li>\n<li><code>-e MYSQL_ROOT_PASSWORD=123456</code>: 设置 MySQL 根用户的密码为 <code>123456</code>。这是通过环境变量设置的。</li>\n<li><code>-e MYSQL_ROOT_HOST=%</code>: 允许 MySQL 根用户从任何主机连接。这是通过环境变量设置的，<code>%</code> 表示通配符，表示所有主机。</li>\n<li><code>-p 3306:3306</code>: 将容器内的 MySQL 端口 <code>3306</code> 映射到宿主机的端口 <code>3307</code>。这是用于让外部应用程序能够连接到 MySQL 服务器。</li>\n<li><code>--name=mysql1</code>: 为容器命名为 <code>mysql1</code>。</li>\n<li><code>-d</code>: 让容器在后台运行（detach 模式）。</li>\n<li><code>mysql/mysql-server:5.7</code>: 使用的 MySQL Docker 镜像及其版本。</li>\n<li><code>--character-set-server=utf8mb4</code>: 设置 MySQL 服务器的字符集为 <code>utf8mb4</code>。</li>\n</ul>\n<p><strong>测试:</strong></p>\n<p>安装mariadb客户端:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@bigdata ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># yum install mariadb -y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>使用测试:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@bigdata ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mysql -uroot -p123456 -h 192.168.10.81 -P 3308 -e \"show databases;\"</span>\n+--------------------+\n<span class=\"token operator\">|</span> Database           <span class=\"token operator\">|</span>\n+--------------------+\n<span class=\"token operator\">|</span> information_schema <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> mysql              <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> performance_schema <span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span> sys                <span class=\"token operator\">|</span>\n+--------------------+<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>MySQL部署完成</p>\n<h3 id=\"2-2-Hive部署\"><a href=\"#2-2-Hive部署\" class=\"headerlink\" title=\"2.2 Hive部署\"></a>2.2 Hive部署</h3><h4 id=\"2-2-1-解压并重命名\"><a href=\"#2-2-1-解压并重命名\" class=\"headerlink\" title=\"2.2.1 解压并重命名\"></a>2.2.1 解压并重命名</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># tar -zxvf /opt/software/apache-hive-3.1.2-bin.tar.gz -C /opt/module/</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># mv /opt/module/apache-hive-3.1.2-bin/ /opt/module/hive</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-2-添加环境变量\"><a href=\"#2-2-2-添加环境变量\" class=\"headerlink\" title=\"2.2.2 添加环境变量\"></a>2.2.2 添加环境变量</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#HIVE_HOME</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HIVE_HOME</span><span class=\"token operator\">=</span>/opt/module/hive\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$HIVE_HOME</span>/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#命令行写入环境变量</span>\n<span class=\"token function\">cat</span> <span class=\"token operator\">>></span>/etc/profile<span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n#HIVE\nexport HIVE_HOME=/opt/module/hive\nexport PATH=\\<span class=\"token environment constant\">$PATH</span>:\\<span class=\"token variable\">$HIVE_HOME</span>/bin\nEOF</span>\n<span class=\"token comment\">#重新载入环境变量</span>\n<span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-3-添加MySQL驱动\"><a href=\"#2-2-3-添加MySQL驱动\" class=\"headerlink\" title=\"2.2.3 添加MySQL驱动\"></a>2.2.3 添加MySQL驱动</h4><p>将MySQL的JDBC驱动拷贝到Hive的lib目录下:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp /opt/software/mysql/mysql-connector-java-5.1.44-bin.jar $HIVE_HOME/lib</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看是否拷贝成功:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll $HIVE_HOME/lib | grep mysql</span>\n-rw-r--r-- <span class=\"token number\">1</span> root root   <span class=\"token number\">999635</span> Jan  <span class=\"token number\">7</span> 09:19 mysql-connector-java-5.1.44-bin.jar\n-rw-r--r-- <span class=\"token number\">1</span> root root    <span class=\"token number\">10476</span> Nov <span class=\"token number\">15</span>  <span class=\"token number\">2018</span> mysql-metadata-storage-0.12.0.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071721497.png\" alt=\"image-20240107172131324\"></p>\n<p>在HDFS中的user新建hive目录（<code>Hive的数据表实际存储在hadoop中</code>，所以需要先在hdfs中配置数据目录）：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">创建目录:\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs dfs -mkdir -p /user/hive/warehouse </span>\n查看是否创建成功:\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hdfs dfs -ls /user/hive </span>\nFound <span class=\"token number\">1</span> items\ndrwxr-xr-x   - root supergroup          <span class=\"token number\">0</span> <span class=\"token number\">2024</span>-01-07 09:23 /user/hive/warehouse<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071724272.png\" alt=\"image-20240107172405192\"></p>\n<h4 id=\"2-2-4-解决guava版本问题-高版本替换低版本\"><a href=\"#2-2-4-解决guava版本问题-高版本替换低版本\" class=\"headerlink\" title=\"2.2.4 解决guava版本问题(高版本替换低版本)\"></a>2.2.4 解决guava版本问题(高版本替换低版本)</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>.删除旧的guava-19.0.jar,将hadoop中的guava-27.0-jre.jar拷贝过来\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># rm -rf $HIVE_HOME/lib/guava-19.0.jar</span>\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp $HADOOP_HOME/share/hadoop/common/lib/guava-27.0-jre.jar $HIVE_HOME/lib</span>\n<span class=\"token number\">2</span>.查看是否拷贝成功\n<span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ll $HIVE_HOME/lib/guava-27.0-jre.jar </span>\n-rw-r--r-- <span class=\"token number\">1</span> root root <span class=\"token number\">2747878</span> Jan  <span class=\"token number\">7</span> 09:27 /opt/module/hive/lib/guava-27.0-jre.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-2-5-配置hive-site-xml配置文件\"><a href=\"#2-2-5-配置hive-site-xml配置文件\" class=\"headerlink\" title=\"2.2.5 配置hive-site.xml配置文件\"></a>2.2.5 配置<code>hive-site.xml</code>配置文件</h4><blockquote>\n<p>方式1:直接修改官方模板</p>\n<p>&#x3D;&#x3D;测试环境部署(方便测试)&#x3D;&#x3D;</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># cd $HIVE_HOME/conf</span>\n<span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp hive-default.xml.template hive-site.xml</span>\n<span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi hive-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>需要修改的配置位置如下:</strong></p>\n<!-- jdbc 连接的 password --> \n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">568     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n569     <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071742987.png\" alt=\"image-20240107174234563\"></p>\n<!-- jdbc 连接的 URL -->\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">583\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n584\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\n连接参数:\njdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false\n&amp;amp转义字符<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071759521.png\" alt=\"image-20240107175939389\"></p>\n<p>参数解释:</p>\n<ul>\n<li><code>jdbc:mysql://</code>: 指定 JDBC 驱动程序类型，这里是 MySQL 的 JDBC 驱动。</li>\n<li><code>192.168.1.10</code>: 数据库服务器的 IP 地址或主机名。</li>\n<li><code>3306</code>: MySQL 服务器的端口号，默认是 <code>3306</code>。</li>\n<li><code>metastore</code>: 数据库的名称（也称为数据库实例）。</li>\n<li><code>?createDatabaseIfNotExist=true</code>: 如果数据库不存在，则创建数据库。这是一个额外的参数，用于在连接时创建数据库。</li>\n<li><code>&amp;amp</code>: 这是 HTML 实体编码中的 <code>&amp;</code> 符号，用于分隔不同的连接参数。</li>\n<li><code>useSSL=false</code>: 禁用 SSL 连接，可以提高连接性能。</li>\n</ul>\n<p>综合起来，这个连接字符串表示你要连接到位于 <code>192.168.1.10</code> 主机上，端口为 <code>3306</code> 的 MySQL 数据库，数据库名称为 <code>metastore</code>。如果数据库不存在，它将尝试创建一个新的数据库。同时，它禁用了 SSL 连接。</p>\n<!-- jdbc 连接的 Driver 驱动-->\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">1101\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n1102\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071800309.png\" alt=\"image-20240107180037239\"></p>\n<!-- jdbc 连接的 username(用户)--> \n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">1126\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n1127\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071802628.png\" alt=\"image-20240107180202550\"></p>\n<p>修改数据路径,在配置文件中修改所有的数据路径    4404</p>\n<p>所有${system:java.io.tmpdir}&#x2F;${system:user.name}</p>\n<p>改成&#x2F;home&#x2F;hive&#x2F;tmp&#x2F;root</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">shift+:进入末行模式\n<span class=\"token builtin class-name\">:</span> %s@<span class=\"token variable\">$&#123;system<span class=\"token operator\">:</span>user.name&#125;</span>@root@g\n<span class=\"token builtin class-name\">:</span> %s@<span class=\"token variable\">$&#123;system<span class=\"token operator\">:</span>java.io.tmpdir&#125;</span>@/home/hive/tmp@g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>删掉非法字符：&amp;#8   3215行</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071807782.png\" alt=\"image-20240107180735702\"></p>\n<p>完成！</p>\n<blockquote>\n<p>方式2:手动编写配置</p>\n<p>&#x3D;&#x3D;生产环境推荐(文档下面的新增配置都是以此配置为基础)&#x3D;&#x3D;</p>\n</blockquote>\n<p>配置如下:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> <span class=\"token variable\">$HIVE_HOME</span>/conf/hive-site.xml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?></span>\n<span class=\"token prolog\">&lt;?xml-stylesheet type=\"text/xsl\" href=\"configuration.xsl\"?></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--连接数据库URL--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--连接数据驱动--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--数据库连接用户名 jdbc 连接的 username--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--数据库连接密码 jdbc 连接的 password--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- Hive 元数据存储版本的验证 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.metastore.schema.verification<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token comment\">&lt;!-- 元数据存储授权 --></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.metastore.event.db.notification.api.auth<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>    \n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token comment\">&lt;!--本机表的默认位置的URI Hive 默认在 HDFS 的工作目录--></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.metastore.warehouse.dir<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>/user/hive/warehouse<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>configuration</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-2-6-编辑hive-env-sh配置文件\"><a href=\"#2-2-6-编辑hive-env-sh配置文件\" class=\"headerlink\" title=\"2.2.6 编辑hive-env.sh配置文件\"></a>2.2.6 编辑hive-env.sh配置文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp hive-env.sh.template hive-env.sh</span>\n<span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># vi hive-env.sh</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>添加以下配置(告诉hive Hadoop在哪里):</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HADOOP_HOME</span><span class=\"token operator\">=</span>/opt/module/hadoop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-2-7-初始化HIVE元数据库\"><a href=\"#2-2-7-初始化HIVE元数据库\" class=\"headerlink\" title=\"2.2.7 初始化HIVE元数据库\"></a>2.2.7 初始化HIVE元数据库</h4><p>将hive写入mysql</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master hive<span class=\"token punctuation\">]</span><span class=\"token comment\"># schematool -dbType mysql -initSchema </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果如下为成功:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812254.png\" alt=\"image-20240107181236159\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071812841.png\" alt=\"image-20240107181250765\"></p>\n<p>竞赛使用:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">schematool <span class=\"token parameter variable\">-dbType</span> mysql <span class=\"token parameter variable\">-initSchema</span> <span class=\"token operator\">></span> hive.log<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n\n\n\n<h4 id=\"2-2-8-查询数据库\"><a href=\"#2-2-8-查询数据库\" class=\"headerlink\" title=\"2.2.8 查询数据库\"></a>2.2.8 查询数据库</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># hive -e \"show databases;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071814990.png\" alt=\"image-20240107181433907\"></p>\n<blockquote>\n<p>发现hive shell中有许多日志信息的解决办法（hive-3.1.2）</p>\n</blockquote>\n<p>解决：</p>\n<p>需要在hive的安装目录下：<code>/opt/module/hive/conf/</code> 创建<code>log4j.properties</code>日志的配置文件，然后写入以下信息就可以了：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">方式1:\n<span class=\"token function\">vi</span> /opt/module/hive/conf/log4j.properties\n方式2:\n<span class=\"token function\">vi</span> <span class=\"token variable\">$HIVE_HOME</span>/conf/log4j.properties<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加以下内容:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">log4j.rootLogger</span><span class=\"token operator\">=</span>WARN, CA\n<span class=\"token assign-left variable\">log4j.appender.CA</span><span class=\"token operator\">=</span>org.apache.log4j.ConsoleAppender\n<span class=\"token assign-left variable\">log4j.appender.CA.layout</span><span class=\"token operator\">=</span>org.apache.log4j.PatternLayout\n<span class=\"token assign-left variable\">log4j.appender.CA.layout.ConversionPattern</span><span class=\"token operator\">=</span>%-4r <span class=\"token punctuation\">[</span>%t<span class=\"token punctuation\">]</span> %-5p %c %x - %m%n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>添加好后保存退出，重启hive即可解决</p>\n<p><strong>重新查询数据库:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hive -e \"show databases;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401071819758.png\" alt=\"image-20240107181919652\"></p>\n<h3 id=\"2-3-Hive-生产环境部署\"><a href=\"#2-3-Hive-生产环境部署\" class=\"headerlink\" title=\"2.3 Hive 生产环境部署\"></a>2.3 Hive 生产环境部署</h3><h4 id=\"2-3-1-Hiveserver2-服务\"><a href=\"#2-3-1-Hiveserver2-服务\" class=\"headerlink\" title=\"2.3.1 Hiveserver2 服务\"></a>2.3.1 Hiveserver2 服务</h4><p>​\tHive的hiveserver2服务的作用是提供jdbc&#x2F;odbc接口，为用户提供远程访问Hive数据的功能，例如用户期望在个人电脑中访问远程服务中的Hive数据，就需要用到Hiveserver2。</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131536469.png\" alt=\"image-20240113153640372\"></p>\n<blockquote>\n<p>(1)用户说明</p>\n</blockquote>\n<p>​\t在远程访问Hive数据时，客户端并未直接访问Hadoop集群，而是由Hivesever2代理访问。由于Hadoop集群中的数据具备访问权限控制，所以此时需考虑一个问题：那就是访问Hadoop集群的用户身份是谁？是Hiveserver2的启动用户？还是客户端的登录用户？</p>\n<p>​\t答案是都有可能，具体是谁，由Hiveserver2的hive.server2.enable.doAs参数决定，该参数的含义是是否启用Hiveserver2用户模拟的功能。若启用，则Hiveserver2会模拟成客户端的登录用户去访问Hadoop集群的数据，不启用，则Hivesever2会直接使用启动用户访问Hadoop集群数据。模拟用户的功能，默认是开启的。</p>\n<p>具体逻辑如下：</p>\n<p>:one: 未开启用户模拟功能：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131543845.png\" alt=\"image-20240113154316776\"></p>\n<p>:two:开启用户模拟功能：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131544123.png\" alt=\"image-20240113154438046\"></p>\n<p><strong>生产环境，<code>推荐开启用户模拟功能</code>，因为开启后才能保证各用户之间的权限隔离</strong>。</p>\n<blockquote>\n<p>(2) Hiveserver2部署</p>\n</blockquote>\n<p>:one:Hadoop端配置</p>\n<p>​\thivesever2的模拟用户功能，依赖于Hadoop提供的proxy user（代理用户功能），只有Hadoop中的代理用户才能模拟其他用户的身份访问Hadoop集群。因此，需要<code>将hiveserver2的启动用户设置为Hadoop的代理用户</code>，配置方式如下：</p>\n<ol>\n<li><strong><code>修改</code>配置文件core-site.xml，然后记得<code>分发</code>三台机器,然后再<code>重启</code>hadoop服务</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vim</span> <span class=\"token variable\">$HADOOP_HOME</span>/etc/hadoop/core-site.xml<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol start=\"2\">\n<li><strong>增加如下配置:</strong></li>\n</ol>\n<pre class=\"line-numbers language-XML\" data-language=\"XML\"><code class=\"language-XML\">&lt;!--配置所有节点的root用户都可作为代理用户--&gt;\n\t&lt;property&gt;\n\t\t&lt;name&gt;hadoop.proxyuser.root.hosts&lt;&#x2F;name&gt;\n\t\t&lt;value&gt;*&lt;&#x2F;value&gt;\n\t&lt;&#x2F;property&gt;\n\n&lt;!--配置root用户能够代理的用户组为任意组--&gt;\n\t&lt;property&gt;\n\t\t&lt;name&gt;hadoop.proxyuser.root.groups&lt;&#x2F;name&gt;\n\t\t&lt;value&gt;*&lt;&#x2F;value&gt;\n\t&lt;&#x2F;property&gt;\n\n&lt;!--配置root用户能够代理的用户为任意用户--&gt;\n\t&lt;property&gt;\n\t\t&lt;name&gt;hadoop.proxyuser.root.users&lt;&#x2F;name&gt;\n\t\t&lt;value&gt;*&lt;&#x2F;value&gt;\n\t&lt;&#x2F;property&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>:two:Hive端配置</p>\n<ol>\n<li><strong>在 hive-site.xml 文件中添加以下配置信息</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim $HIVE_HOME/conf/hive-site.xml</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!--指定 hiveserver2 连接的 host (使用主机名需要添加本地映射)--></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.server2.thrift.bind.host<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>192.168.1.10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token comment\">&lt;!-- 指定 hiveserver2 连接的端口号 --></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.server2.thrift.port<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>10000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>:three:测试</p>\n<ol>\n<li><strong>启动hiveserver2</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hive --service hiveserver2</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131608356.png\" alt=\"image-20240113160812261\"></p>\n<p>查看端口是否已经存在,存在则成功启动hiveserver2</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># ss -tunlp |grep 10000</span>\ntcp    LISTEN     <span class=\"token number\">0</span>      <span class=\"token number\">50</span>        *:10000                 *:*                   users:<span class=\"token variable\"><span class=\"token punctuation\">((</span>\"java\"<span class=\"token punctuation\">,</span>pid<span class=\"token operator\">=</span><span class=\"token number\">9885</span><span class=\"token punctuation\">,</span>fd<span class=\"token operator\">=</span><span class=\"token number\">511</span><span class=\"token punctuation\">))</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401131607826.png\" alt=\"image-20240113160740747\"></p>\n<ol start=\"2\">\n<li><strong>新打开一个终端,使用命令行客户端beeline进行远程访问</strong></li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">beeline <span class=\"token parameter variable\">-u</span> jdbc:hive2://master:10000 <span class=\"token parameter variable\">-n</span> atguigu<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li><code>beeline</code>：用于与Hive进行交互的命令行工具。</li>\n<li><code>-u jdbc:hive2://master:10000</code>：指定JDBC连接URL，其中<code>master</code>是Hive服务器的主机名，<code>10000</code>是端口号。</li>\n<li><code>-n atguigu</code>：指定连接时使用的Hive用户名（<code>atguigu</code>）。</li>\n</ol>\n<p>或</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">beeline <span class=\"token parameter variable\">-u</span> jdbc:hive2://master:10000<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><code>-u</code>标志用于指定JDBC连接URL，为Beeline提供连接到Hive服务器所需的信息。</li>\n</ul>\n<p>结果如下:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132021126.png\" alt=\"image-20240113202132033\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132020816.png\" alt=\"image-20240113202033694\"></p>\n<ol start=\"4\">\n<li><strong>使用Datagrip图形化客户端进行远程访问</strong></li>\n</ol>\n<p>(1)创建连接:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132122559.png\" alt=\"image-20240113212219461\"></p>\n<p>(2)配置连接属性</p>\n<p>​\t有属性配置，和Hive的beeline客户端配置一致即可。初次使用，配置过程会提示缺少JDBC驱动，按照提示下载即可</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132123984.png\" alt=\"image-20240113212331886\"></p>\n<p>（3）界面介绍</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134380.png\" alt=\"image-20240113213409280\"></p>\n<p>（4）测试sql执行</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134593.png\" alt=\"image-20240113213430503\"></p>\n<p>（5）修改数据库</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132134412.png\" alt=\"image-20240113213449337\"></p>\n<blockquote>\n<p><strong>hiveserver2可能出现的报错:(可忽略)</strong></p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401111119587.png\" alt=\"image-20240111111958040\"></p>\n<p>参考: <a href=\"https://www.cnblogs.com/tianlingqun/p/16322927.html\">https://www.cnblogs.com/tianlingqun/p/16322927.html</a></p>\n<p>参考添加以下配置</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- 启动hive的高可用性,默认false --></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.server2.active.passive.ha.enable<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"2-3-2-metastore服务\"><a href=\"#2-3-2-metastore服务\" class=\"headerlink\" title=\"2.3.2 metastore服务\"></a>2.3.2 metastore服务</h4><p>​\tHive的metastore服务的作用是为Hive CLI或者Hiveserver2提供元数据访问接口。</p>\n<p>:one:<strong>metastore</strong>运行模式</p>\n<p>metastore有两种运行模式，分别为嵌入式模式和独立服务模式。下面分别对两种模式进行说明：</p>\n<blockquote>\n<p>(1)嵌入式模式</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137976.png\" alt=\"image-20240113213712903\"></p>\n<blockquote>\n<p>(2)独立服务模式</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132137270.png\" alt=\"image-20240113213743201\"></p>\n<p>生产环境中，<code>不推荐使用嵌入式模式</code>。因为其存在以下两个问题：</p>\n<p>  (1）嵌入式模式下，每个Hive CLI都需要直接连接元数据库，当Hive CLI较多时，数据库压力会比较大。</p>\n<p>（2）每个客户端都需要用户元数据库的读写权限，元数据库的安全得不到很好的保证。</p>\n<p>:two:<strong>metastore部署</strong></p>\n<blockquote>\n<p>(1）嵌入式模式</p>\n</blockquote>\n<p>嵌入式模式下，只需保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中<code>包含连接元数据库所需要的以下参数即可</code>(前面部署时已添加)：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">   <span class=\"token comment\">&lt;!-- jdbc连接的URL --></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   \n   <span class=\"token comment\">&lt;!-- jdbc连接的Driver--></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   \n<span class=\"token comment\">&lt;!-- jdbc连接的username--></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n   <span class=\"token comment\">&lt;!-- jdbc连接的password --></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>（2）独立服务模式</p>\n</blockquote>\n<p>独立服务模式需做以下配置：</p>\n<p>首先，保证metastore服务的配置文件hive-site.xml中包含连接元数据库所需的以下参数：</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\">   <span class=\"token comment\">&lt;!-- jdbc连接的URL --></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionURL<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>jdbc:mysql://192.168.1.10:3306/metastore?createDatabaseIfNotExist=true<span class=\"token entity named-entity\" title=\"&amp;\">&amp;amp;</span>useSSL=false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   \n   <span class=\"token comment\">&lt;!-- jdbc连接的Driver--></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionDriverName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>com.mysql.jdbc.Driver<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n   \n<span class=\"token comment\">&lt;!-- jdbc连接的username--></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionUserName<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>root<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span>\n\n   <span class=\"token comment\">&lt;!-- jdbc连接的password --></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>javax.jdo.option.ConnectionPassword<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n       <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>123456<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其次，保证Hiveserver2和每个Hive CLI的配置文件hive-site.xml中<code>包含访问metastore服务</code>所需的以下参数：</p>\n<p>(<code>添加以下参数</code>)</p>\n<pre class=\"line-numbers language-markup\" data-language=\"markup\"><code class=\"language-markup\"><span class=\"token comment\">&lt;!-- 指定metastore服务的地址 --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>property</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>name</span><span class=\"token punctuation\">></span></span>hive.metastore.uris<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>name</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>value</span><span class=\"token punctuation\">></span></span>thrift://master:9083<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>value</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>property</span><span class=\"token punctuation\">></span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>注意：主机名需要改为metastore服务所在节点，端口号无需修改，metastore服务的默认端口就是9083。</p>\n<blockquote>\n<p>(3) <strong>测试</strong></p>\n</blockquote>\n<p>此时启动Hive CLI，执行shou databases语句，会出现一下错误提示信息：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132252589.png\" alt=\"image-20240113225247501\"></p>\n<p>​\t这是因为我们在Hive CLI的配置文件中配置了hive.metastore.uris参数，此时Hive CLI会去<code>请求我们执行的metastore服务地址</code>，所以<code>必须启动metastore服务</code>才能正常使用。</p>\n<p><strong>metastore服务的启动命令如下：</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hive <span class=\"token parameter variable\">--service</span> metastore<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>注意：启动后该窗口不能再操作，需打开一个新的Xshell窗口来对Hive操作</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132255816.png\" alt=\"image-20240113225511730\"></p>\n<p>新开一个终端,重新启动 Hive CLI，并执行shou databases语句，就能正常访问了:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401132256079.png\" alt=\"image-20240113225647991\"></p>\n<h4 id=\"2-3-3-修改hive日志默认路径\"><a href=\"#2-3-3-修改hive日志默认路径\" class=\"headerlink\" title=\"2.3.3 修改hive日志默认路径\"></a>2.3.3 修改hive日志默认路径</h4><p>需要修改的文件模板如下:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142111810.png\" alt=\"image-20240114211120713\"></p>\n<p>如果初次配置,在conf文件夹下，复制一份模板</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># cp hive-exec-log4j2.properties.template hive-log4j2.properties</span>\n<span class=\"token punctuation\">[</span>root@master conf<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim hive-log4j2.properties</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>修改property.hive.log.dir<br><code>property.hive.log.dir = $&#123;sys:java.io.tmpdir&#125;/$&#123;sys:user.name&#125;</code>这个会解析成&#x2F;tmp&#x2F;启动hive用户名称&#x2F;hive.log<br>配置的时候可以写成绝对路径</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401142113949.png\" alt=\"image-20240114211359832\"></p>\n<p>修改结果如下:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># list of properties</span>\nproperty.hive.log.level <span class=\"token operator\">=</span> INFO\nproperty.hive.root.logger <span class=\"token operator\">=</span> DRFA\n<span class=\"token comment\">#property.hive.log.dir = $&#123;sys:java.io.tmpdir&#125;/$&#123;sys:user.name&#125;</span>\nproperty.hive.log.dir <span class=\"token operator\">=</span> /opt/module/apache-hive-3.1.2/logs\nproperty.hive.log.file <span class=\"token operator\">=</span> hive.log\nproperty.hive.perflogger.log.level <span class=\"token operator\">=</span> INFO<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h4 id=\"2-3-4-编写Hive服务启动脚本\"><a href=\"#2-3-4-编写Hive服务启动脚本\" class=\"headerlink\" title=\"2.3.4 编写Hive服务启动脚本\"></a>2.3.4 编写Hive服务启动脚本</h4><ul>\n<li><p>nohup：放在命令开头，表示不挂起，也就是关闭终端进程也继续保持运行状态</p>\n</li>\n<li><p>&#x2F;dev&#x2F;null：是Linux文件系统中的一个文件，被称为黑洞，所有写入该文件的内容都会被自动丢弃</p>\n</li>\n<li><p>2&gt;&amp;1：表示将错误重定向到标准输出上</p>\n</li>\n<li><p>&amp;：放在命令结尾，表示后台运行</p>\n</li>\n</ul>\n<p>一般会组合使用：nohup [xxx命令操作]&gt; file 2&gt;&amp;1 &amp;，表示将xxx命令运行的结果输出到file中，并保持命令启动的进程在后台运行。</p>\n<blockquote>\n<p>启动命令如下:</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">nohup</span> hive <span class=\"token parameter variable\">--service</span> metastore <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span>\n<span class=\"token function\">nohup</span> hive <span class=\"token parameter variable\">--service</span> hiveserver2 <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span><span class=\"token file-descriptor important\">&amp;1</span> <span class=\"token operator\">&amp;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>添加启动脚本(了解)</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">1</span>.编辑启动脚本\n<span class=\"token function\">vi</span> <span class=\"token variable\">$HIVE_HOME</span>/bin/hiveservices.sh\n<span class=\"token number\">2</span>.编辑完后添加可执行权限\n<span class=\"token function\">chmod</span> +x <span class=\"token variable\">$HIVE_HOME</span>/bin/hiveservices.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>脚本内容如下:</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token assign-left variable\">HIVE_LOG_DIR</span><span class=\"token operator\">=</span><span class=\"token variable\">$HIVE_HOME</span>/logs\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">!</span> <span class=\"token parameter variable\">-d</span> <span class=\"token variable\">$HIVE_LOG_DIR</span> <span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">then</span>\n\t<span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$HIVE_LOG_DIR</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\">#检查进程是否运行正常，参数1为进程名，参数2为进程端口</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">check_process</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token assign-left variable\">pid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-v</span> <span class=\"token function\">grep</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token parameter variable\">-i</span> $1 <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $2&#125;'</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">ppid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>ss <span class=\"token parameter variable\">-nltp</span> <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> $2 <span class=\"token operator\">|</span> <span class=\"token function\">awk</span> <span class=\"token string\">'&#123;print $7&#125;'</span> <span class=\"token operator\">|</span> <span class=\"token function\">cut</span> <span class=\"token parameter variable\">-d</span> <span class=\"token string\">'/'</span> <span class=\"token parameter variable\">-f</span> <span class=\"token number\">1</span><span class=\"token variable\">)</span></span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$pid</span>\n    <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$pid</span>\"</span> <span class=\"token operator\">=~</span> <span class=\"token string\">\"<span class=\"token variable\">$ppid</span>\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$ppid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">return</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">return</span> <span class=\"token number\">1</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">hive_start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token assign-left variable\">metapid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>check_process HiveMetastore <span class=\"token number\">9083</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">cmd</span><span class=\"token operator\">=</span><span class=\"token string\">\"nohup hive --service metastore ><span class=\"token variable\">$HIVE_LOG_DIR</span>/metastore.log 2>&amp;1 &amp;\"</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$metapid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">eval</span> <span class=\"token variable\">$cmd</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Metastroe服务已启动\"</span>\n    <span class=\"token assign-left variable\">server2pid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>check_process HiveServer2 <span class=\"token number\">10000</span><span class=\"token variable\">)</span></span>\n    <span class=\"token assign-left variable\">cmd</span><span class=\"token operator\">=</span><span class=\"token string\">\"nohup hive --service hiveserver2 ><span class=\"token variable\">$HIVE_LOG_DIR</span>/hiveServer2.log 2>&amp;1 &amp;\"</span>\n    <span class=\"token punctuation\">[</span> <span class=\"token parameter variable\">-z</span> <span class=\"token string\">\"<span class=\"token variable\">$server2pid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token builtin class-name\">eval</span> <span class=\"token variable\">$cmd</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HiveServer2服务已启动\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">hive_stop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n<span class=\"token assign-left variable\">metapid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>check_process HiveMetastore <span class=\"token number\">9083</span><span class=\"token variable\">)</span></span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$metapid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">kill</span> <span class=\"token variable\">$metapid</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Metastore服务未启动\"</span>\n    <span class=\"token assign-left variable\">server2pid</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>check_process HiveServer2 <span class=\"token number\">10000</span><span class=\"token variable\">)</span></span>\n    <span class=\"token punctuation\">[</span> <span class=\"token string\">\"<span class=\"token variable\">$server2pid</span>\"</span> <span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">kill</span> <span class=\"token variable\">$server2pid</span> <span class=\"token operator\">||</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HiveServer2服务未启动\"</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">hive_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  ss <span class=\"token parameter variable\">-tunlp</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">10000</span> <span class=\"token operator\">></span> /dev/null\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>\n    <span class=\"token function\">sleep</span> <span class=\"token number\">3</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HiveServer2服务运行异常\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token function\">sleep</span> <span class=\"token number\">3</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"HiveServer2服务运行正常\"</span>\n  <span class=\"token keyword\">fi</span>\n  ss <span class=\"token parameter variable\">-tunlp</span> <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> <span class=\"token number\">9083</span> <span class=\"token operator\">></span> /dev/null\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-ne</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">then</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Metastore服务运行异常\"</span>\n  <span class=\"token keyword\">else</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Metastore服务运行正常\"</span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">case</span> <span class=\"token variable\">$1</span> <span class=\"token keyword\">in</span>\n<span class=\"token string\">\"start\"</span><span class=\"token punctuation\">)</span>\n    hive_start\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"stop\"</span><span class=\"token punctuation\">)</span>\n    hive_stop\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"restart\"</span><span class=\"token punctuation\">)</span>\n    hive_stop\n    <span class=\"token function\">sleep</span> <span class=\"token number\">2</span>\n    hive_start\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">#    check_process HiveMetastore 9083 >/dev/null &amp;&amp; echo \"Metastore服务运行正常\" || echo \"Metastore服务运行异常\"</span>\n<span class=\"token comment\">#    check_process HiveServer2 10000 >/dev/null &amp;&amp; echo \"HiveServer2服务运行正常\" || echo \"HiveServer2服务运行异常\"</span>\n    hive_status\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n*<span class=\"token punctuation\">)</span>\n    <span class=\"token builtin class-name\">echo</span> Invalid Args<span class=\"token operator\">!</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">'Usage: '</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">basename</span> $0<span class=\"token variable\">)</span></span><span class=\"token string\">' start|stop|restart|status'</span>\n    <span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">esac</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>脚本启动测试</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@master ~<span class=\"token punctuation\">]</span><span class=\"token comment\"># hiveservices.sh start</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>查看端口号是否已启动:</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401141130477.png\" alt=\"image-20240114113057354\"></p>\n<p>脚本启动成功!</p>\n<p>部署完成!!!</p>\n<h3 id=\"2-4-Hive使用技巧\"><a href=\"#2-4-Hive使用技巧\" class=\"headerlink\" title=\"2.4  Hive使用技巧\"></a>2.4  Hive使用技巧</h3><h4 id=\"2-4-1-Hive常用交互命令\"><a href=\"#2-4-1-Hive常用交互命令\" class=\"headerlink\" title=\"2.4.1 Hive常用交互命令\"></a>2.4.1 Hive常用交互命令</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">查看帮助:\n<span class=\"token punctuation\">[</span>root@master hive<span class=\"token punctuation\">]</span>$ bin/hive <span class=\"token parameter variable\">-help</span>\nusage: hive\n -d,--define <span class=\"token operator\">&lt;</span>key<span class=\"token operator\">=</span>value<span class=\"token operator\">></span>          Variable subsitution to apply to hive\n                                  commands. e.g. <span class=\"token parameter variable\">-d</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span>B or <span class=\"token parameter variable\">--define</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span>B\n    <span class=\"token parameter variable\">--database</span> <span class=\"token operator\">&lt;</span>databasename<span class=\"token operator\">></span>     Specify the database to use\n <span class=\"token parameter variable\">-e</span> <span class=\"token operator\">&lt;</span>quoted-query-string<span class=\"token operator\">></span>         SQL from <span class=\"token builtin class-name\">command</span> line\n <span class=\"token parameter variable\">-f</span> <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span>                      SQL from files\n -H,--help                        Print <span class=\"token builtin class-name\">help</span> information\n    <span class=\"token parameter variable\">--hiveconf</span> <span class=\"token operator\">&lt;</span>property<span class=\"token operator\">=</span>value<span class=\"token operator\">></span>   Use value <span class=\"token keyword\">for</span> given property\n    <span class=\"token parameter variable\">--hivevar</span> <span class=\"token operator\">&lt;</span>key<span class=\"token operator\">=</span>value<span class=\"token operator\">></span>         Variable subsitution to apply to hive\n                                  commands. e.g. <span class=\"token parameter variable\">--hivevar</span> <span class=\"token assign-left variable\">A</span><span class=\"token operator\">=</span>B\n <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">&lt;</span>filename<span class=\"token operator\">></span>                    Initialization SQL <span class=\"token function\">file</span>\n -S,--silent                      Silent mode <span class=\"token keyword\">in</span> interactive shell\n -v,--verbose                     Verbose mode <span class=\"token punctuation\">(</span>echo executed SQL to the console<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例1:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token number\">1</span>）在Hive命令行里创建一个表student，并插入<span class=\"token number\">1</span>条数据\nhive <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> student<span class=\"token punctuation\">(</span>id <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>name string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nOK\n<span class=\"token keyword\">Time</span> taken: <span class=\"token number\">1.291</span> seconds\n\nhive <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token keyword\">insert</span> <span class=\"token keyword\">into</span> <span class=\"token keyword\">table</span> student <span class=\"token keyword\">values</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"zhangsan\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nhive <span class=\"token punctuation\">(</span><span class=\"token keyword\">default</span><span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> student<span class=\"token punctuation\">;</span>\nOK\nstudent<span class=\"token punctuation\">.</span>id\tstudent<span class=\"token punctuation\">.</span>name\n<span class=\"token number\">1</span>\tzhangsan\n<span class=\"token keyword\">Time</span> taken: <span class=\"token number\">0.144</span> seconds<span class=\"token punctuation\">,</span> Fetched: <span class=\"token number\">1</span> <span class=\"token keyword\">row</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">2</span>）“<span class=\"token operator\">-</span>e”不进入hive的交互窗口执行hql语句\n<span class=\"token punctuation\">[</span>root<span class=\"token variable\">@master</span> hive<span class=\"token punctuation\">]</span>$ bin<span class=\"token operator\">/</span>hive <span class=\"token operator\">-</span>e <span class=\"token string\">\"select id from student;\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">3</span>）“-f”执行脚本中的hql语句\n（1）在/opt/module/hive/下创建datas目录并在datas目录下创建hivef.sql文件\n<span class=\"token punctuation\">[</span>atguigu@master hive<span class=\"token punctuation\">]</span>$ <span class=\"token function\">mkdir</span> datas\n<span class=\"token punctuation\">[</span>atguigu@master datas<span class=\"token punctuation\">]</span>$ <span class=\"token function\">vim</span> hivef.sql\n（2）文件中写入正确的hql语句\n<span class=\"token keyword\">select</span> * from student<span class=\"token punctuation\">;</span>\n（3）执行文件中的hql语句\n<span class=\"token punctuation\">[</span>atguigu@master hive<span class=\"token punctuation\">]</span>$ bin/hive <span class=\"token parameter variable\">-f</span> /opt/module/hive/datas/hivef.sql\n（4）执行文件中的hql语句并将结果写入文件中\n<span class=\"token punctuation\">[</span>atguigu@master hive<span class=\"token punctuation\">]</span>$ bin/hive <span class=\"token parameter variable\">-f</span> /opt/module/hive/datas/hivef.sql  <span class=\"token operator\">></span> /opt/module/hive/datas/hive_result.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>例2:</p>\n<pre class=\"line-numbers language-sql\" data-language=\"sql\"><code class=\"language-sql\"><span class=\"token keyword\">create</span> <span class=\"token keyword\">table</span> <span class=\"token keyword\">if</span>  <span class=\"token operator\">not</span> <span class=\"token keyword\">exists</span> orders<span class=\"token punctuation\">(</span>\nid string<span class=\"token punctuation\">,</span>\nuserno string<span class=\"token punctuation\">,</span>\npassword string<span class=\"token punctuation\">,</span>\nemail string<span class=\"token punctuation\">,</span>\nphone string<span class=\"token punctuation\">,</span>\nname string<span class=\"token punctuation\">,</span>\nidcard string<span class=\"token punctuation\">,</span>\n<span class=\"token keyword\">status</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span>\ndepid string\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">row</span> format  delimited <span class=\"token keyword\">fields</span> <span class=\"token keyword\">terminated</span> <span class=\"token keyword\">by</span> <span class=\"token string\">','</span><span class=\"token punctuation\">;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>从本地将csv文件导入hive(需要提前建好表)：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">load data <span class=\"token builtin class-name\">local</span> inpath <span class=\"token string\">'文件路径'</span> into table 表名<span class=\"token punctuation\">;</span>\nload data <span class=\"token builtin class-name\">local</span> inpath <span class=\"token string\">'/opt/user.csv'</span> into table orders<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>将hdfs中的文件导入hive：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">load data inpath ‘hdfs中csv文件路径’ into table 表名<span class=\"token punctuation\">;</span>\nload data inpath <span class=\"token string\">'/data081/order.csv'</span> into table orders<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>导入完成</p>\n<p>执行导入语句说明：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"> load data inpath ‘/tmp/fun_user.txt’ into table fun_user_external<span class=\"token punctuation\">;</span>\n load data <span class=\"token builtin class-name\">local</span> inpath ‘/tmp/fun_user.txt’ into table fun_user_external<span class=\"token punctuation\">;</span>\n上面两条数据导入语句，如果有local这个关键字，则这个路径应该为本地文件系统路径，数据会被拷贝到目标位置；如果省略掉local关键字，那么这个路径应该是分布式文件系统中的路径，这种情况下，数据是从这个路径转移到目标位置的。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n"},{"title":"MYSQL数据备份","date":"2024-11-09T17:48:04.000Z","_content":"# MYSQL 备份实战\n\n## 1. 备份需求：\n\n1. **每日凌晨2时对数据做有一次全备，包含binlog,需要对备份文件远程存放。**\n2. **备份备份历史文件本地保留7日，远程目录保留3个月。**\n\n## 2. 实现步骤：\n\n:one: 全库备份脚本\n:two: binlog 备份脚本\n:three: 压缩和同步脚本\n:four: 配置定时任务\n\n示例脚本如下：\n\n```sh\n#!/bin/bash\n\n# 定义变量\nBACKUP_DIR=\"/path/to/backup\"               # 本地备份目录\nBINLOG_DIR=\"/path/to/binlog_backup\"        # 本地 binlog 备份目录\nREMOTE_SERVER=\"user@remote_server:/remote/backup/directory\"  # 远程备份服务器及目录（建议提前配置好ssh互信）\nMYSQL_USER=\"your_mysql_user\"               # MySQL 用户名\nMYSQL_PASSWORD=\"your_mysql_password\"       # MySQL 用户密码\nMYSQL_HOST=\"localhost\"                     # MySQL 主机地址\nMYSQL_PORT=\"3306\"                          # MySQL 端口号\nDATE=$(date +\"%Y%m%d%H%M\")                 # 当前日期时间，用于创建唯一的备份目录\n\n# 创建备份目录\nmkdir -p $BACKUP_DIR/$DATE\nmkdir -p $BINLOG_DIR/$DATE\n\n# 全备份\necho \"Starting full backup...\"\nmysqldump -u $MYSQL_USER -p$MYSQL_PASSWORD -h $MYSQL_HOST -P $MYSQL_PORT --all-databases > $BACKUP_DIR/$DATE/full_backup.sql\nif [ $? -eq 0 ]; then\n  echo \"Full backup successful!\"\nelse\n  echo \"Full backup failed!\"\n  exit 1\nfi\n\n# binlog 备份\necho \"Starting binlog backup...\"\nmysqladmin -u $MYSQL_USER -p$MYSQL_PASSWORD flush-logs\ncp /data/mysql/binlog/mysql-bin.* $BINLOG_DIR/$DATE     #找到binlog文件位置\nif [ $? -eq 0 ]; then\n  echo \"Binlog backup successful!\"\nelse\n  echo \"Binlog backup failed!\"\n  exit 1\nfi\n\n# 压缩备份文件\necho \"Compressing backup files...\"\ntar -czf $BACKUP_DIR/$DATE/full_backup.tar.gz -C $BACKUP_DIR/$DATE full_backup.sql\ntar -czf $BINLOG_DIR/$DATE/binlog_backup.tar.gz -C $BINLOG_DIR/$DATE .\nif [ $? -eq 0 ]; then\n  echo \"Compression successful!\"\nelse\n  echo \"Compression failed!\"\n  exit 1\nfi\n\n# 同步到远程服务器\necho \"Syncing backups to remote server...\"\nrsync -avz $BACKUP_DIR/$DATE/full_backup.tar.gz $REMOTE_SERVER\nrsync -avz $BINLOG_DIR/$DATE/binlog_backup.tar.gz $REMOTE_SERVER\nif [ $? -eq 0 ]; then\n  echo \"Backup sync successful!\"\nelse\n  echo \"Backup sync failed!\"\n  exit 1\nfi\n\n# 清理本地 7 天前的备份\necho \"Cleaning up local backups older than 7 days...\"\nfind $BACKUP_DIR -type d -mtime +7 -exec rm -rf {} \\;\nfind $BINLOG_DIR -type d -mtime +7 -exec rm -rf {} \\;\n\n# 清理远程 3 个月前的备份\necho \"Cleaning up remote backups older than 3 months...\"\nssh user@remote_server \"find /remote/backup/directory -type f -mtime +90 -exec rm -f {} \\;\"\n\necho \"All backup tasks completed successfully!\"\n```\n\n> 使用说明\n\n1. **变量定义**：\n\n2. - `BACKUP_DIR`：定义本地全备份的存储目录。\n   - `BINLOG_DIR`：定义本地 binlog 备份的存储目录。\n   - `REMOTE_SERVER`：定义远程服务器的用户名、地址和备份目录。\n   - `MYSQL_USER`：定义 MySQL 用户名。\n   - `MYSQL_PASSWORD`：定义 MySQL 用户密码。\n   - `MYSQL_HOST`：定义 MySQL 主机地址。\n   - `MYSQL_PORT`：定义 MySQL 端口号。\n   - `DATE`：获取当前日期时间，用于创建唯一的备份目录。\n\n3. **备份操作**：\n\n4. - **创建备份目录**：使用 `mkdir` 命令创建用于存储全备份和 binlog 备份的目录。\n   - **全备份**：使用 `mysqldump` 命令进行全备份，并将结果保存到备份目录。\n   - **binlog 备份**：使用 `mysqladmin flush-logs` 刷新 binlog，然后使用 `cp` 命令将 binlog 文件拷贝到备份目录。\n   - **压缩备份文件**：使用 `tar` 命令压缩全备份和 binlog 备份文件。\n   - **同步到远程服务器**：使用 `rsync` 命令将压缩的备份文件同步到远程服务器。\n\n5. **清理旧备份**：\n\n6. - **清理本地备份**：使用 `find` 命令删除本地 7 天前的备份。\n   - **清理远程备份**：使用 `ssh` 和 `find` 命令删除远程 3 个月前的备份。\n\n## 3. 配置定时任务\n\n使用 `cron` 配置定时任务，确保脚本在指定时间运行：\n\n```sh\n# 编辑 cron 任务\ncrontab -e\n\n# 添加以下内容，每天两点进行备份\n0 2 * * * /path/to/backup_script.sh\n```\n\n保存并退出后，`cron` 会在每天凌晨两点自动执行备份脚本。根据实际情况调整脚本中的路径和变量。","source":"_posts/MYSQL数据备份.md","raw":"---\ntitle: MYSQL数据备份\ndate: 2024-11-10 01:48:04\ntags: Mysql\ncategories: \n  - 数据库系列\n---\n# MYSQL 备份实战\n\n## 1. 备份需求：\n\n1. **每日凌晨2时对数据做有一次全备，包含binlog,需要对备份文件远程存放。**\n2. **备份备份历史文件本地保留7日，远程目录保留3个月。**\n\n## 2. 实现步骤：\n\n:one: 全库备份脚本\n:two: binlog 备份脚本\n:three: 压缩和同步脚本\n:four: 配置定时任务\n\n示例脚本如下：\n\n```sh\n#!/bin/bash\n\n# 定义变量\nBACKUP_DIR=\"/path/to/backup\"               # 本地备份目录\nBINLOG_DIR=\"/path/to/binlog_backup\"        # 本地 binlog 备份目录\nREMOTE_SERVER=\"user@remote_server:/remote/backup/directory\"  # 远程备份服务器及目录（建议提前配置好ssh互信）\nMYSQL_USER=\"your_mysql_user\"               # MySQL 用户名\nMYSQL_PASSWORD=\"your_mysql_password\"       # MySQL 用户密码\nMYSQL_HOST=\"localhost\"                     # MySQL 主机地址\nMYSQL_PORT=\"3306\"                          # MySQL 端口号\nDATE=$(date +\"%Y%m%d%H%M\")                 # 当前日期时间，用于创建唯一的备份目录\n\n# 创建备份目录\nmkdir -p $BACKUP_DIR/$DATE\nmkdir -p $BINLOG_DIR/$DATE\n\n# 全备份\necho \"Starting full backup...\"\nmysqldump -u $MYSQL_USER -p$MYSQL_PASSWORD -h $MYSQL_HOST -P $MYSQL_PORT --all-databases > $BACKUP_DIR/$DATE/full_backup.sql\nif [ $? -eq 0 ]; then\n  echo \"Full backup successful!\"\nelse\n  echo \"Full backup failed!\"\n  exit 1\nfi\n\n# binlog 备份\necho \"Starting binlog backup...\"\nmysqladmin -u $MYSQL_USER -p$MYSQL_PASSWORD flush-logs\ncp /data/mysql/binlog/mysql-bin.* $BINLOG_DIR/$DATE     #找到binlog文件位置\nif [ $? -eq 0 ]; then\n  echo \"Binlog backup successful!\"\nelse\n  echo \"Binlog backup failed!\"\n  exit 1\nfi\n\n# 压缩备份文件\necho \"Compressing backup files...\"\ntar -czf $BACKUP_DIR/$DATE/full_backup.tar.gz -C $BACKUP_DIR/$DATE full_backup.sql\ntar -czf $BINLOG_DIR/$DATE/binlog_backup.tar.gz -C $BINLOG_DIR/$DATE .\nif [ $? -eq 0 ]; then\n  echo \"Compression successful!\"\nelse\n  echo \"Compression failed!\"\n  exit 1\nfi\n\n# 同步到远程服务器\necho \"Syncing backups to remote server...\"\nrsync -avz $BACKUP_DIR/$DATE/full_backup.tar.gz $REMOTE_SERVER\nrsync -avz $BINLOG_DIR/$DATE/binlog_backup.tar.gz $REMOTE_SERVER\nif [ $? -eq 0 ]; then\n  echo \"Backup sync successful!\"\nelse\n  echo \"Backup sync failed!\"\n  exit 1\nfi\n\n# 清理本地 7 天前的备份\necho \"Cleaning up local backups older than 7 days...\"\nfind $BACKUP_DIR -type d -mtime +7 -exec rm -rf {} \\;\nfind $BINLOG_DIR -type d -mtime +7 -exec rm -rf {} \\;\n\n# 清理远程 3 个月前的备份\necho \"Cleaning up remote backups older than 3 months...\"\nssh user@remote_server \"find /remote/backup/directory -type f -mtime +90 -exec rm -f {} \\;\"\n\necho \"All backup tasks completed successfully!\"\n```\n\n> 使用说明\n\n1. **变量定义**：\n\n2. - `BACKUP_DIR`：定义本地全备份的存储目录。\n   - `BINLOG_DIR`：定义本地 binlog 备份的存储目录。\n   - `REMOTE_SERVER`：定义远程服务器的用户名、地址和备份目录。\n   - `MYSQL_USER`：定义 MySQL 用户名。\n   - `MYSQL_PASSWORD`：定义 MySQL 用户密码。\n   - `MYSQL_HOST`：定义 MySQL 主机地址。\n   - `MYSQL_PORT`：定义 MySQL 端口号。\n   - `DATE`：获取当前日期时间，用于创建唯一的备份目录。\n\n3. **备份操作**：\n\n4. - **创建备份目录**：使用 `mkdir` 命令创建用于存储全备份和 binlog 备份的目录。\n   - **全备份**：使用 `mysqldump` 命令进行全备份，并将结果保存到备份目录。\n   - **binlog 备份**：使用 `mysqladmin flush-logs` 刷新 binlog，然后使用 `cp` 命令将 binlog 文件拷贝到备份目录。\n   - **压缩备份文件**：使用 `tar` 命令压缩全备份和 binlog 备份文件。\n   - **同步到远程服务器**：使用 `rsync` 命令将压缩的备份文件同步到远程服务器。\n\n5. **清理旧备份**：\n\n6. - **清理本地备份**：使用 `find` 命令删除本地 7 天前的备份。\n   - **清理远程备份**：使用 `ssh` 和 `find` 命令删除远程 3 个月前的备份。\n\n## 3. 配置定时任务\n\n使用 `cron` 配置定时任务，确保脚本在指定时间运行：\n\n```sh\n# 编辑 cron 任务\ncrontab -e\n\n# 添加以下内容，每天两点进行备份\n0 2 * * * /path/to/backup_script.sh\n```\n\n保存并退出后，`cron` 会在每天凌晨两点自动执行备份脚本。根据实际情况调整脚本中的路径和变量。","slug":"MYSQL数据备份","published":1,"updated":"2024-11-11T12:27:45.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm3d099g5000fe1mjcc8x8bu3","content":"<h1 id=\"MYSQL-备份实战\"><a href=\"#MYSQL-备份实战\" class=\"headerlink\" title=\"MYSQL 备份实战\"></a>MYSQL 备份实战</h1><h2 id=\"1-备份需求：\"><a href=\"#1-备份需求：\" class=\"headerlink\" title=\"1. 备份需求：\"></a>1. 备份需求：</h2><ol>\n<li><strong>每日凌晨2时对数据做有一次全备，包含binlog,需要对备份文件远程存放。</strong></li>\n<li><strong>备份备份历史文件本地保留7日，远程目录保留3个月。</strong></li>\n</ol>\n<h2 id=\"2-实现步骤：\"><a href=\"#2-实现步骤：\" class=\"headerlink\" title=\"2. 实现步骤：\"></a>2. 实现步骤：</h2><p>:one: 全库备份脚本<br>:two: binlog 备份脚本<br>:three: 压缩和同步脚本<br>:four: 配置定时任务</p>\n<p>示例脚本如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 定义变量</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/path/to/backup\"</span>               <span class=\"token comment\"># 本地备份目录</span>\n<span class=\"token assign-left variable\">BINLOG_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/path/to/binlog_backup\"</span>        <span class=\"token comment\"># 本地 binlog 备份目录</span>\n<span class=\"token assign-left variable\">REMOTE_SERVER</span><span class=\"token operator\">=</span><span class=\"token string\">\"user@remote_server:/remote/backup/directory\"</span>  <span class=\"token comment\"># 远程备份服务器及目录（建议提前配置好ssh互信）</span>\n<span class=\"token assign-left variable\">MYSQL_USER</span><span class=\"token operator\">=</span><span class=\"token string\">\"your_mysql_user\"</span>               <span class=\"token comment\"># MySQL 用户名</span>\n<span class=\"token assign-left variable\">MYSQL_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"your_mysql_password\"</span>       <span class=\"token comment\"># MySQL 用户密码</span>\n<span class=\"token assign-left variable\">MYSQL_HOST</span><span class=\"token operator\">=</span><span class=\"token string\">\"localhost\"</span>                     <span class=\"token comment\"># MySQL 主机地址</span>\n<span class=\"token assign-left variable\">MYSQL_PORT</span><span class=\"token operator\">=</span><span class=\"token string\">\"3306\"</span>                          <span class=\"token comment\"># MySQL 端口号</span>\n<span class=\"token assign-left variable\">DATE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">\"%Y%m%d%H%M\"</span><span class=\"token variable\">)</span></span>                 <span class=\"token comment\"># 当前日期时间，用于创建唯一的备份目录</span>\n\n<span class=\"token comment\"># 创建备份目录</span>\n<span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span>\n<span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span>\n\n<span class=\"token comment\"># 全备份</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Starting full backup...\"</span>\nmysqldump <span class=\"token parameter variable\">-u</span> <span class=\"token variable\">$MYSQL_USER</span> -p<span class=\"token variable\">$MYSQL_PASSWORD</span> <span class=\"token parameter variable\">-h</span> <span class=\"token variable\">$MYSQL_HOST</span> <span class=\"token parameter variable\">-P</span> <span class=\"token variable\">$MYSQL_PORT</span> --all-databases <span class=\"token operator\">></span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span>/full_backup.sql\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Full backup successful!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Full backup failed!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># binlog 备份</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Starting binlog backup...\"</span>\nmysqladmin <span class=\"token parameter variable\">-u</span> <span class=\"token variable\">$MYSQL_USER</span> -p<span class=\"token variable\">$MYSQL_PASSWORD</span> flush-logs\n<span class=\"token function\">cp</span> /data/mysql/binlog/mysql-bin.* <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span>     <span class=\"token comment\">#找到binlog文件位置</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Binlog backup successful!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Binlog backup failed!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 压缩备份文件</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Compressing backup files...\"</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span>/full_backup.tar.gz <span class=\"token parameter variable\">-C</span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span> full_backup.sql\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span>/binlog_backup.tar.gz <span class=\"token parameter variable\">-C</span> <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Compression successful!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Compression failed!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 同步到远程服务器</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Syncing backups to remote server...\"</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span>/full_backup.tar.gz <span class=\"token variable\">$REMOTE_SERVER</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span>/binlog_backup.tar.gz <span class=\"token variable\">$REMOTE_SERVER</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Backup sync successful!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Backup sync failed!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 清理本地 7 天前的备份</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Cleaning up local backups older than 7 days...\"</span>\n<span class=\"token function\">find</span> <span class=\"token variable\">$BACKUP_DIR</span> <span class=\"token parameter variable\">-type</span> d <span class=\"token parameter variable\">-mtime</span> +7 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">find</span> <span class=\"token variable\">$BINLOG_DIR</span> <span class=\"token parameter variable\">-type</span> d <span class=\"token parameter variable\">-mtime</span> +7 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 清理远程 3 个月前的备份</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Cleaning up remote backups older than 3 months...\"</span>\n<span class=\"token function\">ssh</span> user@remote_server <span class=\"token string\">\"find /remote/backup/directory -type f -mtime +90 -exec rm -f &#123;&#125; \\;\"</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"All backup tasks completed successfully!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>使用说明</p>\n</blockquote>\n<ol>\n<li><p><strong>变量定义</strong>：</p>\n</li>\n<li><ul>\n<li><code>BACKUP_DIR</code>：定义本地全备份的存储目录。</li>\n<li><code>BINLOG_DIR</code>：定义本地 binlog 备份的存储目录。</li>\n<li><code>REMOTE_SERVER</code>：定义远程服务器的用户名、地址和备份目录。</li>\n<li><code>MYSQL_USER</code>：定义 MySQL 用户名。</li>\n<li><code>MYSQL_PASSWORD</code>：定义 MySQL 用户密码。</li>\n<li><code>MYSQL_HOST</code>：定义 MySQL 主机地址。</li>\n<li><code>MYSQL_PORT</code>：定义 MySQL 端口号。</li>\n<li><code>DATE</code>：获取当前日期时间，用于创建唯一的备份目录。</li>\n</ul>\n</li>\n<li><p><strong>备份操作</strong>：</p>\n</li>\n<li><ul>\n<li><strong>创建备份目录</strong>：使用 <code>mkdir</code> 命令创建用于存储全备份和 binlog 备份的目录。</li>\n<li><strong>全备份</strong>：使用 <code>mysqldump</code> 命令进行全备份，并将结果保存到备份目录。</li>\n<li><strong>binlog 备份</strong>：使用 <code>mysqladmin flush-logs</code> 刷新 binlog，然后使用 <code>cp</code> 命令将 binlog 文件拷贝到备份目录。</li>\n<li><strong>压缩备份文件</strong>：使用 <code>tar</code> 命令压缩全备份和 binlog 备份文件。</li>\n<li><strong>同步到远程服务器</strong>：使用 <code>rsync</code> 命令将压缩的备份文件同步到远程服务器。</li>\n</ul>\n</li>\n<li><p><strong>清理旧备份</strong>：</p>\n</li>\n<li><ul>\n<li><strong>清理本地备份</strong>：使用 <code>find</code> 命令删除本地 7 天前的备份。</li>\n<li><strong>清理远程备份</strong>：使用 <code>ssh</code> 和 <code>find</code> 命令删除远程 3 个月前的备份。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-配置定时任务\"><a href=\"#3-配置定时任务\" class=\"headerlink\" title=\"3. 配置定时任务\"></a>3. 配置定时任务</h2><p>使用 <code>cron</code> 配置定时任务，确保脚本在指定时间运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 编辑 cron 任务</span>\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span>\n\n<span class=\"token comment\"># 添加以下内容，每天两点进行备份</span>\n<span class=\"token number\">0</span> <span class=\"token number\">2</span> * * * /path/to/backup_script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存并退出后，<code>cron</code> 会在每天凌晨两点自动执行备份脚本。根据实际情况调整脚本中的路径和变量。</p>\n","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":"<h1 id=\"MYSQL-备份实战\"><a href=\"#MYSQL-备份实战\" class=\"headerlink\" title=\"MYSQL 备份实战\"></a>MYSQL 备份实战</h1><h2 id=\"1-备份需求：\"><a href=\"#1-备份需求：\" class=\"headerlink\" title=\"1. 备份需求：\"></a>1. 备份需求：</h2><ol>\n<li><strong>每日凌晨2时对数据做有一次全备，包含binlog,需要对备份文件远程存放。</strong></li>\n<li><strong>备份备份历史文件本地保留7日，远程目录保留3个月。</strong></li>\n</ol>\n<h2 id=\"2-实现步骤：\"><a href=\"#2-实现步骤：\" class=\"headerlink\" title=\"2. 实现步骤：\"></a>2. 实现步骤：</h2><p>:one: 全库备份脚本<br>:two: binlog 备份脚本<br>:three: 压缩和同步脚本<br>:four: 配置定时任务</p>\n<p>示例脚本如下：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/bash</span>\n\n<span class=\"token comment\"># 定义变量</span>\n<span class=\"token assign-left variable\">BACKUP_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/path/to/backup\"</span>               <span class=\"token comment\"># 本地备份目录</span>\n<span class=\"token assign-left variable\">BINLOG_DIR</span><span class=\"token operator\">=</span><span class=\"token string\">\"/path/to/binlog_backup\"</span>        <span class=\"token comment\"># 本地 binlog 备份目录</span>\n<span class=\"token assign-left variable\">REMOTE_SERVER</span><span class=\"token operator\">=</span><span class=\"token string\">\"user@remote_server:/remote/backup/directory\"</span>  <span class=\"token comment\"># 远程备份服务器及目录（建议提前配置好ssh互信）</span>\n<span class=\"token assign-left variable\">MYSQL_USER</span><span class=\"token operator\">=</span><span class=\"token string\">\"your_mysql_user\"</span>               <span class=\"token comment\"># MySQL 用户名</span>\n<span class=\"token assign-left variable\">MYSQL_PASSWORD</span><span class=\"token operator\">=</span><span class=\"token string\">\"your_mysql_password\"</span>       <span class=\"token comment\"># MySQL 用户密码</span>\n<span class=\"token assign-left variable\">MYSQL_HOST</span><span class=\"token operator\">=</span><span class=\"token string\">\"localhost\"</span>                     <span class=\"token comment\"># MySQL 主机地址</span>\n<span class=\"token assign-left variable\">MYSQL_PORT</span><span class=\"token operator\">=</span><span class=\"token string\">\"3306\"</span>                          <span class=\"token comment\"># MySQL 端口号</span>\n<span class=\"token assign-left variable\">DATE</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">\"%Y%m%d%H%M\"</span><span class=\"token variable\">)</span></span>                 <span class=\"token comment\"># 当前日期时间，用于创建唯一的备份目录</span>\n\n<span class=\"token comment\"># 创建备份目录</span>\n<span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span>\n<span class=\"token function\">mkdir</span> <span class=\"token parameter variable\">-p</span> <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span>\n\n<span class=\"token comment\"># 全备份</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Starting full backup...\"</span>\nmysqldump <span class=\"token parameter variable\">-u</span> <span class=\"token variable\">$MYSQL_USER</span> -p<span class=\"token variable\">$MYSQL_PASSWORD</span> <span class=\"token parameter variable\">-h</span> <span class=\"token variable\">$MYSQL_HOST</span> <span class=\"token parameter variable\">-P</span> <span class=\"token variable\">$MYSQL_PORT</span> --all-databases <span class=\"token operator\">></span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span>/full_backup.sql\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Full backup successful!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Full backup failed!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># binlog 备份</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Starting binlog backup...\"</span>\nmysqladmin <span class=\"token parameter variable\">-u</span> <span class=\"token variable\">$MYSQL_USER</span> -p<span class=\"token variable\">$MYSQL_PASSWORD</span> flush-logs\n<span class=\"token function\">cp</span> /data/mysql/binlog/mysql-bin.* <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span>     <span class=\"token comment\">#找到binlog文件位置</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Binlog backup successful!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Binlog backup failed!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 压缩备份文件</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Compressing backup files...\"</span>\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span>/full_backup.tar.gz <span class=\"token parameter variable\">-C</span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span> full_backup.sql\n<span class=\"token function\">tar</span> <span class=\"token parameter variable\">-czf</span> <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span>/binlog_backup.tar.gz <span class=\"token parameter variable\">-C</span> <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span> <span class=\"token builtin class-name\">.</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Compression successful!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Compression failed!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 同步到远程服务器</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Syncing backups to remote server...\"</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token variable\">$BACKUP_DIR</span>/<span class=\"token variable\">$DATE</span>/full_backup.tar.gz <span class=\"token variable\">$REMOTE_SERVER</span>\n<span class=\"token function\">rsync</span> <span class=\"token parameter variable\">-avz</span> <span class=\"token variable\">$BINLOG_DIR</span>/<span class=\"token variable\">$DATE</span>/binlog_backup.tar.gz <span class=\"token variable\">$REMOTE_SERVER</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token variable\">$?</span> <span class=\"token parameter variable\">-eq</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Backup sync successful!\"</span>\n<span class=\"token keyword\">else</span>\n  <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Backup sync failed!\"</span>\n  <span class=\"token builtin class-name\">exit</span> <span class=\"token number\">1</span>\n<span class=\"token keyword\">fi</span>\n\n<span class=\"token comment\"># 清理本地 7 天前的备份</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Cleaning up local backups older than 7 days...\"</span>\n<span class=\"token function\">find</span> <span class=\"token variable\">$BACKUP_DIR</span> <span class=\"token parameter variable\">-type</span> d <span class=\"token parameter variable\">-mtime</span> +7 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">find</span> <span class=\"token variable\">$BINLOG_DIR</span> <span class=\"token parameter variable\">-type</span> d <span class=\"token parameter variable\">-mtime</span> +7 <span class=\"token parameter variable\">-exec</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-rf</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token punctuation\">\\</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\"># 清理远程 3 个月前的备份</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Cleaning up remote backups older than 3 months...\"</span>\n<span class=\"token function\">ssh</span> user@remote_server <span class=\"token string\">\"find /remote/backup/directory -type f -mtime +90 -exec rm -f &#123;&#125; \\;\"</span>\n\n<span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"All backup tasks completed successfully!\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>使用说明</p>\n</blockquote>\n<ol>\n<li><p><strong>变量定义</strong>：</p>\n</li>\n<li><ul>\n<li><code>BACKUP_DIR</code>：定义本地全备份的存储目录。</li>\n<li><code>BINLOG_DIR</code>：定义本地 binlog 备份的存储目录。</li>\n<li><code>REMOTE_SERVER</code>：定义远程服务器的用户名、地址和备份目录。</li>\n<li><code>MYSQL_USER</code>：定义 MySQL 用户名。</li>\n<li><code>MYSQL_PASSWORD</code>：定义 MySQL 用户密码。</li>\n<li><code>MYSQL_HOST</code>：定义 MySQL 主机地址。</li>\n<li><code>MYSQL_PORT</code>：定义 MySQL 端口号。</li>\n<li><code>DATE</code>：获取当前日期时间，用于创建唯一的备份目录。</li>\n</ul>\n</li>\n<li><p><strong>备份操作</strong>：</p>\n</li>\n<li><ul>\n<li><strong>创建备份目录</strong>：使用 <code>mkdir</code> 命令创建用于存储全备份和 binlog 备份的目录。</li>\n<li><strong>全备份</strong>：使用 <code>mysqldump</code> 命令进行全备份，并将结果保存到备份目录。</li>\n<li><strong>binlog 备份</strong>：使用 <code>mysqladmin flush-logs</code> 刷新 binlog，然后使用 <code>cp</code> 命令将 binlog 文件拷贝到备份目录。</li>\n<li><strong>压缩备份文件</strong>：使用 <code>tar</code> 命令压缩全备份和 binlog 备份文件。</li>\n<li><strong>同步到远程服务器</strong>：使用 <code>rsync</code> 命令将压缩的备份文件同步到远程服务器。</li>\n</ul>\n</li>\n<li><p><strong>清理旧备份</strong>：</p>\n</li>\n<li><ul>\n<li><strong>清理本地备份</strong>：使用 <code>find</code> 命令删除本地 7 天前的备份。</li>\n<li><strong>清理远程备份</strong>：使用 <code>ssh</code> 和 <code>find</code> 命令删除远程 3 个月前的备份。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-配置定时任务\"><a href=\"#3-配置定时任务\" class=\"headerlink\" title=\"3. 配置定时任务\"></a>3. 配置定时任务</h2><p>使用 <code>cron</code> 配置定时任务，确保脚本在指定时间运行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 编辑 cron 任务</span>\n<span class=\"token function\">crontab</span> <span class=\"token parameter variable\">-e</span>\n\n<span class=\"token comment\"># 添加以下内容，每天两点进行备份</span>\n<span class=\"token number\">0</span> <span class=\"token number\">2</span> * * * /path/to/backup_script.sh<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>保存并退出后，<code>cron</code> 会在每天凌晨两点自动执行备份脚本。根据实际情况调整脚本中的路径和变量。</p>\n"},{"title":"Ubuntu基础配置(18.04)+Docker配置和使用+容器化centos7大数据环境准备","date":"2024-11-10T14:48:05.000Z","_content":"## 1.ubuntu 基础配置\n\n环境：`ubuntu 18.04`\n\n安装完Ubuntu之后，除了需要新建用户、设置密码之外，我们还要设置root密码，虽然Ubuntu默认有root超级管理员账户，但是具体的密码我们可以自行设置\n\n### 1.1设置root密码：\n\n1.启动Ubuntu\n启动Ubuntu，有图形界面的，启动终端即可\n\n2.终端输入sudo passwd root\n\n```shell\nsudo passwd root\n```\n\n![image-20230320172400074](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324207.png)\n\n验证测试：\n\n验证：输入**su -** 后输入超级管理员账户的密码\n\n### 1.2 更换源：\n\n更换下载源，不更换的话安装docker时会很慢，可以选择阿里或者清华源\n\n``` shell\nsudo apt install vim \nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak\t\t备份\nsudo vi /etc/apt/sources.list    #添加清华源\n```\n\n清华源：\n\n[ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/)\n\n```shell\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n# # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n\ndeb http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse\n# deb-src http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse\n\n# 预发布软件源，不建议启用\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n# # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n```\n\n```shell\n#更新源\nsudo apt update\n```\n\n### 1.3 安装ssh服务：\n\n（方便连接xshell工具）\n\n```shell\nsudo apt install openssh-server -y\n```\n\n解决windows Ubuntu 之间复制粘贴问题：\n\n```shell\nsudo apt-get autoremove open-vm-tools -y\t//卸载已有的工具\nsudo apt-get install open-vm-tools -y\t\t//安装工具open-vm-tools\nsudo apt-get install open-vm-tools-desktop -y //安装open-vm-tools-desktop\n```\n\nubuntu下安装asbru-cm工具：\n\nAsbru-CM是一种开源的配置管理工具，用于管理和部署服务器配置。它提供了一个Web界面，使用户可以轻松地管理和监控多台服务器的配置。\n\n```shell\nsudo apt install curl -y\n\ncurl -s https://packagecloud.io/install/repositories/asbru-cm/asbru-cm/script.deb.sh | sudo bash\n\nsudo apt install asbru-cm -y\n```\n\n\n\n## 2. Docker配置\n\n因为某些原因,国内已经访问不了docker官网,所以此处改成使用阿里源安装docker\n\n[Ubuntu18.04使用阿里源镜像安装Docker并配置镜像加速【图文详细】_阿里的ubuntu镜像源安装-CSDN博客](https://blog.csdn.net/single_0910/article/details/120562065)\n\n### 2.1 如果之前安装过docker，卸载旧版本docker\n\n```shell\nsudo apt-get remove docker docker-engine docker.io containerd runc\n```\n\n### 2.2 更新及安装工具软件\n\n#### 2.2.1 更新系统里的所有的能更新的软件\n\n```shell\nsudo apt-get update\n```\n\n#### 2.2.2 安装几个工具软件\n\n```shell\nsudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release -y\n```\n\n#### 2.2.3 增加一个docker的官方GPG key：\n\ngpgkey：是用来验证软件的真伪 ——防伪的\n\n```shell\nsudo curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n```\n\n2.2.4 下载仓库文件\n\n```shell\nsudo echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n\n### 2.3 安装docker\n\n#### 2.3.1 再次更新系统\n\n```shell\nsudo apt-get update\n```\n\n#### 2.3.2 安装docker-ce软件\n\n```shell\nsudo apt-get install docker-ce docker-ce-cli containerd.io -y\n```\n\n### 2.4 查看是否启动docker\n\n由于docker安装的时候自带设置启动，所以直接查看进程是否启动就可以了\n\n```shell\nps aux|grep docker\n```\n\n![image-20230812180124831](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324877.png)\n\n安装成功\n\n## 3. Docker 服务操作\n\n### 3.1 常用命令\n\n```shell\nsudo service docker start  # 启动Docker\nsudo service docker stop  # 停止Docker\nsudo service docker restart  # 重启Docker\nsudo service docker status  # 查看Docker状态\n```\n\n```shell\n#查看docker容器\ndocker ps    #查看当前运行的容器\ndocker ps -a    #查看所有容器\ndocker rm -f $(docker ps -aq)  #删除所有容器\ndocker images  #查看docker镜像\n```\n\n```shell\n#导入镜像包,两者都会恢复为镜像\ndocker load < /home/hj/大数据比赛环境包/bigdata.tar\ndocker load -i < /home/hj/大数据比赛环境包/bigdata.tar\n#导入容器包,两者都会恢复为镜像\ndocker import 路径\n\n#删除镜像（镜像有创建过容器则需要删除容器才可以删除镜像）\ndocker rmi 镜像名或镜像ID\n\n#删除所有容器\ndocker rm -f $(docker ps -aq)\ndocker rm 容器\n\n#启动容器\ndocker start 容器id\n\n#运行容器\ndocker exec -it 容器id /bin/bash\n\n#将容器导成镜像\nsudo docker commit -a \"镜像作者\" -m \"提交成镜像的说明信息\" 容器的名称 新镜像名称:标签\n\ndocker 上传文件到容器\ndocker cp /home/hj/clickhouse-21.9.4.35（tgz） master:/opt/\n\n从容器中上传文件到本地\ndocker cp master:/opt/ /home/hj\n```\n\n### 3.2 Docker 的镜像操作\n\n#### 3.2.1 列出镜像\n\n```shell\ndocker images\n```\n\n结果：![image-20230812180956921](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324626.png)\n\n| 参数       | 含义                                 |\n| ---------- | ------------------------------------ |\n| REPOSITORY | 镜像所在的仓库名称                   |\n| TAG        | 镜像标签(版本)                       |\n| IMAGEID    | 镜像ID                               |\n| CREATED    | 镜像的创建日期(不是获取该镜像的日期) |\n| SIZE       | 镜像大小                             |\n\n#### 3.2.2 搜索镜像\n\n```shell\ndocker search 镜像名\n```\n\n#### 3.2.3 拉取镜像\n\n要想获取某个镜像，我们可以使用pull命令，从仓库中拉取镜像到本地。\n\n如果下载镜像时不指定标签，则默认会下载仓库中最新版本的镜像，即选择标签为 latest 标签。\n\n```shell\ndocker pull 仓库名称/标签\n```\n\n#### 3.2.4 删除镜像\n\n镜像有创建过容器则需要删除容器才可以删除镜像（或者直接强制删除）\n\n```shell\n#普通删除\ndocker rmi 镜像名或镜像ID\n#强制删除\ndocker rmi -f 镜像名或镜像ID\n```\n\n#### 3.2.5 导入镜像\n\n```shell\n#方法1\ndocker load < 镜像包\n#方法2\nsudo docker load -i 镜像包\n```\n\n#### 3.2.6 导出镜像\n\n```shell\ndocker save –o /opt/导出名称.tar 镜像名称:标签\n```\n\n### 3.3 Docker容器操作\n\n#### 3.3.1 创建容器\n\n```shell\ndocker run [option] 镜像名:tag [向启动容器中传入的命令]\n```\n\n 常用可选参数说明：\n\n| 参数     | 意义                                                         |\n| -------- | ------------------------------------------------------------ |\n| -i       | 表示以“交互模式”运行容器                                     |\n| -t       | 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。 |\n| –name    | 为创建的容器命名                                             |\n| -v       | 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。 |\n| -d       | 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。 |\n| -p       | 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射 |\n| -e       | 为容器设置环境变量                                           |\n| –network | 指定网桥                                                     |\n\n#### 3.3.2 进入已运行容器\n\n```shell\ndocker exec -it 容器名或容器ID /bin/bash\n```\n\n#### 3.3.3 查看容器\n\n```shell\ndocker ps     #查看当前运行的容器\ndocker ps –a    #查看当前所有的容器\n```\n\n#### 3.3.4 启动容器\n\n```shell\ndocker start 容器名或容器ID\n```\n\n#### 3.3.5 停止容器\n\n```shell\ndocker stop 容器名或容器ID\n```\n\n#### 3.3.6 删除容器   \n\n（运行中的容器不能删除）\n\n```shell\ndocker rm 容器名或容器ID \n```\n\n#### 3.3.7 将容器保存为镜像\n\n```shell\ndocker commit [OPTIONS] CONTAINER [REPOSITORY]:[TAG]\n```\n\nOPTIONS说明：\n\n-a :提交的镜像作者；\n\n-c :使用Dockerfile指令来创建镜像；\n\n-m :提交时的说明文字；\n\n-p :在commit时，将容器暂停。\n\n$ docker commit 容器名 镜像名:tag\n\n### 3.4 docker网络设置\n\n#### 3.4.1 Docker基本网络\n\n`Docker安装后自动创建3种网络：bridge、host、none`\n\nDocker在启动时会开启一个虚拟网桥设备docker0，默认的地址为172.17.0.1/16，容器启动后都会被桥接到docker0上，并自动分配到一个ip地址。\n\n| bridge 桥接网络模式：                                        |\n| :----------------------------------------------------------- |\n| 1、为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，默认为该模式 |\n| 2、为容器分配独立IP，具有很好的网络隔离性，服务不会跟宿主机上的服务发送端口冲突问题 |\n| 3、主机和容器间通过桥接的方式进行通信                        |\n| 4、只能单机使用，不适合跨主机docker服务间通信                |\n\n| host 主机本地网络模式：                                     |\n| :---------------------------------------------------------- |\n| 1、docker容器共享主机的ip、端口号等等网络资源，如果单机部署 |\n| 2、只能单机使用，不适合跨主机docker服务间通信               |\n| 3、这种网络模式效率最高                                     |\n\n| overlay 集群网络模式：                               |\n| :--------------------------------------------------- |\n| 多节点集群下统一分配服务独立ip                       |\n| 跨机器节点上的docker服务间能互相通信                 |\n| 支持主机节点和集群网络内的节点间互相通信             |\n| 支持节点间加密通信 注：windows机器节点不支持加密通信 |\n\n`添加网桥，创建容器时可以指定网桥，不使用默认网桥`\n\n```shell\ndocker network ls            #查看所有网络\ndocker network inspect 网络   #查看网络的相关信息\n\n#自定义创建的默认default bridge   \n\ndocker network create --driver bridge --subnet 192.168.1.1/24 --gateway 192.168.1.1 mynet #自定义创建一个网络mynet\n\ndocker network rm 网络id  #删除网络\n```\n\n## 4.Docker封装Centos7大数据环境\n\n### 4.1 编写Dockerfile\n\nPull一个centos7镜像，在此镜像基础上安装ssh服务，开放端口，上传jdk、hadoop等组件等操作，封装成hadoop大数据环境\n\n> 已经封装好的镜像:\n>\n> ```\n> registry.cn-hangzhou.aliyuncs.com/shangguan-hj/bigdata:gxjzy\n> ```\n>\n> 拉取\n>\n> ```\n> docker pull registry.cn-hangzhou.aliyuncs.com/510_repo/bigdata:gxjzy\n> ```\n\n#### 4.1.2 编写第一个dockerfile，封装一个新的镜像\n\n```shell\n# 选择一个已有的os镜像作为基础  \nFROM centos:7\n# 安装openssh-server和sudo软件包  \nRUN yum install -y --nogpgcheck openssh-server sudo\n#安装openssh-clients\nRUN yum install -y --nogpgcheck openssh-clients\n# 修改ssh配置文件，方便后面通过root用户进行ssh远程登录\nRUN sed -i 's/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g' /etc/ssh/sshd_config\nRUN sed -i 's/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g' /etc/ssh/sshd_config\n\n#安装initscripts，方便 ip addr 查询网络状态\nRUN yum install -y --nogpgcheck initscripts\n\n#安装防火墙 \nRUN yum install firewalld -y\n\n#安装which  hadoop版本号查看需要用到  \nRUN yum install which -y\n\n#mysql 初始化报错 ，缺少libnuma.so.1情况，缺啥补啥 \nRUN yum install numactl -y\nRUN yum install libaio -y\nRUN yum install libnuma.so.1 -y\n\n\n# 添加用户root，密码123，并且将此用户添加到sudoers里  \nRUN echo \"root:123\" | chpasswd\nRUN echo \"root   ALL=(ALL)       ALL\" >> /etc/sudoers\n\n# 启动sshd服务并且暴露22端口  \nRUN mkdir /var/run/sshd\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\nRUN mkdir /opt/{software,module}\n#封装：docker build -t\"centos-ssh-root\" . \n```\n\n编辑好脚本后，使用build命令开始运行\n\n格式：docker build -t”镜像名称” . \n\n```shell\ndocker build -t\"centos-ssh-root\" .\n```\n\n运行效果：![image-20230812190933232](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324924.png)\n\n查看创建的镜像：\n\n ![image-20230812191126430](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324183.png)\n\n#### 4.1.3 编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像\n\n封装的系统只是完成了ssh服务的安装，开放22端口，配置root用户。并没有达到大数据环境的使用要求，接下来在这个封装好的系统上，再进行封装，上传大数据环境需要的组件\n\n```shell\n#软件包根据自己所需的填写\nFROM centos-ssh-root\nCOPY apache-flume-1.9.0-bin.tar.gz /opt/software/\nCOPY apache-hive-3.1.2-bin.tar.gz /opt/software/\nCOPY flink-1.14.0-bin-scala_2.12.tgz /opt/software/\nCOPY hadoop-3.1.3.tar.gz /opt/software/\nCOPY hbase-2.2.3-bin.tar.gz /opt/software/\nCOPY jdk-8u162-linux-x64.tar.gz /opt/software/\nCOPY kafka_2.12-2.4.1.tgz /opt/software/\nCOPY maxwell-1.29.0.tar.gz /opt/software/\nCOPY redis-6.2.6.tar.gz /opt/software/\nCOPY scala-2.12.0.tgz /opt/software/\nCOPY spark-3.1.1-bin-hadoop3.2.tgz /opt/software/\nCOPY clickhouse-21.9.4.35 /opt/software/\nCOPY mysql /opt/software/\nCOPY zookeeper-3.4.6.tar.gz /opt/software/\nCOPY sqoop-1.4.2.bin__hadoop-2.0.0-alpha.tar.gz /opt/software/\n\n#封装：docker build -t\"bigdata\" . \n```\n\n编辑好脚本后，使用build命令开始运行\n\n格式：docker build -t”镜像名称” . \n\n```shell\ndocker build -t\"bigdata\" .\n```\n\n运行效果：![image-20230812191358805](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324473.png)\n\n查看新封装的镜像：\n\n![image-20230812192151801](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324220.png)\n\n\n\n#### 4.1.4 :star:镜像优化\n\n> 综合上面两个dockerfile进行镜像优化\n\n```sh\nFROM centos:7\nRUN yum install -y --nogpgcheck openssh-server sudo && \\\n    yum install -y --nogpgcheck openssh-clients && \\\n    sed -i 's/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g' /etc/ssh/sshd_config && \\\n    sed -i 's/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g' /etc/ssh/sshd_config && \\\n    yum install -y --nogpgcheck initscripts && \\\n    yum install which -y && \\\n    yum install numactl libaio libnuma.so.1 -y && \\\n    echo \"root:1\" | chpasswd && \\\n    echo \"root   ALL=(ALL)       ALL\" >> /etc/sudoers && \\\n    mkdir /var/run/sshd && \\\n    mkdir /opt/{software,module} \nCOPY . /opt/software \nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\n> 开始构建\n\n```sh\n[root@docker-server ~/bigdata]# docker build -t bigdata .\n```\n\n> 查看构建的镜像\n\n```sh\n[root@docker-server ~/bigdata]# docker images | grep bigdata\nbigdata                                                  latest    78d3e81ed5ac   4 hours ago   5.57GB\n```\n\n\n\n### 4.2 Hadoop配置容器启动：\n\n**集群规划，一主两从**\n\n\n\n> master:\n\n测试:\n\n```shell\ndocker run -id --name master --hostname master --net mynet --privileged=true -v /sys/fs/cgroup:/sys/fs/cgroup -P -p 50070:50070 -p 8088:8088 bigdata /usr/sbin/init\n```\n\n:star: 实战:\n\n自定义创建docker网络:\n\n(这会创建一个自定义网络，允许在该网络内分配IP地址，并且子网为`192.168.1.0/24`)\n\n```sh\nsudo docker network create --subnet=192.168.1.0/24 mynet\n```\n\n创建一个名为master的容器,ip为192.168.1.10:\n\n```sh\nsudo docker run -d --privileged --name master --hostname master --network mynet --ip 192.168.1.10 \\\n  -p 16010:16010 -p 2181:2181 -p 3306:3306 -p 6379:6379 -p 8031:8031 -p 8032:8032 \\\n  -p 8033:8033 -p 8080:8080 -p 8081:8081 -p 8020:8020 -p 8088:8088 -p 8123:8123 \\\n  -p 9000:9000 -p 9083:9083 -p 9092:9092 -p 9866:9866 -p 9870:9870 -p 10000:10000 \\\n  -p 60010:60010 -p 12321:12321 -p 4040:4040 \\\n  -v /sys/fs/cgroup:/sys/fs/cgroup \\\n  bigdata:gxjzy /usr/sbin/init\n```\n\n\n\n> slave1:\n\n\n\n测试:\n\n```shell\ndocker run -id --name slave1 --hostname slave1 --net mynet --privileged=true -P bigdata /usr/sbin/init\n```\n\n:star: 实战:\n\n创建一个名为master的容器,ip为192.168.1.10:\n\n```sh\nsudo docker run -d --privileged --name slave1 --hostname slave1 --network mynet --ip 192.168.1.20 \\\n  -v /sys/fs/cgroup:/sys/fs/cgroup \\\n  bigdata:gxjzy /usr/sbin/init\n```\n\n\n\n\n\n> slave2:\n\n\n\n测试:\n\n```shell\ndocker run -id --name slave2 --hostname slave2 --net mynet --privileged=true -P bigdata /usr/sbin/init\n```\n\n:star: 实战:\n\n```sh\nsudo docker run -d --privileged --name slave2 --hostname slave2 --network mynet --ip 192.168.1.30 \\\n  -v /sys/fs/cgroup:/sys/fs/cgroup \\\n  bigdata:gxjzy /usr/sbin/init\n```\n\n查看创建情况：\n\n```sh\ndocker ps\n```\n\n![image-20240108011713901](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080117475.png)\n\n\n\niptables端口映射（略）(后续添加端口映射需要使用)\n\n```shell\niptables -t nat -vnL  #查看端口映射\n\niptables -t nat -A DOCKER -p tcp --dport 8089 -j DNAT --to-destination 192.168.12.10:8088  #添加端口映射\n\niptables -t nat -vnL DOCKER --line-number #显示端口行号\n\niptables -t nat -D DOCKER {行号}  #删除规则\n```\n\n进入容器：\n\n```shell\ndocker exec -it master bash\n```\n\n## 5. 使用docker-compose编排工具快速建立基础环境\n\n> 首先安装好docker-compose编排工具(略)\n\n\n\n### 5.1 编写docker-compose.yml\n\n自定义容器ip:\n\n| 容器   | ip           |\n| ------ | ------------ |\n| master | 192.168.1.10 |\n| slave1 | 192.168.1.20 |\n| slave2 | 192.168.1.30 |\n\n\n\n```sh\n[root@docker-server ~/bigdata-work]# vim docker-compose.yml \n```\n\n```yml\nversion: \"2.2\"\nservices:\n  master:\n    restart: always\n    image: registry.cn-hangzhou.aliyuncs.com/shangguan-hj/bigdata:gxjzy\n    container_name: master\n    hostname: master\n    networks:\n      mynet:\n        ipv4_address: \"192.168.1.10\"\n    privileged: true\n    ports:\n      - 1022:22\n      - 50070:50070\n      - 8088:8088\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup\n    command: /usr/sbin/init\n\n  slave1:\n    restart: always\n    image: registry.cn-hangzhou.aliyuncs.com/shangguan-hj/bigdata:gxjzy\n    container_name: slave1\n    hostname: slave1\n    networks:\n      mynet:\n        ipv4_address: \"192.168.1.20\"\n    privileged: true\n    ports:\n      - 1023:22\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup\n    command: /usr/sbin/init\n    \n  slave2:\n    restart: always\n    image: registry.cn-hangzhou.aliyuncs.com/shangguan-hj/bigdata:gxjzy\n    container_name: slave2\n    hostname: slave2\n    networks:\n      mynet:\n        ipv4_address: \"192.168.1.30\"\n    privileged: true\n    ports:\n      - 1024:22\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup\n    command: /usr/sbin/init\n\n# 连接外部网络\nnetworks:\n  mynet:\n    ipam:\n      config:\n      - subnet: 192.168.1.0/24\n```\n\n### 5.2 启动docker容器\n\n```sh\n[root@docker-server ~/bigdata-work]# docker-compose up -d\n```\n\n![image-20231211150006708](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111500849.png)\n\n### 5.3 查看创建情况\n\n#### 5.3.1 方式一(了解):\n\n```sh\n[root@docker-server ~/bigdata-work]# docker-compose ps\n```\n\n![image-20231211150148532](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111501626.png)\n\n#### 5.3.2 方式二:\n\n```sh\n[root@docker-server ~/bigdata-work]# docker ps\n```\n\n![image-20231211150204022](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111502108.png)\n\n\n\n### 5.4 进入容器\n\n**master:**\n\n```sh\n[root@docker-server ~/bigdata-work]# docker exec -it master bash\n[root@master /]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n96: eth0@if97: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 192.168.1.2/24 brd 192.168.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n[root@master /]# \n```\n\n**slave1:**\n\n```sh\n[root@docker-server ~/bigdata-work]# docker exec -it slave1 bash\n[root@slave1 /]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n34: eth0@if35: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:04 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 192.168.1.4/24 brd 192.168.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n[root@slave1 /]# \n```\n\n**slave2:**\n\n```sh\n[root@docker-server ~/bigdata-work]# docker exec -it slave2 bash\n[root@slave2 /]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n32: eth0@if33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 192.168.1.3/24 brd 192.168.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n[root@slave2 /]# \n```\n\n\n\n### 5.5 连接客户端工具xshell\n\n==注意定义的ssh端口==\n\n\n\n> master\n\n![](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111517302.png)\n\n![image-20231211151542886](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111515957.png)\n\n\n\n> slave1\n\n![image-20231211151638743](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516827.png)\n\n![image-20231211151651296](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516374.png)\n\n\n\n> slave2\n\n![image-20231211151809445](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518533.png)\n\n![image-20231211151826289](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518365.png)\n\n完成\n\n## 6. asbru-cm工具的使用\n\n1、\n\n![image-20230320175907854](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134495.png)\n\n2、\n\n![image-20230320180309740](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134744.png)\n","source":"_posts/Ubuntu基础配置-18-04-Docker配置和使用-容器化centos7大数据环境准备.md","raw":"---\ntitle: Ubuntu基础配置(18.04)+Docker配置和使用+容器化centos7大数据环境准备\ndate: 2024-11-10 22:48:05\ntags: \n  - Bigdata\n  - Docker\ncategories: \n  - 大数据运维系列\n---\n## 1.ubuntu 基础配置\n\n环境：`ubuntu 18.04`\n\n安装完Ubuntu之后，除了需要新建用户、设置密码之外，我们还要设置root密码，虽然Ubuntu默认有root超级管理员账户，但是具体的密码我们可以自行设置\n\n### 1.1设置root密码：\n\n1.启动Ubuntu\n启动Ubuntu，有图形界面的，启动终端即可\n\n2.终端输入sudo passwd root\n\n```shell\nsudo passwd root\n```\n\n![image-20230320172400074](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324207.png)\n\n验证测试：\n\n验证：输入**su -** 后输入超级管理员账户的密码\n\n### 1.2 更换源：\n\n更换下载源，不更换的话安装docker时会很慢，可以选择阿里或者清华源\n\n``` shell\nsudo apt install vim \nsudo cp /etc/apt/sources.list /etc/apt/sources.list.bak\t\t备份\nsudo vi /etc/apt/sources.list    #添加清华源\n```\n\n清华源：\n\n[ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror](https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/)\n\n```shell\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n# # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse\n\ndeb http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse\n# deb-src http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse\n\n# 预发布软件源，不建议启用\n# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n# # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\n```\n\n```shell\n#更新源\nsudo apt update\n```\n\n### 1.3 安装ssh服务：\n\n（方便连接xshell工具）\n\n```shell\nsudo apt install openssh-server -y\n```\n\n解决windows Ubuntu 之间复制粘贴问题：\n\n```shell\nsudo apt-get autoremove open-vm-tools -y\t//卸载已有的工具\nsudo apt-get install open-vm-tools -y\t\t//安装工具open-vm-tools\nsudo apt-get install open-vm-tools-desktop -y //安装open-vm-tools-desktop\n```\n\nubuntu下安装asbru-cm工具：\n\nAsbru-CM是一种开源的配置管理工具，用于管理和部署服务器配置。它提供了一个Web界面，使用户可以轻松地管理和监控多台服务器的配置。\n\n```shell\nsudo apt install curl -y\n\ncurl -s https://packagecloud.io/install/repositories/asbru-cm/asbru-cm/script.deb.sh | sudo bash\n\nsudo apt install asbru-cm -y\n```\n\n\n\n## 2. Docker配置\n\n因为某些原因,国内已经访问不了docker官网,所以此处改成使用阿里源安装docker\n\n[Ubuntu18.04使用阿里源镜像安装Docker并配置镜像加速【图文详细】_阿里的ubuntu镜像源安装-CSDN博客](https://blog.csdn.net/single_0910/article/details/120562065)\n\n### 2.1 如果之前安装过docker，卸载旧版本docker\n\n```shell\nsudo apt-get remove docker docker-engine docker.io containerd runc\n```\n\n### 2.2 更新及安装工具软件\n\n#### 2.2.1 更新系统里的所有的能更新的软件\n\n```shell\nsudo apt-get update\n```\n\n#### 2.2.2 安装几个工具软件\n\n```shell\nsudo apt-get install apt-transport-https ca-certificates curl gnupg lsb-release -y\n```\n\n#### 2.2.3 增加一个docker的官方GPG key：\n\ngpgkey：是用来验证软件的真伪 ——防伪的\n\n```shell\nsudo curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n```\n\n2.2.4 下载仓库文件\n\n```shell\nsudo echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg$(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n```\n\n### 2.3 安装docker\n\n#### 2.3.1 再次更新系统\n\n```shell\nsudo apt-get update\n```\n\n#### 2.3.2 安装docker-ce软件\n\n```shell\nsudo apt-get install docker-ce docker-ce-cli containerd.io -y\n```\n\n### 2.4 查看是否启动docker\n\n由于docker安装的时候自带设置启动，所以直接查看进程是否启动就可以了\n\n```shell\nps aux|grep docker\n```\n\n![image-20230812180124831](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324877.png)\n\n安装成功\n\n## 3. Docker 服务操作\n\n### 3.1 常用命令\n\n```shell\nsudo service docker start  # 启动Docker\nsudo service docker stop  # 停止Docker\nsudo service docker restart  # 重启Docker\nsudo service docker status  # 查看Docker状态\n```\n\n```shell\n#查看docker容器\ndocker ps    #查看当前运行的容器\ndocker ps -a    #查看所有容器\ndocker rm -f $(docker ps -aq)  #删除所有容器\ndocker images  #查看docker镜像\n```\n\n```shell\n#导入镜像包,两者都会恢复为镜像\ndocker load < /home/hj/大数据比赛环境包/bigdata.tar\ndocker load -i < /home/hj/大数据比赛环境包/bigdata.tar\n#导入容器包,两者都会恢复为镜像\ndocker import 路径\n\n#删除镜像（镜像有创建过容器则需要删除容器才可以删除镜像）\ndocker rmi 镜像名或镜像ID\n\n#删除所有容器\ndocker rm -f $(docker ps -aq)\ndocker rm 容器\n\n#启动容器\ndocker start 容器id\n\n#运行容器\ndocker exec -it 容器id /bin/bash\n\n#将容器导成镜像\nsudo docker commit -a \"镜像作者\" -m \"提交成镜像的说明信息\" 容器的名称 新镜像名称:标签\n\ndocker 上传文件到容器\ndocker cp /home/hj/clickhouse-21.9.4.35（tgz） master:/opt/\n\n从容器中上传文件到本地\ndocker cp master:/opt/ /home/hj\n```\n\n### 3.2 Docker 的镜像操作\n\n#### 3.2.1 列出镜像\n\n```shell\ndocker images\n```\n\n结果：![image-20230812180956921](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324626.png)\n\n| 参数       | 含义                                 |\n| ---------- | ------------------------------------ |\n| REPOSITORY | 镜像所在的仓库名称                   |\n| TAG        | 镜像标签(版本)                       |\n| IMAGEID    | 镜像ID                               |\n| CREATED    | 镜像的创建日期(不是获取该镜像的日期) |\n| SIZE       | 镜像大小                             |\n\n#### 3.2.2 搜索镜像\n\n```shell\ndocker search 镜像名\n```\n\n#### 3.2.3 拉取镜像\n\n要想获取某个镜像，我们可以使用pull命令，从仓库中拉取镜像到本地。\n\n如果下载镜像时不指定标签，则默认会下载仓库中最新版本的镜像，即选择标签为 latest 标签。\n\n```shell\ndocker pull 仓库名称/标签\n```\n\n#### 3.2.4 删除镜像\n\n镜像有创建过容器则需要删除容器才可以删除镜像（或者直接强制删除）\n\n```shell\n#普通删除\ndocker rmi 镜像名或镜像ID\n#强制删除\ndocker rmi -f 镜像名或镜像ID\n```\n\n#### 3.2.5 导入镜像\n\n```shell\n#方法1\ndocker load < 镜像包\n#方法2\nsudo docker load -i 镜像包\n```\n\n#### 3.2.6 导出镜像\n\n```shell\ndocker save –o /opt/导出名称.tar 镜像名称:标签\n```\n\n### 3.3 Docker容器操作\n\n#### 3.3.1 创建容器\n\n```shell\ndocker run [option] 镜像名:tag [向启动容器中传入的命令]\n```\n\n 常用可选参数说明：\n\n| 参数     | 意义                                                         |\n| -------- | ------------------------------------------------------------ |\n| -i       | 表示以“交互模式”运行容器                                     |\n| -t       | 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。 |\n| –name    | 为创建的容器命名                                             |\n| -v       | 表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。 |\n| -d       | 在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。 |\n| -p       | 表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射 |\n| -e       | 为容器设置环境变量                                           |\n| –network | 指定网桥                                                     |\n\n#### 3.3.2 进入已运行容器\n\n```shell\ndocker exec -it 容器名或容器ID /bin/bash\n```\n\n#### 3.3.3 查看容器\n\n```shell\ndocker ps     #查看当前运行的容器\ndocker ps –a    #查看当前所有的容器\n```\n\n#### 3.3.4 启动容器\n\n```shell\ndocker start 容器名或容器ID\n```\n\n#### 3.3.5 停止容器\n\n```shell\ndocker stop 容器名或容器ID\n```\n\n#### 3.3.6 删除容器   \n\n（运行中的容器不能删除）\n\n```shell\ndocker rm 容器名或容器ID \n```\n\n#### 3.3.7 将容器保存为镜像\n\n```shell\ndocker commit [OPTIONS] CONTAINER [REPOSITORY]:[TAG]\n```\n\nOPTIONS说明：\n\n-a :提交的镜像作者；\n\n-c :使用Dockerfile指令来创建镜像；\n\n-m :提交时的说明文字；\n\n-p :在commit时，将容器暂停。\n\n$ docker commit 容器名 镜像名:tag\n\n### 3.4 docker网络设置\n\n#### 3.4.1 Docker基本网络\n\n`Docker安装后自动创建3种网络：bridge、host、none`\n\nDocker在启动时会开启一个虚拟网桥设备docker0，默认的地址为172.17.0.1/16，容器启动后都会被桥接到docker0上，并自动分配到一个ip地址。\n\n| bridge 桥接网络模式：                                        |\n| :----------------------------------------------------------- |\n| 1、为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，默认为该模式 |\n| 2、为容器分配独立IP，具有很好的网络隔离性，服务不会跟宿主机上的服务发送端口冲突问题 |\n| 3、主机和容器间通过桥接的方式进行通信                        |\n| 4、只能单机使用，不适合跨主机docker服务间通信                |\n\n| host 主机本地网络模式：                                     |\n| :---------------------------------------------------------- |\n| 1、docker容器共享主机的ip、端口号等等网络资源，如果单机部署 |\n| 2、只能单机使用，不适合跨主机docker服务间通信               |\n| 3、这种网络模式效率最高                                     |\n\n| overlay 集群网络模式：                               |\n| :--------------------------------------------------- |\n| 多节点集群下统一分配服务独立ip                       |\n| 跨机器节点上的docker服务间能互相通信                 |\n| 支持主机节点和集群网络内的节点间互相通信             |\n| 支持节点间加密通信 注：windows机器节点不支持加密通信 |\n\n`添加网桥，创建容器时可以指定网桥，不使用默认网桥`\n\n```shell\ndocker network ls            #查看所有网络\ndocker network inspect 网络   #查看网络的相关信息\n\n#自定义创建的默认default bridge   \n\ndocker network create --driver bridge --subnet 192.168.1.1/24 --gateway 192.168.1.1 mynet #自定义创建一个网络mynet\n\ndocker network rm 网络id  #删除网络\n```\n\n## 4.Docker封装Centos7大数据环境\n\n### 4.1 编写Dockerfile\n\nPull一个centos7镜像，在此镜像基础上安装ssh服务，开放端口，上传jdk、hadoop等组件等操作，封装成hadoop大数据环境\n\n> 已经封装好的镜像:\n>\n> ```\n> registry.cn-hangzhou.aliyuncs.com/shangguan-hj/bigdata:gxjzy\n> ```\n>\n> 拉取\n>\n> ```\n> docker pull registry.cn-hangzhou.aliyuncs.com/510_repo/bigdata:gxjzy\n> ```\n\n#### 4.1.2 编写第一个dockerfile，封装一个新的镜像\n\n```shell\n# 选择一个已有的os镜像作为基础  \nFROM centos:7\n# 安装openssh-server和sudo软件包  \nRUN yum install -y --nogpgcheck openssh-server sudo\n#安装openssh-clients\nRUN yum install -y --nogpgcheck openssh-clients\n# 修改ssh配置文件，方便后面通过root用户进行ssh远程登录\nRUN sed -i 's/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g' /etc/ssh/sshd_config\nRUN sed -i 's/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g' /etc/ssh/sshd_config\n\n#安装initscripts，方便 ip addr 查询网络状态\nRUN yum install -y --nogpgcheck initscripts\n\n#安装防火墙 \nRUN yum install firewalld -y\n\n#安装which  hadoop版本号查看需要用到  \nRUN yum install which -y\n\n#mysql 初始化报错 ，缺少libnuma.so.1情况，缺啥补啥 \nRUN yum install numactl -y\nRUN yum install libaio -y\nRUN yum install libnuma.so.1 -y\n\n\n# 添加用户root，密码123，并且将此用户添加到sudoers里  \nRUN echo \"root:123\" | chpasswd\nRUN echo \"root   ALL=(ALL)       ALL\" >> /etc/sudoers\n\n# 启动sshd服务并且暴露22端口  \nRUN mkdir /var/run/sshd\nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\nRUN mkdir /opt/{software,module}\n#封装：docker build -t\"centos-ssh-root\" . \n```\n\n编辑好脚本后，使用build命令开始运行\n\n格式：docker build -t”镜像名称” . \n\n```shell\ndocker build -t\"centos-ssh-root\" .\n```\n\n运行效果：![image-20230812190933232](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324924.png)\n\n查看创建的镜像：\n\n ![image-20230812191126430](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324183.png)\n\n#### 4.1.3 编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像\n\n封装的系统只是完成了ssh服务的安装，开放22端口，配置root用户。并没有达到大数据环境的使用要求，接下来在这个封装好的系统上，再进行封装，上传大数据环境需要的组件\n\n```shell\n#软件包根据自己所需的填写\nFROM centos-ssh-root\nCOPY apache-flume-1.9.0-bin.tar.gz /opt/software/\nCOPY apache-hive-3.1.2-bin.tar.gz /opt/software/\nCOPY flink-1.14.0-bin-scala_2.12.tgz /opt/software/\nCOPY hadoop-3.1.3.tar.gz /opt/software/\nCOPY hbase-2.2.3-bin.tar.gz /opt/software/\nCOPY jdk-8u162-linux-x64.tar.gz /opt/software/\nCOPY kafka_2.12-2.4.1.tgz /opt/software/\nCOPY maxwell-1.29.0.tar.gz /opt/software/\nCOPY redis-6.2.6.tar.gz /opt/software/\nCOPY scala-2.12.0.tgz /opt/software/\nCOPY spark-3.1.1-bin-hadoop3.2.tgz /opt/software/\nCOPY clickhouse-21.9.4.35 /opt/software/\nCOPY mysql /opt/software/\nCOPY zookeeper-3.4.6.tar.gz /opt/software/\nCOPY sqoop-1.4.2.bin__hadoop-2.0.0-alpha.tar.gz /opt/software/\n\n#封装：docker build -t\"bigdata\" . \n```\n\n编辑好脚本后，使用build命令开始运行\n\n格式：docker build -t”镜像名称” . \n\n```shell\ndocker build -t\"bigdata\" .\n```\n\n运行效果：![image-20230812191358805](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324473.png)\n\n查看新封装的镜像：\n\n![image-20230812192151801](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324220.png)\n\n\n\n#### 4.1.4 :star:镜像优化\n\n> 综合上面两个dockerfile进行镜像优化\n\n```sh\nFROM centos:7\nRUN yum install -y --nogpgcheck openssh-server sudo && \\\n    yum install -y --nogpgcheck openssh-clients && \\\n    sed -i 's/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g' /etc/ssh/sshd_config && \\\n    sed -i 's/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g' /etc/ssh/sshd_config && \\\n    yum install -y --nogpgcheck initscripts && \\\n    yum install which -y && \\\n    yum install numactl libaio libnuma.so.1 -y && \\\n    echo \"root:1\" | chpasswd && \\\n    echo \"root   ALL=(ALL)       ALL\" >> /etc/sudoers && \\\n    mkdir /var/run/sshd && \\\n    mkdir /opt/{software,module} \nCOPY . /opt/software \nEXPOSE 22\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\n> 开始构建\n\n```sh\n[root@docker-server ~/bigdata]# docker build -t bigdata .\n```\n\n> 查看构建的镜像\n\n```sh\n[root@docker-server ~/bigdata]# docker images | grep bigdata\nbigdata                                                  latest    78d3e81ed5ac   4 hours ago   5.57GB\n```\n\n\n\n### 4.2 Hadoop配置容器启动：\n\n**集群规划，一主两从**\n\n\n\n> master:\n\n测试:\n\n```shell\ndocker run -id --name master --hostname master --net mynet --privileged=true -v /sys/fs/cgroup:/sys/fs/cgroup -P -p 50070:50070 -p 8088:8088 bigdata /usr/sbin/init\n```\n\n:star: 实战:\n\n自定义创建docker网络:\n\n(这会创建一个自定义网络，允许在该网络内分配IP地址，并且子网为`192.168.1.0/24`)\n\n```sh\nsudo docker network create --subnet=192.168.1.0/24 mynet\n```\n\n创建一个名为master的容器,ip为192.168.1.10:\n\n```sh\nsudo docker run -d --privileged --name master --hostname master --network mynet --ip 192.168.1.10 \\\n  -p 16010:16010 -p 2181:2181 -p 3306:3306 -p 6379:6379 -p 8031:8031 -p 8032:8032 \\\n  -p 8033:8033 -p 8080:8080 -p 8081:8081 -p 8020:8020 -p 8088:8088 -p 8123:8123 \\\n  -p 9000:9000 -p 9083:9083 -p 9092:9092 -p 9866:9866 -p 9870:9870 -p 10000:10000 \\\n  -p 60010:60010 -p 12321:12321 -p 4040:4040 \\\n  -v /sys/fs/cgroup:/sys/fs/cgroup \\\n  bigdata:gxjzy /usr/sbin/init\n```\n\n\n\n> slave1:\n\n\n\n测试:\n\n```shell\ndocker run -id --name slave1 --hostname slave1 --net mynet --privileged=true -P bigdata /usr/sbin/init\n```\n\n:star: 实战:\n\n创建一个名为master的容器,ip为192.168.1.10:\n\n```sh\nsudo docker run -d --privileged --name slave1 --hostname slave1 --network mynet --ip 192.168.1.20 \\\n  -v /sys/fs/cgroup:/sys/fs/cgroup \\\n  bigdata:gxjzy /usr/sbin/init\n```\n\n\n\n\n\n> slave2:\n\n\n\n测试:\n\n```shell\ndocker run -id --name slave2 --hostname slave2 --net mynet --privileged=true -P bigdata /usr/sbin/init\n```\n\n:star: 实战:\n\n```sh\nsudo docker run -d --privileged --name slave2 --hostname slave2 --network mynet --ip 192.168.1.30 \\\n  -v /sys/fs/cgroup:/sys/fs/cgroup \\\n  bigdata:gxjzy /usr/sbin/init\n```\n\n查看创建情况：\n\n```sh\ndocker ps\n```\n\n![image-20240108011713901](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080117475.png)\n\n\n\niptables端口映射（略）(后续添加端口映射需要使用)\n\n```shell\niptables -t nat -vnL  #查看端口映射\n\niptables -t nat -A DOCKER -p tcp --dport 8089 -j DNAT --to-destination 192.168.12.10:8088  #添加端口映射\n\niptables -t nat -vnL DOCKER --line-number #显示端口行号\n\niptables -t nat -D DOCKER {行号}  #删除规则\n```\n\n进入容器：\n\n```shell\ndocker exec -it master bash\n```\n\n## 5. 使用docker-compose编排工具快速建立基础环境\n\n> 首先安装好docker-compose编排工具(略)\n\n\n\n### 5.1 编写docker-compose.yml\n\n自定义容器ip:\n\n| 容器   | ip           |\n| ------ | ------------ |\n| master | 192.168.1.10 |\n| slave1 | 192.168.1.20 |\n| slave2 | 192.168.1.30 |\n\n\n\n```sh\n[root@docker-server ~/bigdata-work]# vim docker-compose.yml \n```\n\n```yml\nversion: \"2.2\"\nservices:\n  master:\n    restart: always\n    image: registry.cn-hangzhou.aliyuncs.com/shangguan-hj/bigdata:gxjzy\n    container_name: master\n    hostname: master\n    networks:\n      mynet:\n        ipv4_address: \"192.168.1.10\"\n    privileged: true\n    ports:\n      - 1022:22\n      - 50070:50070\n      - 8088:8088\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup\n    command: /usr/sbin/init\n\n  slave1:\n    restart: always\n    image: registry.cn-hangzhou.aliyuncs.com/shangguan-hj/bigdata:gxjzy\n    container_name: slave1\n    hostname: slave1\n    networks:\n      mynet:\n        ipv4_address: \"192.168.1.20\"\n    privileged: true\n    ports:\n      - 1023:22\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup\n    command: /usr/sbin/init\n    \n  slave2:\n    restart: always\n    image: registry.cn-hangzhou.aliyuncs.com/shangguan-hj/bigdata:gxjzy\n    container_name: slave2\n    hostname: slave2\n    networks:\n      mynet:\n        ipv4_address: \"192.168.1.30\"\n    privileged: true\n    ports:\n      - 1024:22\n    volumes:\n      - /sys/fs/cgroup:/sys/fs/cgroup\n    command: /usr/sbin/init\n\n# 连接外部网络\nnetworks:\n  mynet:\n    ipam:\n      config:\n      - subnet: 192.168.1.0/24\n```\n\n### 5.2 启动docker容器\n\n```sh\n[root@docker-server ~/bigdata-work]# docker-compose up -d\n```\n\n![image-20231211150006708](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111500849.png)\n\n### 5.3 查看创建情况\n\n#### 5.3.1 方式一(了解):\n\n```sh\n[root@docker-server ~/bigdata-work]# docker-compose ps\n```\n\n![image-20231211150148532](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111501626.png)\n\n#### 5.3.2 方式二:\n\n```sh\n[root@docker-server ~/bigdata-work]# docker ps\n```\n\n![image-20231211150204022](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111502108.png)\n\n\n\n### 5.4 进入容器\n\n**master:**\n\n```sh\n[root@docker-server ~/bigdata-work]# docker exec -it master bash\n[root@master /]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n96: eth0@if97: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 192.168.1.2/24 brd 192.168.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n[root@master /]# \n```\n\n**slave1:**\n\n```sh\n[root@docker-server ~/bigdata-work]# docker exec -it slave1 bash\n[root@slave1 /]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n34: eth0@if35: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:04 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 192.168.1.4/24 brd 192.168.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n[root@slave1 /]# \n```\n\n**slave2:**\n\n```sh\n[root@docker-server ~/bigdata-work]# docker exec -it slave2 bash\n[root@slave2 /]# ip a\n1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet 127.0.0.1/8 scope host lo\n       valid_lft forever preferred_lft forever\n32: eth0@if33: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:03 brd ff:ff:ff:ff:ff:ff link-netnsid 0\n    inet 192.168.1.3/24 brd 192.168.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n[root@slave2 /]# \n```\n\n\n\n### 5.5 连接客户端工具xshell\n\n==注意定义的ssh端口==\n\n\n\n> master\n\n![](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111517302.png)\n\n![image-20231211151542886](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111515957.png)\n\n\n\n> slave1\n\n![image-20231211151638743](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516827.png)\n\n![image-20231211151651296](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516374.png)\n\n\n\n> slave2\n\n![image-20231211151809445](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518533.png)\n\n![image-20231211151826289](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518365.png)\n\n完成\n\n## 6. asbru-cm工具的使用\n\n1、\n\n![image-20230320175907854](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134495.png)\n\n2、\n\n![image-20230320180309740](https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134744.png)\n","slug":"Ubuntu基础配置-18-04-Docker配置和使用-容器化centos7大数据环境准备","published":1,"updated":"2024-11-11T12:27:45.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm3d099g6000ge1mj0itw2ry3","content":"<h2 id=\"1-ubuntu-基础配置\"><a href=\"#1-ubuntu-基础配置\" class=\"headerlink\" title=\"1.ubuntu 基础配置\"></a>1.ubuntu 基础配置</h2><p>环境：<code>ubuntu 18.04</code></p>\n<p>安装完Ubuntu之后，除了需要新建用户、设置密码之外，我们还要设置root密码，虽然Ubuntu默认有root超级管理员账户，但是具体的密码我们可以自行设置</p>\n<h3 id=\"1-1设置root密码：\"><a href=\"#1-1设置root密码：\" class=\"headerlink\" title=\"1.1设置root密码：\"></a>1.1设置root密码：</h3><p>1.启动Ubuntu<br>启动Ubuntu，有图形界面的，启动终端即可</p>\n<p>2.终端输入sudo passwd root</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324207.png\" alt=\"image-20230320172400074\"></p>\n<p>验证测试：</p>\n<p>验证：输入<strong>su -</strong> 后输入超级管理员账户的密码</p>\n<h3 id=\"1-2-更换源：\"><a href=\"#1-2-更换源：\" class=\"headerlink\" title=\"1.2 更换源：\"></a>1.2 更换源：</h3><p>更换下载源，不更换的话安装docker时会很慢，可以选择阿里或者清华源</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">vim</span> \n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak\t\t备份\n<span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/apt/sources.list    <span class=\"token comment\">#添加清华源</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>清华源：</p>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span>\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\n<span class=\"token comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span>\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\n<span class=\"token comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span>\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n<span class=\"token comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span>\n\n<span class=\"token comment\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span>\n<span class=\"token comment\"># # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span>\n\ndeb http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse\n<span class=\"token comment\"># deb-src http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse</span>\n\n<span class=\"token comment\"># 预发布软件源，不建议启用</span>\n<span class=\"token comment\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span>\n<span class=\"token comment\"># # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#更新源</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-3-安装ssh服务：\"><a href=\"#1-3-安装ssh服务：\" class=\"headerlink\" title=\"1.3 安装ssh服务：\"></a>1.3 安装ssh服务：</h3><p>（方便连接xshell工具）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> openssh-server <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解决windows Ubuntu 之间复制粘贴问题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoremove open-vm-tools <span class=\"token parameter variable\">-y</span>\t//卸载已有的工具\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> open-vm-tools <span class=\"token parameter variable\">-y</span>\t\t//安装工具open-vm-tools\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> open-vm-tools-desktop <span class=\"token parameter variable\">-y</span> //安装open-vm-tools-desktop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>ubuntu下安装asbru-cm工具：</p>\n<p>Asbru-CM是一种开源的配置管理工具，用于管理和部署服务器配置。它提供了一个Web界面，使用户可以轻松地管理和监控多台服务器的配置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-y</span>\n\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> https://packagecloud.io/install/repositories/asbru-cm/asbru-cm/script.deb.sh <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">bash</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> asbru-cm <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-Docker配置\"><a href=\"#2-Docker配置\" class=\"headerlink\" title=\"2. Docker配置\"></a>2. Docker配置</h2><p>因为某些原因,国内已经访问不了docker官网,所以此处改成使用阿里源安装docker</p>\n<p><a href=\"https://blog.csdn.net/single_0910/article/details/120562065\">Ubuntu18.04使用阿里源镜像安装Docker并配置镜像加速【图文详细】_阿里的ubuntu镜像源安装-CSDN博客</a></p>\n<h3 id=\"2-1-如果之前安装过docker，卸载旧版本docker\"><a href=\"#2-1-如果之前安装过docker，卸载旧版本docker\" class=\"headerlink\" title=\"2.1 如果之前安装过docker，卸载旧版本docker\"></a>2.1 如果之前安装过docker，卸载旧版本docker</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove <span class=\"token function\">docker</span> docker-engine docker.io containerd runc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-2-更新及安装工具软件\"><a href=\"#2-2-更新及安装工具软件\" class=\"headerlink\" title=\"2.2 更新及安装工具软件\"></a>2.2 更新及安装工具软件</h3><h4 id=\"2-2-1-更新系统里的所有的能更新的软件\"><a href=\"#2-2-1-更新系统里的所有的能更新的软件\" class=\"headerlink\" title=\"2.2.1 更新系统里的所有的能更新的软件\"></a>2.2.1 更新系统里的所有的能更新的软件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-2-2-安装几个工具软件\"><a href=\"#2-2-2-安装几个工具软件\" class=\"headerlink\" title=\"2.2.2 安装几个工具软件\"></a>2.2.2 安装几个工具软件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> apt-transport-https ca-certificates <span class=\"token function\">curl</span> gnupg lsb-release <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-2-3-增加一个docker的官方GPG-key：\"><a href=\"#2-2-3-增加一个docker的官方GPG-key：\" class=\"headerlink\" title=\"2.2.3 增加一个docker的官方GPG key：\"></a>2.2.3 增加一个docker的官方GPG key：</h4><p>gpgkey：是用来验证软件的真伪 ——防伪的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> gpg <span class=\"token parameter variable\">--dearmor</span> <span class=\"token parameter variable\">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.2.4 下载仓库文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg<span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release <span class=\"token parameter variable\">-cs</span><span class=\"token variable\">)</span></span> stable\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/sources.list.d/docker.list <span class=\"token operator\">></span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-3-安装docker\"><a href=\"#2-3-安装docker\" class=\"headerlink\" title=\"2.3 安装docker\"></a>2.3 安装docker</h3><h4 id=\"2-3-1-再次更新系统\"><a href=\"#2-3-1-再次更新系统\" class=\"headerlink\" title=\"2.3.1 再次更新系统\"></a>2.3.1 再次更新系统</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-3-2-安装docker-ce软件\"><a href=\"#2-3-2-安装docker-ce软件\" class=\"headerlink\" title=\"2.3.2 安装docker-ce软件\"></a>2.3.2 安装docker-ce软件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-4-查看是否启动docker\"><a href=\"#2-4-查看是否启动docker\" class=\"headerlink\" title=\"2.4 查看是否启动docker\"></a>2.4 查看是否启动docker</h3><p>由于docker安装的时候自带设置启动，所以直接查看进程是否启动就可以了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> aux<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token function\">docker</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324877.png\" alt=\"image-20230812180124831\"></p>\n<p>安装成功</p>\n<h2 id=\"3-Docker-服务操作\"><a href=\"#3-Docker-服务操作\" class=\"headerlink\" title=\"3. Docker 服务操作\"></a>3. Docker 服务操作</h2><h3 id=\"3-1-常用命令\"><a href=\"#3-1-常用命令\" class=\"headerlink\" title=\"3.1 常用命令\"></a>3.1 常用命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">docker</span> start  <span class=\"token comment\"># 启动Docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">docker</span> stop  <span class=\"token comment\"># 停止Docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">docker</span> restart  <span class=\"token comment\"># 重启Docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">docker</span> status  <span class=\"token comment\"># 查看Docker状态</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看docker容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span>    <span class=\"token comment\">#查看当前运行的容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span>    <span class=\"token comment\">#查看所有容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-aq</span><span class=\"token variable\">)</span></span>  <span class=\"token comment\">#删除所有容器</span>\n<span class=\"token function\">docker</span> images  <span class=\"token comment\">#查看docker镜像</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#导入镜像包,两者都会恢复为镜像</span>\n<span class=\"token function\">docker</span> load <span class=\"token operator\">&lt;</span> /home/hj/大数据比赛环境包/bigdata.tar\n<span class=\"token function\">docker</span> load <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">&lt;</span> /home/hj/大数据比赛环境包/bigdata.tar\n<span class=\"token comment\">#导入容器包,两者都会恢复为镜像</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">import</span> 路径\n\n<span class=\"token comment\">#删除镜像（镜像有创建过容器则需要删除容器才可以删除镜像）</span>\n<span class=\"token function\">docker</span> rmi 镜像名或镜像ID\n\n<span class=\"token comment\">#删除所有容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-aq</span><span class=\"token variable\">)</span></span>\n<span class=\"token function\">docker</span> <span class=\"token function\">rm</span> 容器\n\n<span class=\"token comment\">#启动容器</span>\n<span class=\"token function\">docker</span> start 容器id\n\n<span class=\"token comment\">#运行容器</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> 容器id /bin/bash\n\n<span class=\"token comment\">#将容器导成镜像</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> commit <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"镜像作者\"</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"提交成镜像的说明信息\"</span> 容器的名称 新镜像名称:标签\n\n<span class=\"token function\">docker</span> 上传文件到容器\n<span class=\"token function\">docker</span> <span class=\"token function\">cp</span> /home/hj/clickhouse-21.9.4.35（tgz） master:/opt/\n\n从容器中上传文件到本地\n<span class=\"token function\">docker</span> <span class=\"token function\">cp</span> master:/opt/ /home/hj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-2-Docker-的镜像操作\"><a href=\"#3-2-Docker-的镜像操作\" class=\"headerlink\" title=\"3.2 Docker 的镜像操作\"></a>3.2 Docker 的镜像操作</h3><h4 id=\"3-2-1-列出镜像\"><a href=\"#3-2-1-列出镜像\" class=\"headerlink\" title=\"3.2.1 列出镜像\"></a>3.2.1 列出镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> images<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果：<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324626.png\" alt=\"image-20230812180956921\"></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REPOSITORY</td>\n<td>镜像所在的仓库名称</td>\n</tr>\n<tr>\n<td>TAG</td>\n<td>镜像标签(版本)</td>\n</tr>\n<tr>\n<td>IMAGEID</td>\n<td>镜像ID</td>\n</tr>\n<tr>\n<td>CREATED</td>\n<td>镜像的创建日期(不是获取该镜像的日期)</td>\n</tr>\n<tr>\n<td>SIZE</td>\n<td>镜像大小</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-2-2-搜索镜像\"><a href=\"#3-2-2-搜索镜像\" class=\"headerlink\" title=\"3.2.2 搜索镜像\"></a>3.2.2 搜索镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> search 镜像名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-2-3-拉取镜像\"><a href=\"#3-2-3-拉取镜像\" class=\"headerlink\" title=\"3.2.3 拉取镜像\"></a>3.2.3 拉取镜像</h4><p>要想获取某个镜像，我们可以使用pull命令，从仓库中拉取镜像到本地。</p>\n<p>如果下载镜像时不指定标签，则默认会下载仓库中最新版本的镜像，即选择标签为 latest 标签。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull 仓库名称/标签<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-2-4-删除镜像\"><a href=\"#3-2-4-删除镜像\" class=\"headerlink\" title=\"3.2.4 删除镜像\"></a>3.2.4 删除镜像</h4><p>镜像有创建过容器则需要删除容器才可以删除镜像（或者直接强制删除）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#普通删除</span>\n<span class=\"token function\">docker</span> rmi 镜像名或镜像ID\n<span class=\"token comment\">#强制删除</span>\n<span class=\"token function\">docker</span> rmi <span class=\"token parameter variable\">-f</span> 镜像名或镜像ID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-5-导入镜像\"><a href=\"#3-2-5-导入镜像\" class=\"headerlink\" title=\"3.2.5 导入镜像\"></a>3.2.5 导入镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#方法1</span>\n<span class=\"token function\">docker</span> load <span class=\"token operator\">&lt;</span> 镜像包\n<span class=\"token comment\">#方法2</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> load <span class=\"token parameter variable\">-i</span> 镜像包<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-6-导出镜像\"><a href=\"#3-2-6-导出镜像\" class=\"headerlink\" title=\"3.2.6 导出镜像\"></a>3.2.6 导出镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save –o /opt/导出名称.tar 镜像名称:标签<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-3-Docker容器操作\"><a href=\"#3-3-Docker容器操作\" class=\"headerlink\" title=\"3.3 Docker容器操作\"></a>3.3 Docker容器操作</h3><h4 id=\"3-3-1-创建容器\"><a href=\"#3-3-1-创建容器\" class=\"headerlink\" title=\"3.3.1 创建容器\"></a>3.3.1 创建容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> 镜像名:tag <span class=\"token punctuation\">[</span>向启动容器中传入的命令<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 常用可选参数说明：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>表示以“交互模式”运行容器</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</td>\n</tr>\n<tr>\n<td>–name</td>\n<td>为创建的容器命名</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>为容器设置环境变量</td>\n</tr>\n<tr>\n<td>–network</td>\n<td>指定网桥</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-3-2-进入已运行容器\"><a href=\"#3-3-2-进入已运行容器\" class=\"headerlink\" title=\"3.3.2 进入已运行容器\"></a>3.3.2 进入已运行容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> 容器名或容器ID /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-3-查看容器\"><a href=\"#3-3-3-查看容器\" class=\"headerlink\" title=\"3.3.3 查看容器\"></a>3.3.3 查看容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span>     <span class=\"token comment\">#查看当前运行的容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span> –a    <span class=\"token comment\">#查看当前所有的容器</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-4-启动容器\"><a href=\"#3-3-4-启动容器\" class=\"headerlink\" title=\"3.3.4 启动容器\"></a>3.3.4 启动容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> start 容器名或容器ID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-5-停止容器\"><a href=\"#3-3-5-停止容器\" class=\"headerlink\" title=\"3.3.5 停止容器\"></a>3.3.5 停止容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> stop 容器名或容器ID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-6-删除容器\"><a href=\"#3-3-6-删除容器\" class=\"headerlink\" title=\"3.3.6 删除容器\"></a>3.3.6 删除容器</h4><p>（运行中的容器不能删除）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> 容器名或容器ID <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-7-将容器保存为镜像\"><a href=\"#3-3-7-将容器保存为镜像\" class=\"headerlink\" title=\"3.3.7 将容器保存为镜像\"></a>3.3.7 将容器保存为镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> commit <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> CONTAINER <span class=\"token punctuation\">[</span>REPOSITORY<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>TAG<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>OPTIONS说明：</p>\n<p>-a :提交的镜像作者；</p>\n<p>-c :使用Dockerfile指令来创建镜像；</p>\n<p>-m :提交时的说明文字；</p>\n<p>-p :在commit时，将容器暂停。</p>\n<p>$ docker commit 容器名 镜像名:tag</p>\n<h3 id=\"3-4-docker网络设置\"><a href=\"#3-4-docker网络设置\" class=\"headerlink\" title=\"3.4 docker网络设置\"></a>3.4 docker网络设置</h3><h4 id=\"3-4-1-Docker基本网络\"><a href=\"#3-4-1-Docker基本网络\" class=\"headerlink\" title=\"3.4.1 Docker基本网络\"></a>3.4.1 Docker基本网络</h4><p><code>Docker安装后自动创建3种网络：bridge、host、none</code></p>\n<p>Docker在启动时会开启一个虚拟网桥设备docker0，默认的地址为172.17.0.1&#x2F;16，容器启动后都会被桥接到docker0上，并自动分配到一个ip地址。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">bridge 桥接网络模式：</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1、为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，默认为该模式</td>\n</tr>\n<tr>\n<td align=\"left\">2、为容器分配独立IP，具有很好的网络隔离性，服务不会跟宿主机上的服务发送端口冲突问题</td>\n</tr>\n<tr>\n<td align=\"left\">3、主机和容器间通过桥接的方式进行通信</td>\n</tr>\n<tr>\n<td align=\"left\">4、只能单机使用，不适合跨主机docker服务间通信</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">host 主机本地网络模式：</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1、docker容器共享主机的ip、端口号等等网络资源，如果单机部署</td>\n</tr>\n<tr>\n<td align=\"left\">2、只能单机使用，不适合跨主机docker服务间通信</td>\n</tr>\n<tr>\n<td align=\"left\">3、这种网络模式效率最高</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">overlay 集群网络模式：</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">多节点集群下统一分配服务独立ip</td>\n</tr>\n<tr>\n<td align=\"left\">跨机器节点上的docker服务间能互相通信</td>\n</tr>\n<tr>\n<td align=\"left\">支持主机节点和集群网络内的节点间互相通信</td>\n</tr>\n<tr>\n<td align=\"left\">支持节点间加密通信 注：windows机器节点不支持加密通信</td>\n</tr>\n</tbody></table>\n<p><code>添加网桥，创建容器时可以指定网桥，不使用默认网桥</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> network <span class=\"token function\">ls</span>            <span class=\"token comment\">#查看所有网络</span>\n<span class=\"token function\">docker</span> network inspect 网络   <span class=\"token comment\">#查看网络的相关信息</span>\n\n<span class=\"token comment\">#自定义创建的默认default bridge   </span>\n\n<span class=\"token function\">docker</span> network create <span class=\"token parameter variable\">--driver</span> bridge <span class=\"token parameter variable\">--subnet</span> <span class=\"token number\">192.168</span>.1.1/24 <span class=\"token parameter variable\">--gateway</span> <span class=\"token number\">192.168</span>.1.1 mynet <span class=\"token comment\">#自定义创建一个网络mynet</span>\n\n<span class=\"token function\">docker</span> network <span class=\"token function\">rm</span> 网络id  <span class=\"token comment\">#删除网络</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-Docker封装Centos7大数据环境\"><a href=\"#4-Docker封装Centos7大数据环境\" class=\"headerlink\" title=\"4.Docker封装Centos7大数据环境\"></a>4.Docker封装Centos7大数据环境</h2><h3 id=\"4-1-编写Dockerfile\"><a href=\"#4-1-编写Dockerfile\" class=\"headerlink\" title=\"4.1 编写Dockerfile\"></a>4.1 编写Dockerfile</h3><p>Pull一个centos7镜像，在此镜像基础上安装ssh服务，开放端口，上传jdk、hadoop等组件等操作，封装成hadoop大数据环境</p>\n<blockquote>\n<p>已经封装好的镜像:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">registry.cn-hangzhou.aliyuncs.com&#x2F;shangguan-hj&#x2F;bigdata:gxjzy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>拉取</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;510_repo&#x2F;bigdata:gxjzy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h4 id=\"4-1-2-编写第一个dockerfile，封装一个新的镜像\"><a href=\"#4-1-2-编写第一个dockerfile，封装一个新的镜像\" class=\"headerlink\" title=\"4.1.2 编写第一个dockerfile，封装一个新的镜像\"></a>4.1.2 编写第一个dockerfile，封装一个新的镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 选择一个已有的os镜像作为基础  </span>\nFROM centos:7\n<span class=\"token comment\"># 安装openssh-server和sudo软件包  </span>\nRUN yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> openssh-server <span class=\"token function\">sudo</span>\n<span class=\"token comment\">#安装openssh-clients</span>\nRUN yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> openssh-clients\n<span class=\"token comment\"># 修改ssh配置文件，方便后面通过root用户进行ssh远程登录</span>\nRUN <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g'</span> /etc/ssh/sshd_config\nRUN <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g'</span> /etc/ssh/sshd_config\n\n<span class=\"token comment\">#安装initscripts，方便 ip addr 查询网络状态</span>\nRUN yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> initscripts\n\n<span class=\"token comment\">#安装防火墙 </span>\nRUN yum <span class=\"token function\">install</span> firewalld <span class=\"token parameter variable\">-y</span>\n\n<span class=\"token comment\">#安装which  hadoop版本号查看需要用到  </span>\nRUN yum <span class=\"token function\">install</span> <span class=\"token function\">which</span> <span class=\"token parameter variable\">-y</span>\n\n<span class=\"token comment\">#mysql 初始化报错 ，缺少libnuma.so.1情况，缺啥补啥 </span>\nRUN yum <span class=\"token function\">install</span> numactl <span class=\"token parameter variable\">-y</span>\nRUN yum <span class=\"token function\">install</span> libaio <span class=\"token parameter variable\">-y</span>\nRUN yum <span class=\"token function\">install</span> libnuma.so.1 <span class=\"token parameter variable\">-y</span>\n\n\n<span class=\"token comment\"># 添加用户root，密码123，并且将此用户添加到sudoers里  </span>\nRUN <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"root:123\"</span> <span class=\"token operator\">|</span> chpasswd\nRUN <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"root   ALL=(ALL)       ALL\"</span> <span class=\"token operator\">>></span> /etc/sudoers\n\n<span class=\"token comment\"># 启动sshd服务并且暴露22端口  </span>\nRUN <span class=\"token function\">mkdir</span> /var/run/sshd\nEXPOSE <span class=\"token number\">22</span>\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/usr/sbin/sshd\"</span>, <span class=\"token string\">\"-D\"</span><span class=\"token punctuation\">]</span>\nRUN <span class=\"token function\">mkdir</span> /opt/<span class=\"token punctuation\">&#123;</span>software,module<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">#封装：docker build -t\"centos-ssh-root\" . </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编辑好脚本后，使用build命令开始运行</p>\n<p>格式：docker build -t”镜像名称” . </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build -t<span class=\"token string\">\"centos-ssh-root\"</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行效果：<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324924.png\" alt=\"image-20230812190933232\"></p>\n<p>查看创建的镜像：</p>\n<p> <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324183.png\" alt=\"image-20230812191126430\"></p>\n<h4 id=\"4-1-3-编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像\"><a href=\"#4-1-3-编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像\" class=\"headerlink\" title=\"4.1.3 编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像\"></a>4.1.3 编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像</h4><p>封装的系统只是完成了ssh服务的安装，开放22端口，配置root用户。并没有达到大数据环境的使用要求，接下来在这个封装好的系统上，再进行封装，上传大数据环境需要的组件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#软件包根据自己所需的填写</span>\nFROM centos-ssh-root\nCOPY apache-flume-1.9.0-bin.tar.gz /opt/software/\nCOPY apache-hive-3.1.2-bin.tar.gz /opt/software/\nCOPY flink-1.14.0-bin-scala_2.12.tgz /opt/software/\nCOPY hadoop-3.1.3.tar.gz /opt/software/\nCOPY hbase-2.2.3-bin.tar.gz /opt/software/\nCOPY jdk-8u162-linux-x64.tar.gz /opt/software/\nCOPY kafka_2.12-2.4.1.tgz /opt/software/\nCOPY maxwell-1.29.0.tar.gz /opt/software/\nCOPY redis-6.2.6.tar.gz /opt/software/\nCOPY scala-2.12.0.tgz /opt/software/\nCOPY spark-3.1.1-bin-hadoop3.2.tgz /opt/software/\nCOPY clickhouse-21.9.4.35 /opt/software/\nCOPY mysql /opt/software/\nCOPY zookeeper-3.4.6.tar.gz /opt/software/\nCOPY sqoop-1.4.2.bin__hadoop-2.0.0-alpha.tar.gz /opt/software/\n\n<span class=\"token comment\">#封装：docker build -t\"bigdata\" . </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编辑好脚本后，使用build命令开始运行</p>\n<p>格式：docker build -t”镜像名称” . </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build -t<span class=\"token string\">\"bigdata\"</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行效果：<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324473.png\" alt=\"image-20230812191358805\"></p>\n<p>查看新封装的镜像：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324220.png\" alt=\"image-20230812192151801\"></p>\n<h4 id=\"4-1-4-star-镜像优化\"><a href=\"#4-1-4-star-镜像优化\" class=\"headerlink\" title=\"4.1.4 :star:镜像优化\"></a>4.1.4 :star:镜像优化</h4><blockquote>\n<p>综合上面两个dockerfile进行镜像优化</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">FROM centos:7\nRUN yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> openssh-server <span class=\"token function\">sudo</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> openssh-clients <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g'</span> /etc/ssh/sshd_config <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g'</span> /etc/ssh/sshd_config <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> initscripts <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    yum <span class=\"token function\">install</span> <span class=\"token function\">which</span> <span class=\"token parameter variable\">-y</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    yum <span class=\"token function\">install</span> numactl libaio libnuma.so.1 <span class=\"token parameter variable\">-y</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"root:1\"</span> <span class=\"token operator\">|</span> chpasswd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"root   ALL=(ALL)       ALL\"</span> <span class=\"token operator\">>></span> /etc/sudoers <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">mkdir</span> /var/run/sshd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">mkdir</span> /opt/<span class=\"token punctuation\">&#123;</span>software,module<span class=\"token punctuation\">&#125;</span> \nCOPY <span class=\"token builtin class-name\">.</span> /opt/software \nEXPOSE <span class=\"token number\">22</span>\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/usr/sbin/sshd\"</span>, <span class=\"token string\">\"-D\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>开始构建</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker build -t bigdata .</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>查看构建的镜像</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker images | grep bigdata</span>\nbigdata                                                  latest    78d3e81ed5ac   <span class=\"token number\">4</span> hours ago   <span class=\"token number\">5</span>.57GB<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"4-2-Hadoop配置容器启动：\"><a href=\"#4-2-Hadoop配置容器启动：\" class=\"headerlink\" title=\"4.2 Hadoop配置容器启动：\"></a>4.2 Hadoop配置容器启动：</h3><p><strong>集群规划，一主两从</strong></p>\n<blockquote>\n<p>master:</p>\n</blockquote>\n<p>测试:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-id</span> <span class=\"token parameter variable\">--name</span> master <span class=\"token parameter variable\">--hostname</span> master <span class=\"token parameter variable\">--net</span> mynet <span class=\"token parameter variable\">--privileged</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class=\"token parameter variable\">-P</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">50070</span>:50070 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8088</span>:8088 bigdata /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>:star: 实战:</p>\n<p>自定义创建docker网络:</p>\n<p>(这会创建一个自定义网络，允许在该网络内分配IP地址，并且子网为<code>192.168.1.0/24</code>)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> network create <span class=\"token parameter variable\">--subnet</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.1.0/24 mynet<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建一个名为master的容器,ip为192.168.1.10:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> master <span class=\"token parameter variable\">--hostname</span> master <span class=\"token parameter variable\">--network</span> mynet <span class=\"token parameter variable\">--ip</span> <span class=\"token number\">192.168</span>.1.10 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">16010</span>:16010 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2181</span>:2181 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3306</span>:3306 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span>:6379 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8031</span>:8031 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8032</span>:8032 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8033</span>:8033 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:8080 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8081</span>:8081 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8020</span>:8020 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8088</span>:8088 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8123</span>:8123 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9000</span>:9000 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9083</span>:9083 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9092</span>:9092 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9866</span>:9866 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9870</span>:9870 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">10000</span>:10000 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">60010</span>:60010 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">12321</span>:12321 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">4040</span>:4040 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class=\"token punctuation\">\\</span>\n  bigdata:gxjzy /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote>\n<p>slave1:</p>\n</blockquote>\n<p>测试:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-id</span> <span class=\"token parameter variable\">--name</span> slave1 <span class=\"token parameter variable\">--hostname</span> slave1 <span class=\"token parameter variable\">--net</span> mynet <span class=\"token parameter variable\">--privileged</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">-P</span> bigdata /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>:star: 实战:</p>\n<p>创建一个名为master的容器,ip为192.168.1.10:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> slave1 <span class=\"token parameter variable\">--hostname</span> slave1 <span class=\"token parameter variable\">--network</span> mynet <span class=\"token parameter variable\">--ip</span> <span class=\"token number\">192.168</span>.1.20 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class=\"token punctuation\">\\</span>\n  bigdata:gxjzy /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<blockquote>\n<p>slave2:</p>\n</blockquote>\n<p>测试:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-id</span> <span class=\"token parameter variable\">--name</span> slave2 <span class=\"token parameter variable\">--hostname</span> slave2 <span class=\"token parameter variable\">--net</span> mynet <span class=\"token parameter variable\">--privileged</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">-P</span> bigdata /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>:star: 实战:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> slave2 <span class=\"token parameter variable\">--hostname</span> slave2 <span class=\"token parameter variable\">--network</span> mynet <span class=\"token parameter variable\">--ip</span> <span class=\"token number\">192.168</span>.1.30 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class=\"token punctuation\">\\</span>\n  bigdata:gxjzy /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>查看创建情况：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080117475.png\" alt=\"image-20240108011713901\"></p>\n<p>iptables端口映射（略）(后续添加端口映射需要使用)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">iptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-vnL</span>  <span class=\"token comment\">#查看端口映射</span>\n\niptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-A</span> DOCKER <span class=\"token parameter variable\">-p</span> tcp <span class=\"token parameter variable\">--dport</span> <span class=\"token number\">8089</span> <span class=\"token parameter variable\">-j</span> DNAT --to-destination <span class=\"token number\">192.168</span>.12.10:8088  <span class=\"token comment\">#添加端口映射</span>\n\niptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-vnL</span> DOCKER --line-number <span class=\"token comment\">#显示端口行号</span>\n\niptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-D</span> DOCKER <span class=\"token punctuation\">&#123;</span>行号<span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">#删除规则</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>进入容器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> master <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"5-使用docker-compose编排工具快速建立基础环境\"><a href=\"#5-使用docker-compose编排工具快速建立基础环境\" class=\"headerlink\" title=\"5. 使用docker-compose编排工具快速建立基础环境\"></a>5. 使用docker-compose编排工具快速建立基础环境</h2><blockquote>\n<p>首先安装好docker-compose编排工具(略)</p>\n</blockquote>\n<h3 id=\"5-1-编写docker-compose-yml\"><a href=\"#5-1-编写docker-compose-yml\" class=\"headerlink\" title=\"5.1 编写docker-compose.yml\"></a>5.1 编写docker-compose.yml</h3><p>自定义容器ip:</p>\n<table>\n<thead>\n<tr>\n<th>容器</th>\n<th>ip</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>master</td>\n<td>192.168.1.10</td>\n</tr>\n<tr>\n<td>slave1</td>\n<td>192.168.1.20</td>\n</tr>\n<tr>\n<td>slave2</td>\n<td>192.168.1.30</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim docker-compose.yml </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2.2\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> registry.cn<span class=\"token punctuation\">-</span>hangzhou.aliyuncs.com/shangguan<span class=\"token punctuation\">-</span>hj/bigdata<span class=\"token punctuation\">:</span>gxjzy\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> master\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> master\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">mynet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ipv4_address</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"192.168.1.10\"</span>\n    <span class=\"token key atrule\">privileged</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 1022<span class=\"token punctuation\">:</span><span class=\"token number\">22</span>\n      <span class=\"token punctuation\">-</span> 50070<span class=\"token punctuation\">:</span><span class=\"token number\">50070</span>\n      <span class=\"token punctuation\">-</span> 8088<span class=\"token punctuation\">:</span><span class=\"token number\">8088</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /sys/fs/cgroup<span class=\"token punctuation\">:</span>/sys/fs/cgroup\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /usr/sbin/init\n\n  <span class=\"token key atrule\">slave1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> registry.cn<span class=\"token punctuation\">-</span>hangzhou.aliyuncs.com/shangguan<span class=\"token punctuation\">-</span>hj/bigdata<span class=\"token punctuation\">:</span>gxjzy\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> slave1\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> slave1\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">mynet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ipv4_address</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"192.168.1.20\"</span>\n    <span class=\"token key atrule\">privileged</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 1023<span class=\"token punctuation\">:</span><span class=\"token number\">22</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /sys/fs/cgroup<span class=\"token punctuation\">:</span>/sys/fs/cgroup\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /usr/sbin/init\n    \n  <span class=\"token key atrule\">slave2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> registry.cn<span class=\"token punctuation\">-</span>hangzhou.aliyuncs.com/shangguan<span class=\"token punctuation\">-</span>hj/bigdata<span class=\"token punctuation\">:</span>gxjzy\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> slave2\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> slave2\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">mynet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ipv4_address</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"192.168.1.30\"</span>\n    <span class=\"token key atrule\">privileged</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 1024<span class=\"token punctuation\">:</span><span class=\"token number\">22</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /sys/fs/cgroup<span class=\"token punctuation\">:</span>/sys/fs/cgroup\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /usr/sbin/init\n\n<span class=\"token comment\"># 连接外部网络</span>\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mynet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ipam</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">subnet</span><span class=\"token punctuation\">:</span> 192.168.1.0/24<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-启动docker容器\"><a href=\"#5-2-启动docker容器\" class=\"headerlink\" title=\"5.2 启动docker容器\"></a>5.2 启动docker容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker-compose up -d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111500849.png\" alt=\"image-20231211150006708\"></p>\n<h3 id=\"5-3-查看创建情况\"><a href=\"#5-3-查看创建情况\" class=\"headerlink\" title=\"5.3 查看创建情况\"></a>5.3 查看创建情况</h3><h4 id=\"5-3-1-方式一-了解\"><a href=\"#5-3-1-方式一-了解\" class=\"headerlink\" title=\"5.3.1 方式一(了解):\"></a>5.3.1 方式一(了解):</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker-compose ps</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111501626.png\" alt=\"image-20231211150148532\"></p>\n<h4 id=\"5-3-2-方式二\"><a href=\"#5-3-2-方式二\" class=\"headerlink\" title=\"5.3.2 方式二:\"></a>5.3.2 方式二:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker ps</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111502108.png\" alt=\"image-20231211150204022\"></p>\n<h3 id=\"5-4-进入容器\"><a href=\"#5-4-进入容器\" class=\"headerlink\" title=\"5.4 进入容器\"></a>5.4 进入容器</h3><p><strong>master:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it master bash</span>\n<span class=\"token punctuation\">[</span>root@master /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ip a</span>\n<span class=\"token number\">1</span>: lo: <span class=\"token operator\">&lt;</span>LOOPBACK,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class=\"token number\">1000</span>\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet <span class=\"token number\">127.0</span>.0.1/8 scope <span class=\"token function\">host</span> lo\n       valid_lft forever preferred_lft forever\n<span class=\"token number\">96</span>: eth0@if97: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:02 brd ff:ff:ff:ff:ff:ff link-netnsid <span class=\"token number\">0</span>\n    inet <span class=\"token number\">192.168</span>.1.2/24 brd <span class=\"token number\">192.168</span>.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n<span class=\"token punctuation\">[</span>root@master /<span class=\"token punctuation\">]</span><span class=\"token comment\"># </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>slave1:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it slave1 bash</span>\n<span class=\"token punctuation\">[</span>root@slave1 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ip a</span>\n<span class=\"token number\">1</span>: lo: <span class=\"token operator\">&lt;</span>LOOPBACK,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class=\"token number\">1000</span>\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet <span class=\"token number\">127.0</span>.0.1/8 scope <span class=\"token function\">host</span> lo\n       valid_lft forever preferred_lft forever\n<span class=\"token number\">34</span>: eth0@if35: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:04 brd ff:ff:ff:ff:ff:ff link-netnsid <span class=\"token number\">0</span>\n    inet <span class=\"token number\">192.168</span>.1.4/24 brd <span class=\"token number\">192.168</span>.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n<span class=\"token punctuation\">[</span>root@slave1 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>slave2:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it slave2 bash</span>\n<span class=\"token punctuation\">[</span>root@slave2 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ip a</span>\n<span class=\"token number\">1</span>: lo: <span class=\"token operator\">&lt;</span>LOOPBACK,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class=\"token number\">1000</span>\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet <span class=\"token number\">127.0</span>.0.1/8 scope <span class=\"token function\">host</span> lo\n       valid_lft forever preferred_lft forever\n<span class=\"token number\">32</span>: eth0@if33: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:03 brd ff:ff:ff:ff:ff:ff link-netnsid <span class=\"token number\">0</span>\n    inet <span class=\"token number\">192.168</span>.1.3/24 brd <span class=\"token number\">192.168</span>.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n<span class=\"token punctuation\">[</span>root@slave2 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"5-5-连接客户端工具xshell\"><a href=\"#5-5-连接客户端工具xshell\" class=\"headerlink\" title=\"5.5 连接客户端工具xshell\"></a>5.5 连接客户端工具xshell</h3><p>&#x3D;&#x3D;注意定义的ssh端口&#x3D;&#x3D;</p>\n<blockquote>\n<p>master</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111517302.png\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111515957.png\" alt=\"image-20231211151542886\"></p>\n<blockquote>\n<p>slave1</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516827.png\" alt=\"image-20231211151638743\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516374.png\" alt=\"image-20231211151651296\"></p>\n<blockquote>\n<p>slave2</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518533.png\" alt=\"image-20231211151809445\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518365.png\" alt=\"image-20231211151826289\"></p>\n<p>完成</p>\n<h2 id=\"6-asbru-cm工具的使用\"><a href=\"#6-asbru-cm工具的使用\" class=\"headerlink\" title=\"6. asbru-cm工具的使用\"></a>6. asbru-cm工具的使用</h2><p>1、</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134495.png\" alt=\"image-20230320175907854\"></p>\n<p>2、</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134744.png\" alt=\"image-20230320180309740\"></p>\n","site":{"data":{"friends":[{"avatar":"https://cdn.jsdelivr.net/gh/wylblog/cdn@master/static/image/sidebar/avatar_wyl.jpg","name":"無以菱","introduction":"最是人间留不住，朱颜辞镜花辞树。","url":"https://wylblog.github.io","title":"Read More"},{"avatar":"https://img.picui.cn/free/2024/11/10/67304c2431937.jpg","name":"尚谦","introduction":"也曾怀念当初那个无所谓不能的自己.","url":"https://almost181209.github.io/","title":"Read More"}]}},"excerpt":"","more":"<h2 id=\"1-ubuntu-基础配置\"><a href=\"#1-ubuntu-基础配置\" class=\"headerlink\" title=\"1.ubuntu 基础配置\"></a>1.ubuntu 基础配置</h2><p>环境：<code>ubuntu 18.04</code></p>\n<p>安装完Ubuntu之后，除了需要新建用户、设置密码之外，我们还要设置root密码，虽然Ubuntu默认有root超级管理员账户，但是具体的密码我们可以自行设置</p>\n<h3 id=\"1-1设置root密码：\"><a href=\"#1-1设置root密码：\" class=\"headerlink\" title=\"1.1设置root密码：\"></a>1.1设置root密码：</h3><p>1.启动Ubuntu<br>启动Ubuntu，有图形界面的，启动终端即可</p>\n<p>2.终端输入sudo passwd root</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> root<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324207.png\" alt=\"image-20230320172400074\"></p>\n<p>验证测试：</p>\n<p>验证：输入<strong>su -</strong> 后输入超级管理员账户的密码</p>\n<h3 id=\"1-2-更换源：\"><a href=\"#1-2-更换源：\" class=\"headerlink\" title=\"1.2 更换源：\"></a>1.2 更换源：</h3><p>更换下载源，不更换的话安装docker时会很慢，可以选择阿里或者清华源</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">vim</span> \n<span class=\"token function\">sudo</span> <span class=\"token function\">cp</span> /etc/apt/sources.list /etc/apt/sources.list.bak\t\t备份\n<span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/apt/sources.list    <span class=\"token comment\">#添加清华源</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>清华源：</p>\n<p><a href=\"https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span>\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse\n<span class=\"token comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span>\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse\n<span class=\"token comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span>\ndeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse\n<span class=\"token comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span>\n\n<span class=\"token comment\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span>\n<span class=\"token comment\"># # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span>\n\ndeb http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse\n<span class=\"token comment\"># deb-src http://security.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse</span>\n\n<span class=\"token comment\"># 预发布软件源，不建议启用</span>\n<span class=\"token comment\"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span>\n<span class=\"token comment\"># # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#更新源</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h3 id=\"1-3-安装ssh服务：\"><a href=\"#1-3-安装ssh服务：\" class=\"headerlink\" title=\"1.3 安装ssh服务：\"></a>1.3 安装ssh服务：</h3><p>（方便连接xshell工具）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> openssh-server <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>解决windows Ubuntu 之间复制粘贴问题：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> autoremove open-vm-tools <span class=\"token parameter variable\">-y</span>\t//卸载已有的工具\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> open-vm-tools <span class=\"token parameter variable\">-y</span>\t\t//安装工具open-vm-tools\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> open-vm-tools-desktop <span class=\"token parameter variable\">-y</span> //安装open-vm-tools-desktop<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>ubuntu下安装asbru-cm工具：</p>\n<p>Asbru-CM是一种开源的配置管理工具，用于管理和部署服务器配置。它提供了一个Web界面，使用户可以轻松地管理和监控多台服务器的配置。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-y</span>\n\n<span class=\"token function\">curl</span> <span class=\"token parameter variable\">-s</span> https://packagecloud.io/install/repositories/asbru-cm/asbru-cm/script.deb.sh <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">bash</span>\n\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> asbru-cm <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h2 id=\"2-Docker配置\"><a href=\"#2-Docker配置\" class=\"headerlink\" title=\"2. Docker配置\"></a>2. Docker配置</h2><p>因为某些原因,国内已经访问不了docker官网,所以此处改成使用阿里源安装docker</p>\n<p><a href=\"https://blog.csdn.net/single_0910/article/details/120562065\">Ubuntu18.04使用阿里源镜像安装Docker并配置镜像加速【图文详细】_阿里的ubuntu镜像源安装-CSDN博客</a></p>\n<h3 id=\"2-1-如果之前安装过docker，卸载旧版本docker\"><a href=\"#2-1-如果之前安装过docker，卸载旧版本docker\" class=\"headerlink\" title=\"2.1 如果之前安装过docker，卸载旧版本docker\"></a>2.1 如果之前安装过docker，卸载旧版本docker</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> remove <span class=\"token function\">docker</span> docker-engine docker.io containerd runc<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-2-更新及安装工具软件\"><a href=\"#2-2-更新及安装工具软件\" class=\"headerlink\" title=\"2.2 更新及安装工具软件\"></a>2.2 更新及安装工具软件</h3><h4 id=\"2-2-1-更新系统里的所有的能更新的软件\"><a href=\"#2-2-1-更新系统里的所有的能更新的软件\" class=\"headerlink\" title=\"2.2.1 更新系统里的所有的能更新的软件\"></a>2.2.1 更新系统里的所有的能更新的软件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-2-2-安装几个工具软件\"><a href=\"#2-2-2-安装几个工具软件\" class=\"headerlink\" title=\"2.2.2 安装几个工具软件\"></a>2.2.2 安装几个工具软件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> apt-transport-https ca-certificates <span class=\"token function\">curl</span> gnupg lsb-release <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-2-3-增加一个docker的官方GPG-key：\"><a href=\"#2-2-3-增加一个docker的官方GPG-key：\" class=\"headerlink\" title=\"2.2.3 增加一个docker的官方GPG key：\"></a>2.2.3 增加一个docker的官方GPG key：</h4><p>gpgkey：是用来验证软件的真伪 ——防伪的</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> gpg <span class=\"token parameter variable\">--dearmor</span> <span class=\"token parameter variable\">-o</span> /usr/share/keyrings/docker-archive-keyring.gpg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>2.2.4 下载仓库文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg<span class=\"token variable\"><span class=\"token variable\">$(</span>lsb_release <span class=\"token parameter variable\">-cs</span><span class=\"token variable\">)</span></span> stable\"</span> <span class=\"token operator\">|</span> <span class=\"token function\">sudo</span> <span class=\"token function\">tee</span> /etc/apt/sources.list.d/docker.list <span class=\"token operator\">></span> /dev/null<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-3-安装docker\"><a href=\"#2-3-安装docker\" class=\"headerlink\" title=\"2.3 安装docker\"></a>2.3 安装docker</h3><h4 id=\"2-3-1-再次更新系统\"><a href=\"#2-3-1-再次更新系统\" class=\"headerlink\" title=\"2.3.1 再次更新系统\"></a>2.3.1 再次更新系统</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> update<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"2-3-2-安装docker-ce软件\"><a href=\"#2-3-2-安装docker-ce软件\" class=\"headerlink\" title=\"2.3.2 安装docker-ce软件\"></a>2.3.2 安装docker-ce软件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> docker-ce docker-ce-cli containerd.io <span class=\"token parameter variable\">-y</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"2-4-查看是否启动docker\"><a href=\"#2-4-查看是否启动docker\" class=\"headerlink\" title=\"2.4 查看是否启动docker\"></a>2.4 查看是否启动docker</h3><p>由于docker安装的时候自带设置启动，所以直接查看进程是否启动就可以了</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> aux<span class=\"token operator\">|</span><span class=\"token function\">grep</span> <span class=\"token function\">docker</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324877.png\" alt=\"image-20230812180124831\"></p>\n<p>安装成功</p>\n<h2 id=\"3-Docker-服务操作\"><a href=\"#3-Docker-服务操作\" class=\"headerlink\" title=\"3. Docker 服务操作\"></a>3. Docker 服务操作</h2><h3 id=\"3-1-常用命令\"><a href=\"#3-1-常用命令\" class=\"headerlink\" title=\"3.1 常用命令\"></a>3.1 常用命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">docker</span> start  <span class=\"token comment\"># 启动Docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">docker</span> stop  <span class=\"token comment\"># 停止Docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">docker</span> restart  <span class=\"token comment\"># 重启Docker</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">service</span> <span class=\"token function\">docker</span> status  <span class=\"token comment\"># 查看Docker状态</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#查看docker容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span>    <span class=\"token comment\">#查看当前运行的容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-a</span>    <span class=\"token comment\">#查看所有容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-aq</span><span class=\"token variable\">)</span></span>  <span class=\"token comment\">#删除所有容器</span>\n<span class=\"token function\">docker</span> images  <span class=\"token comment\">#查看docker镜像</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#导入镜像包,两者都会恢复为镜像</span>\n<span class=\"token function\">docker</span> load <span class=\"token operator\">&lt;</span> /home/hj/大数据比赛环境包/bigdata.tar\n<span class=\"token function\">docker</span> load <span class=\"token parameter variable\">-i</span> <span class=\"token operator\">&lt;</span> /home/hj/大数据比赛环境包/bigdata.tar\n<span class=\"token comment\">#导入容器包,两者都会恢复为镜像</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">import</span> 路径\n\n<span class=\"token comment\">#删除镜像（镜像有创建过容器则需要删除容器才可以删除镜像）</span>\n<span class=\"token function\">docker</span> rmi 镜像名或镜像ID\n\n<span class=\"token comment\">#删除所有容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">rm</span> <span class=\"token parameter variable\">-f</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">docker</span> <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-aq</span><span class=\"token variable\">)</span></span>\n<span class=\"token function\">docker</span> <span class=\"token function\">rm</span> 容器\n\n<span class=\"token comment\">#启动容器</span>\n<span class=\"token function\">docker</span> start 容器id\n\n<span class=\"token comment\">#运行容器</span>\n<span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> 容器id /bin/bash\n\n<span class=\"token comment\">#将容器导成镜像</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> commit <span class=\"token parameter variable\">-a</span> <span class=\"token string\">\"镜像作者\"</span> <span class=\"token parameter variable\">-m</span> <span class=\"token string\">\"提交成镜像的说明信息\"</span> 容器的名称 新镜像名称:标签\n\n<span class=\"token function\">docker</span> 上传文件到容器\n<span class=\"token function\">docker</span> <span class=\"token function\">cp</span> /home/hj/clickhouse-21.9.4.35（tgz） master:/opt/\n\n从容器中上传文件到本地\n<span class=\"token function\">docker</span> <span class=\"token function\">cp</span> master:/opt/ /home/hj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"3-2-Docker-的镜像操作\"><a href=\"#3-2-Docker-的镜像操作\" class=\"headerlink\" title=\"3.2 Docker 的镜像操作\"></a>3.2 Docker 的镜像操作</h3><h4 id=\"3-2-1-列出镜像\"><a href=\"#3-2-1-列出镜像\" class=\"headerlink\" title=\"3.2.1 列出镜像\"></a>3.2.1 列出镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> images<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>结果：<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324626.png\" alt=\"image-20230812180956921\"></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REPOSITORY</td>\n<td>镜像所在的仓库名称</td>\n</tr>\n<tr>\n<td>TAG</td>\n<td>镜像标签(版本)</td>\n</tr>\n<tr>\n<td>IMAGEID</td>\n<td>镜像ID</td>\n</tr>\n<tr>\n<td>CREATED</td>\n<td>镜像的创建日期(不是获取该镜像的日期)</td>\n</tr>\n<tr>\n<td>SIZE</td>\n<td>镜像大小</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-2-2-搜索镜像\"><a href=\"#3-2-2-搜索镜像\" class=\"headerlink\" title=\"3.2.2 搜索镜像\"></a>3.2.2 搜索镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> search 镜像名<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-2-3-拉取镜像\"><a href=\"#3-2-3-拉取镜像\" class=\"headerlink\" title=\"3.2.3 拉取镜像\"></a>3.2.3 拉取镜像</h4><p>要想获取某个镜像，我们可以使用pull命令，从仓库中拉取镜像到本地。</p>\n<p>如果下载镜像时不指定标签，则默认会下载仓库中最新版本的镜像，即选择标签为 latest 标签。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> pull 仓库名称/标签<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-2-4-删除镜像\"><a href=\"#3-2-4-删除镜像\" class=\"headerlink\" title=\"3.2.4 删除镜像\"></a>3.2.4 删除镜像</h4><p>镜像有创建过容器则需要删除容器才可以删除镜像（或者直接强制删除）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#普通删除</span>\n<span class=\"token function\">docker</span> rmi 镜像名或镜像ID\n<span class=\"token comment\">#强制删除</span>\n<span class=\"token function\">docker</span> rmi <span class=\"token parameter variable\">-f</span> 镜像名或镜像ID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-5-导入镜像\"><a href=\"#3-2-5-导入镜像\" class=\"headerlink\" title=\"3.2.5 导入镜像\"></a>3.2.5 导入镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#方法1</span>\n<span class=\"token function\">docker</span> load <span class=\"token operator\">&lt;</span> 镜像包\n<span class=\"token comment\">#方法2</span>\n<span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> load <span class=\"token parameter variable\">-i</span> 镜像包<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-2-6-导出镜像\"><a href=\"#3-2-6-导出镜像\" class=\"headerlink\" title=\"3.2.6 导出镜像\"></a>3.2.6 导出镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> save –o /opt/导出名称.tar 镜像名称:标签<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"3-3-Docker容器操作\"><a href=\"#3-3-Docker容器操作\" class=\"headerlink\" title=\"3.3 Docker容器操作\"></a>3.3 Docker容器操作</h3><h4 id=\"3-3-1-创建容器\"><a href=\"#3-3-1-创建容器\" class=\"headerlink\" title=\"3.3.1 创建容器\"></a>3.3.1 创建容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token punctuation\">[</span>option<span class=\"token punctuation\">]</span> 镜像名:tag <span class=\"token punctuation\">[</span>向启动容器中传入的命令<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p> 常用可选参数说明：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>表示以“交互模式”运行容器</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</td>\n</tr>\n<tr>\n<td>–name</td>\n<td>为创建的容器命名</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>表示目录映射关系(前者是宿主机目录，后者是映射到宿主机上的目录，即 宿主机目录:容器中目录)，可以使用多个-v 做多个目录或文件映射。注意:最好做目录映射，在宿主机上做修改，然后 共享到容器上。</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>在run后面加上-d参数,则会创建一个守护式容器在后台运行(这样创建容器后不 会自动登录容器，如果只加-i -t 两个参数，创建后就会自动进去容器)。</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>表示端口映射，前者是宿主机端口，后者是容器内的映射端口。可以使用多个-p 做多个端口映射</td>\n</tr>\n<tr>\n<td>-e</td>\n<td>为容器设置环境变量</td>\n</tr>\n<tr>\n<td>–network</td>\n<td>指定网桥</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-3-2-进入已运行容器\"><a href=\"#3-3-2-进入已运行容器\" class=\"headerlink\" title=\"3.3.2 进入已运行容器\"></a>3.3.2 进入已运行容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> 容器名或容器ID /bin/bash<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-3-查看容器\"><a href=\"#3-3-3-查看容器\" class=\"headerlink\" title=\"3.3.3 查看容器\"></a>3.3.3 查看容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span>     <span class=\"token comment\">#查看当前运行的容器</span>\n<span class=\"token function\">docker</span> <span class=\"token function\">ps</span> –a    <span class=\"token comment\">#查看当前所有的容器</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<h4 id=\"3-3-4-启动容器\"><a href=\"#3-3-4-启动容器\" class=\"headerlink\" title=\"3.3.4 启动容器\"></a>3.3.4 启动容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> start 容器名或容器ID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-5-停止容器\"><a href=\"#3-3-5-停止容器\" class=\"headerlink\" title=\"3.3.5 停止容器\"></a>3.3.5 停止容器</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> stop 容器名或容器ID<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-6-删除容器\"><a href=\"#3-3-6-删除容器\" class=\"headerlink\" title=\"3.3.6 删除容器\"></a>3.3.6 删除容器</h4><p>（运行中的容器不能删除）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">rm</span> 容器名或容器ID <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"3-3-7-将容器保存为镜像\"><a href=\"#3-3-7-将容器保存为镜像\" class=\"headerlink\" title=\"3.3.7 将容器保存为镜像\"></a>3.3.7 将容器保存为镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> commit <span class=\"token punctuation\">[</span>OPTIONS<span class=\"token punctuation\">]</span> CONTAINER <span class=\"token punctuation\">[</span>REPOSITORY<span class=\"token punctuation\">]</span>:<span class=\"token punctuation\">[</span>TAG<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>OPTIONS说明：</p>\n<p>-a :提交的镜像作者；</p>\n<p>-c :使用Dockerfile指令来创建镜像；</p>\n<p>-m :提交时的说明文字；</p>\n<p>-p :在commit时，将容器暂停。</p>\n<p>$ docker commit 容器名 镜像名:tag</p>\n<h3 id=\"3-4-docker网络设置\"><a href=\"#3-4-docker网络设置\" class=\"headerlink\" title=\"3.4 docker网络设置\"></a>3.4 docker网络设置</h3><h4 id=\"3-4-1-Docker基本网络\"><a href=\"#3-4-1-Docker基本网络\" class=\"headerlink\" title=\"3.4.1 Docker基本网络\"></a>3.4.1 Docker基本网络</h4><p><code>Docker安装后自动创建3种网络：bridge、host、none</code></p>\n<p>Docker在启动时会开启一个虚拟网桥设备docker0，默认的地址为172.17.0.1&#x2F;16，容器启动后都会被桥接到docker0上，并自动分配到一个ip地址。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">bridge 桥接网络模式：</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1、为每一个容器分配、设置IP等，并将容器连接到一个docker0虚拟网桥，默认为该模式</td>\n</tr>\n<tr>\n<td align=\"left\">2、为容器分配独立IP，具有很好的网络隔离性，服务不会跟宿主机上的服务发送端口冲突问题</td>\n</tr>\n<tr>\n<td align=\"left\">3、主机和容器间通过桥接的方式进行通信</td>\n</tr>\n<tr>\n<td align=\"left\">4、只能单机使用，不适合跨主机docker服务间通信</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">host 主机本地网络模式：</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1、docker容器共享主机的ip、端口号等等网络资源，如果单机部署</td>\n</tr>\n<tr>\n<td align=\"left\">2、只能单机使用，不适合跨主机docker服务间通信</td>\n</tr>\n<tr>\n<td align=\"left\">3、这种网络模式效率最高</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">overlay 集群网络模式：</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">多节点集群下统一分配服务独立ip</td>\n</tr>\n<tr>\n<td align=\"left\">跨机器节点上的docker服务间能互相通信</td>\n</tr>\n<tr>\n<td align=\"left\">支持主机节点和集群网络内的节点间互相通信</td>\n</tr>\n<tr>\n<td align=\"left\">支持节点间加密通信 注：windows机器节点不支持加密通信</td>\n</tr>\n</tbody></table>\n<p><code>添加网桥，创建容器时可以指定网桥，不使用默认网桥</code></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> network <span class=\"token function\">ls</span>            <span class=\"token comment\">#查看所有网络</span>\n<span class=\"token function\">docker</span> network inspect 网络   <span class=\"token comment\">#查看网络的相关信息</span>\n\n<span class=\"token comment\">#自定义创建的默认default bridge   </span>\n\n<span class=\"token function\">docker</span> network create <span class=\"token parameter variable\">--driver</span> bridge <span class=\"token parameter variable\">--subnet</span> <span class=\"token number\">192.168</span>.1.1/24 <span class=\"token parameter variable\">--gateway</span> <span class=\"token number\">192.168</span>.1.1 mynet <span class=\"token comment\">#自定义创建一个网络mynet</span>\n\n<span class=\"token function\">docker</span> network <span class=\"token function\">rm</span> 网络id  <span class=\"token comment\">#删除网络</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"4-Docker封装Centos7大数据环境\"><a href=\"#4-Docker封装Centos7大数据环境\" class=\"headerlink\" title=\"4.Docker封装Centos7大数据环境\"></a>4.Docker封装Centos7大数据环境</h2><h3 id=\"4-1-编写Dockerfile\"><a href=\"#4-1-编写Dockerfile\" class=\"headerlink\" title=\"4.1 编写Dockerfile\"></a>4.1 编写Dockerfile</h3><p>Pull一个centos7镜像，在此镜像基础上安装ssh服务，开放端口，上传jdk、hadoop等组件等操作，封装成hadoop大数据环境</p>\n<blockquote>\n<p>已经封装好的镜像:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">registry.cn-hangzhou.aliyuncs.com&#x2F;shangguan-hj&#x2F;bigdata:gxjzy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>拉取</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">docker pull registry.cn-hangzhou.aliyuncs.com&#x2F;510_repo&#x2F;bigdata:gxjzy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n</blockquote>\n<h4 id=\"4-1-2-编写第一个dockerfile，封装一个新的镜像\"><a href=\"#4-1-2-编写第一个dockerfile，封装一个新的镜像\" class=\"headerlink\" title=\"4.1.2 编写第一个dockerfile，封装一个新的镜像\"></a>4.1.2 编写第一个dockerfile，封装一个新的镜像</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 选择一个已有的os镜像作为基础  </span>\nFROM centos:7\n<span class=\"token comment\"># 安装openssh-server和sudo软件包  </span>\nRUN yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> openssh-server <span class=\"token function\">sudo</span>\n<span class=\"token comment\">#安装openssh-clients</span>\nRUN yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> openssh-clients\n<span class=\"token comment\"># 修改ssh配置文件，方便后面通过root用户进行ssh远程登录</span>\nRUN <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g'</span> /etc/ssh/sshd_config\nRUN <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g'</span> /etc/ssh/sshd_config\n\n<span class=\"token comment\">#安装initscripts，方便 ip addr 查询网络状态</span>\nRUN yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> initscripts\n\n<span class=\"token comment\">#安装防火墙 </span>\nRUN yum <span class=\"token function\">install</span> firewalld <span class=\"token parameter variable\">-y</span>\n\n<span class=\"token comment\">#安装which  hadoop版本号查看需要用到  </span>\nRUN yum <span class=\"token function\">install</span> <span class=\"token function\">which</span> <span class=\"token parameter variable\">-y</span>\n\n<span class=\"token comment\">#mysql 初始化报错 ，缺少libnuma.so.1情况，缺啥补啥 </span>\nRUN yum <span class=\"token function\">install</span> numactl <span class=\"token parameter variable\">-y</span>\nRUN yum <span class=\"token function\">install</span> libaio <span class=\"token parameter variable\">-y</span>\nRUN yum <span class=\"token function\">install</span> libnuma.so.1 <span class=\"token parameter variable\">-y</span>\n\n\n<span class=\"token comment\"># 添加用户root，密码123，并且将此用户添加到sudoers里  </span>\nRUN <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"root:123\"</span> <span class=\"token operator\">|</span> chpasswd\nRUN <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"root   ALL=(ALL)       ALL\"</span> <span class=\"token operator\">>></span> /etc/sudoers\n\n<span class=\"token comment\"># 启动sshd服务并且暴露22端口  </span>\nRUN <span class=\"token function\">mkdir</span> /var/run/sshd\nEXPOSE <span class=\"token number\">22</span>\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/usr/sbin/sshd\"</span>, <span class=\"token string\">\"-D\"</span><span class=\"token punctuation\">]</span>\nRUN <span class=\"token function\">mkdir</span> /opt/<span class=\"token punctuation\">&#123;</span>software,module<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">#封装：docker build -t\"centos-ssh-root\" . </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编辑好脚本后，使用build命令开始运行</p>\n<p>格式：docker build -t”镜像名称” . </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build -t<span class=\"token string\">\"centos-ssh-root\"</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行效果：<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324924.png\" alt=\"image-20230812190933232\"></p>\n<p>查看创建的镜像：</p>\n<p> <img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324183.png\" alt=\"image-20230812191126430\"></p>\n<h4 id=\"4-1-3-编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像\"><a href=\"#4-1-3-编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像\" class=\"headerlink\" title=\"4.1.3 编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像\"></a>4.1.3 编写第二个Dockerfile，上传所需环境包，再次封装成一个新的镜像</h4><p>封装的系统只是完成了ssh服务的安装，开放22端口，配置root用户。并没有达到大数据环境的使用要求，接下来在这个封装好的系统上，再进行封装，上传大数据环境需要的组件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#软件包根据自己所需的填写</span>\nFROM centos-ssh-root\nCOPY apache-flume-1.9.0-bin.tar.gz /opt/software/\nCOPY apache-hive-3.1.2-bin.tar.gz /opt/software/\nCOPY flink-1.14.0-bin-scala_2.12.tgz /opt/software/\nCOPY hadoop-3.1.3.tar.gz /opt/software/\nCOPY hbase-2.2.3-bin.tar.gz /opt/software/\nCOPY jdk-8u162-linux-x64.tar.gz /opt/software/\nCOPY kafka_2.12-2.4.1.tgz /opt/software/\nCOPY maxwell-1.29.0.tar.gz /opt/software/\nCOPY redis-6.2.6.tar.gz /opt/software/\nCOPY scala-2.12.0.tgz /opt/software/\nCOPY spark-3.1.1-bin-hadoop3.2.tgz /opt/software/\nCOPY clickhouse-21.9.4.35 /opt/software/\nCOPY mysql /opt/software/\nCOPY zookeeper-3.4.6.tar.gz /opt/software/\nCOPY sqoop-1.4.2.bin__hadoop-2.0.0-alpha.tar.gz /opt/software/\n\n<span class=\"token comment\">#封装：docker build -t\"bigdata\" . </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>编辑好脚本后，使用build命令开始运行</p>\n<p>格式：docker build -t”镜像名称” . </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> build -t<span class=\"token string\">\"bigdata\"</span> <span class=\"token builtin class-name\">.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行效果：<img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324473.png\" alt=\"image-20230812191358805\"></p>\n<p>查看新封装的镜像：</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202309241324220.png\" alt=\"image-20230812192151801\"></p>\n<h4 id=\"4-1-4-star-镜像优化\"><a href=\"#4-1-4-star-镜像优化\" class=\"headerlink\" title=\"4.1.4 :star:镜像优化\"></a>4.1.4 :star:镜像优化</h4><blockquote>\n<p>综合上面两个dockerfile进行镜像优化</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">FROM centos:7\nRUN yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> openssh-server <span class=\"token function\">sudo</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> openssh-clients <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ GSSAPIAuthentication yes /#GSSAPIAuthentication yes/g'</span> /etc/ssh/sshd_config <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">sed</span> <span class=\"token parameter variable\">-i</span> <span class=\"token string\">'s/ GSSAPICleanupCredentials no /#GSSAPICleanupCredentials no/g'</span> /etc/ssh/sshd_config <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    yum <span class=\"token function\">install</span> <span class=\"token parameter variable\">-y</span> <span class=\"token parameter variable\">--nogpgcheck</span> initscripts <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    yum <span class=\"token function\">install</span> <span class=\"token function\">which</span> <span class=\"token parameter variable\">-y</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    yum <span class=\"token function\">install</span> numactl libaio libnuma.so.1 <span class=\"token parameter variable\">-y</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"root:1\"</span> <span class=\"token operator\">|</span> chpasswd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"root   ALL=(ALL)       ALL\"</span> <span class=\"token operator\">>></span> /etc/sudoers <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">mkdir</span> /var/run/sshd <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">\\</span>\n    <span class=\"token function\">mkdir</span> /opt/<span class=\"token punctuation\">&#123;</span>software,module<span class=\"token punctuation\">&#125;</span> \nCOPY <span class=\"token builtin class-name\">.</span> /opt/software \nEXPOSE <span class=\"token number\">22</span>\nCMD <span class=\"token punctuation\">[</span><span class=\"token string\">\"/usr/sbin/sshd\"</span>, <span class=\"token string\">\"-D\"</span><span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<blockquote>\n<p>开始构建</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker build -t bigdata .</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<blockquote>\n<p>查看构建的镜像</p>\n</blockquote>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker images | grep bigdata</span>\nbigdata                                                  latest    78d3e81ed5ac   <span class=\"token number\">4</span> hours ago   <span class=\"token number\">5</span>.57GB<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"4-2-Hadoop配置容器启动：\"><a href=\"#4-2-Hadoop配置容器启动：\" class=\"headerlink\" title=\"4.2 Hadoop配置容器启动：\"></a>4.2 Hadoop配置容器启动：</h3><p><strong>集群规划，一主两从</strong></p>\n<blockquote>\n<p>master:</p>\n</blockquote>\n<p>测试:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-id</span> <span class=\"token parameter variable\">--name</span> master <span class=\"token parameter variable\">--hostname</span> master <span class=\"token parameter variable\">--net</span> mynet <span class=\"token parameter variable\">--privileged</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class=\"token parameter variable\">-P</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">50070</span>:50070 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8088</span>:8088 bigdata /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>:star: 实战:</p>\n<p>自定义创建docker网络:</p>\n<p>(这会创建一个自定义网络，允许在该网络内分配IP地址，并且子网为<code>192.168.1.0/24</code>)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> network create <span class=\"token parameter variable\">--subnet</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.1.0/24 mynet<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>创建一个名为master的容器,ip为192.168.1.10:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> master <span class=\"token parameter variable\">--hostname</span> master <span class=\"token parameter variable\">--network</span> mynet <span class=\"token parameter variable\">--ip</span> <span class=\"token number\">192.168</span>.1.10 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">16010</span>:16010 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">2181</span>:2181 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">3306</span>:3306 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">6379</span>:6379 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8031</span>:8031 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8032</span>:8032 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8033</span>:8033 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8080</span>:8080 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8081</span>:8081 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8020</span>:8020 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8088</span>:8088 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">8123</span>:8123 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9000</span>:9000 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9083</span>:9083 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9092</span>:9092 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9866</span>:9866 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">9870</span>:9870 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">10000</span>:10000 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-p</span> <span class=\"token number\">60010</span>:60010 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">12321</span>:12321 <span class=\"token parameter variable\">-p</span> <span class=\"token number\">4040</span>:4040 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class=\"token punctuation\">\\</span>\n  bigdata:gxjzy /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<blockquote>\n<p>slave1:</p>\n</blockquote>\n<p>测试:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-id</span> <span class=\"token parameter variable\">--name</span> slave1 <span class=\"token parameter variable\">--hostname</span> slave1 <span class=\"token parameter variable\">--net</span> mynet <span class=\"token parameter variable\">--privileged</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">-P</span> bigdata /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>:star: 实战:</p>\n<p>创建一个名为master的容器,ip为192.168.1.10:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> slave1 <span class=\"token parameter variable\">--hostname</span> slave1 <span class=\"token parameter variable\">--network</span> mynet <span class=\"token parameter variable\">--ip</span> <span class=\"token number\">192.168</span>.1.20 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class=\"token punctuation\">\\</span>\n  bigdata:gxjzy /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n\n\n\n\n<blockquote>\n<p>slave2:</p>\n</blockquote>\n<p>测试:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-id</span> <span class=\"token parameter variable\">--name</span> slave2 <span class=\"token parameter variable\">--hostname</span> slave2 <span class=\"token parameter variable\">--net</span> mynet <span class=\"token parameter variable\">--privileged</span><span class=\"token operator\">=</span>true <span class=\"token parameter variable\">-P</span> bigdata /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>:star: 实战:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token parameter variable\">--privileged</span> <span class=\"token parameter variable\">--name</span> slave2 <span class=\"token parameter variable\">--hostname</span> slave2 <span class=\"token parameter variable\">--network</span> mynet <span class=\"token parameter variable\">--ip</span> <span class=\"token number\">192.168</span>.1.30 <span class=\"token punctuation\">\\</span>\n  <span class=\"token parameter variable\">-v</span> /sys/fs/cgroup:/sys/fs/cgroup <span class=\"token punctuation\">\\</span>\n  bigdata:gxjzy /usr/sbin/init<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p>查看创建情况：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080117475.png\" alt=\"image-20240108011713901\"></p>\n<p>iptables端口映射（略）(后续添加端口映射需要使用)</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">iptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-vnL</span>  <span class=\"token comment\">#查看端口映射</span>\n\niptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-A</span> DOCKER <span class=\"token parameter variable\">-p</span> tcp <span class=\"token parameter variable\">--dport</span> <span class=\"token number\">8089</span> <span class=\"token parameter variable\">-j</span> DNAT --to-destination <span class=\"token number\">192.168</span>.12.10:8088  <span class=\"token comment\">#添加端口映射</span>\n\niptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-vnL</span> DOCKER --line-number <span class=\"token comment\">#显示端口行号</span>\n\niptables <span class=\"token parameter variable\">-t</span> nat <span class=\"token parameter variable\">-D</span> DOCKER <span class=\"token punctuation\">&#123;</span>行号<span class=\"token punctuation\">&#125;</span>  <span class=\"token comment\">#删除规则</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>进入容器：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> master <span class=\"token function\">bash</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"5-使用docker-compose编排工具快速建立基础环境\"><a href=\"#5-使用docker-compose编排工具快速建立基础环境\" class=\"headerlink\" title=\"5. 使用docker-compose编排工具快速建立基础环境\"></a>5. 使用docker-compose编排工具快速建立基础环境</h2><blockquote>\n<p>首先安装好docker-compose编排工具(略)</p>\n</blockquote>\n<h3 id=\"5-1-编写docker-compose-yml\"><a href=\"#5-1-编写docker-compose-yml\" class=\"headerlink\" title=\"5.1 编写docker-compose.yml\"></a>5.1 编写docker-compose.yml</h3><p>自定义容器ip:</p>\n<table>\n<thead>\n<tr>\n<th>容器</th>\n<th>ip</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>master</td>\n<td>192.168.1.10</td>\n</tr>\n<tr>\n<td>slave1</td>\n<td>192.168.1.20</td>\n</tr>\n<tr>\n<td>slave2</td>\n<td>192.168.1.30</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># vim docker-compose.yml </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"2.2\"</span>\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">master</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> registry.cn<span class=\"token punctuation\">-</span>hangzhou.aliyuncs.com/shangguan<span class=\"token punctuation\">-</span>hj/bigdata<span class=\"token punctuation\">:</span>gxjzy\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> master\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> master\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">mynet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ipv4_address</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"192.168.1.10\"</span>\n    <span class=\"token key atrule\">privileged</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 1022<span class=\"token punctuation\">:</span><span class=\"token number\">22</span>\n      <span class=\"token punctuation\">-</span> 50070<span class=\"token punctuation\">:</span><span class=\"token number\">50070</span>\n      <span class=\"token punctuation\">-</span> 8088<span class=\"token punctuation\">:</span><span class=\"token number\">8088</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /sys/fs/cgroup<span class=\"token punctuation\">:</span>/sys/fs/cgroup\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /usr/sbin/init\n\n  <span class=\"token key atrule\">slave1</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> registry.cn<span class=\"token punctuation\">-</span>hangzhou.aliyuncs.com/shangguan<span class=\"token punctuation\">-</span>hj/bigdata<span class=\"token punctuation\">:</span>gxjzy\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> slave1\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> slave1\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">mynet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ipv4_address</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"192.168.1.20\"</span>\n    <span class=\"token key atrule\">privileged</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 1023<span class=\"token punctuation\">:</span><span class=\"token number\">22</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /sys/fs/cgroup<span class=\"token punctuation\">:</span>/sys/fs/cgroup\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /usr/sbin/init\n    \n  <span class=\"token key atrule\">slave2</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">restart</span><span class=\"token punctuation\">:</span> always\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> registry.cn<span class=\"token punctuation\">-</span>hangzhou.aliyuncs.com/shangguan<span class=\"token punctuation\">-</span>hj/bigdata<span class=\"token punctuation\">:</span>gxjzy\n    <span class=\"token key atrule\">container_name</span><span class=\"token punctuation\">:</span> slave2\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> slave2\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">mynet</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">ipv4_address</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"192.168.1.30\"</span>\n    <span class=\"token key atrule\">privileged</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 1024<span class=\"token punctuation\">:</span><span class=\"token number\">22</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /sys/fs/cgroup<span class=\"token punctuation\">:</span>/sys/fs/cgroup\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> /usr/sbin/init\n\n<span class=\"token comment\"># 连接外部网络</span>\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">mynet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">ipam</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">config</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">subnet</span><span class=\"token punctuation\">:</span> 192.168.1.0/24<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"5-2-启动docker容器\"><a href=\"#5-2-启动docker容器\" class=\"headerlink\" title=\"5.2 启动docker容器\"></a>5.2 启动docker容器</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker-compose up -d</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111500849.png\" alt=\"image-20231211150006708\"></p>\n<h3 id=\"5-3-查看创建情况\"><a href=\"#5-3-查看创建情况\" class=\"headerlink\" title=\"5.3 查看创建情况\"></a>5.3 查看创建情况</h3><h4 id=\"5-3-1-方式一-了解\"><a href=\"#5-3-1-方式一-了解\" class=\"headerlink\" title=\"5.3.1 方式一(了解):\"></a>5.3.1 方式一(了解):</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker-compose ps</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111501626.png\" alt=\"image-20231211150148532\"></p>\n<h4 id=\"5-3-2-方式二\"><a href=\"#5-3-2-方式二\" class=\"headerlink\" title=\"5.3.2 方式二:\"></a>5.3.2 方式二:</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker ps</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111502108.png\" alt=\"image-20231211150204022\"></p>\n<h3 id=\"5-4-进入容器\"><a href=\"#5-4-进入容器\" class=\"headerlink\" title=\"5.4 进入容器\"></a>5.4 进入容器</h3><p><strong>master:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it master bash</span>\n<span class=\"token punctuation\">[</span>root@master /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ip a</span>\n<span class=\"token number\">1</span>: lo: <span class=\"token operator\">&lt;</span>LOOPBACK,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class=\"token number\">1000</span>\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet <span class=\"token number\">127.0</span>.0.1/8 scope <span class=\"token function\">host</span> lo\n       valid_lft forever preferred_lft forever\n<span class=\"token number\">96</span>: eth0@if97: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:02 brd ff:ff:ff:ff:ff:ff link-netnsid <span class=\"token number\">0</span>\n    inet <span class=\"token number\">192.168</span>.1.2/24 brd <span class=\"token number\">192.168</span>.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n<span class=\"token punctuation\">[</span>root@master /<span class=\"token punctuation\">]</span><span class=\"token comment\"># </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>slave1:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it slave1 bash</span>\n<span class=\"token punctuation\">[</span>root@slave1 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ip a</span>\n<span class=\"token number\">1</span>: lo: <span class=\"token operator\">&lt;</span>LOOPBACK,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class=\"token number\">1000</span>\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet <span class=\"token number\">127.0</span>.0.1/8 scope <span class=\"token function\">host</span> lo\n       valid_lft forever preferred_lft forever\n<span class=\"token number\">34</span>: eth0@if35: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:04 brd ff:ff:ff:ff:ff:ff link-netnsid <span class=\"token number\">0</span>\n    inet <span class=\"token number\">192.168</span>.1.4/24 brd <span class=\"token number\">192.168</span>.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n<span class=\"token punctuation\">[</span>root@slave1 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><strong>slave2:</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@docker-server ~/bigdata-work<span class=\"token punctuation\">]</span><span class=\"token comment\"># docker exec -it slave2 bash</span>\n<span class=\"token punctuation\">[</span>root@slave2 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># ip a</span>\n<span class=\"token number\">1</span>: lo: <span class=\"token operator\">&lt;</span>LOOPBACK,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">65536</span> qdisc noqueue state UNKNOWN group default qlen <span class=\"token number\">1000</span>\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n    inet <span class=\"token number\">127.0</span>.0.1/8 scope <span class=\"token function\">host</span> lo\n       valid_lft forever preferred_lft forever\n<span class=\"token number\">32</span>: eth0@if33: <span class=\"token operator\">&lt;</span>BROADCAST,MULTICAST,UP,LOWER_UP<span class=\"token operator\">></span> mtu <span class=\"token number\">1500</span> qdisc noqueue state UP group default \n    link/ether 02:42:c0:a8:01:03 brd ff:ff:ff:ff:ff:ff link-netnsid <span class=\"token number\">0</span>\n    inet <span class=\"token number\">192.168</span>.1.3/24 brd <span class=\"token number\">192.168</span>.1.255 scope global eth0\n       valid_lft forever preferred_lft forever\n<span class=\"token punctuation\">[</span>root@slave2 /<span class=\"token punctuation\">]</span><span class=\"token comment\"># </span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<h3 id=\"5-5-连接客户端工具xshell\"><a href=\"#5-5-连接客户端工具xshell\" class=\"headerlink\" title=\"5.5 连接客户端工具xshell\"></a>5.5 连接客户端工具xshell</h3><p>&#x3D;&#x3D;注意定义的ssh端口&#x3D;&#x3D;</p>\n<blockquote>\n<p>master</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111517302.png\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111515957.png\" alt=\"image-20231211151542886\"></p>\n<blockquote>\n<p>slave1</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516827.png\" alt=\"image-20231211151638743\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111516374.png\" alt=\"image-20231211151651296\"></p>\n<blockquote>\n<p>slave2</p>\n</blockquote>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518533.png\" alt=\"image-20231211151809445\"></p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202312111518365.png\" alt=\"image-20231211151826289\"></p>\n<p>完成</p>\n<h2 id=\"6-asbru-cm工具的使用\"><a href=\"#6-asbru-cm工具的使用\" class=\"headerlink\" title=\"6. asbru-cm工具的使用\"></a>6. asbru-cm工具的使用</h2><p>1、</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134495.png\" alt=\"image-20230320175907854\"></p>\n<p>2、</p>\n<p><img src=\"https://hj-typora-images-1319512400.cos.ap-guangzhou.myqcloud.com/images/202401080134744.png\" alt=\"image-20230320180309740\"></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cm3d099g10009e1mjdzknedle","category_id":"cm3d099g8000ke1mj0di9asdg","_id":"cm3d099ga000qe1mjadyd7saj"},{"post_id":"cm3d099fq0001e1mj00pa5rcm","category_id":"cm3d099fx0004e1mj8w9f84kc","_id":"cm3d099gb000ve1mj5d07b0t5"},{"post_id":"cm3d099fq0001e1mj00pa5rcm","category_id":"cm3d099g9000ne1mj983f9rpy","_id":"cm3d099gc000ye1mjgf39721d"},{"post_id":"cm3d099g3000be1mj0dwmf8gr","category_id":"cm3d099g8000ke1mj0di9asdg","_id":"cm3d099gc000ze1mjd8nr3o75"},{"post_id":"cm3d099g5000fe1mjcc8x8bu3","category_id":"cm3d099gb000ue1mj4k9ofyko","_id":"cm3d099gd0013e1mj76a61ov5"},{"post_id":"cm3d099fv0003e1mj53exf0pw","category_id":"cm3d099fx0004e1mj8w9f84kc","_id":"cm3d099ge0017e1mjhlwucsk7"},{"post_id":"cm3d099fv0003e1mj53exf0pw","category_id":"cm3d099g9000ne1mj983f9rpy","_id":"cm3d099ge0018e1mj84dbahbz"},{"post_id":"cm3d099g6000ge1mj0itw2ry3","category_id":"cm3d099g8000ke1mj0di9asdg","_id":"cm3d099ge0019e1mj6kcng7j2"},{"post_id":"cm3d099g00007e1mj6sy9adhb","category_id":"cm3d099fx0004e1mj8w9f84kc","_id":"cm3d099ge001ae1mj6nj61fyu"},{"post_id":"cm3d099g00007e1mj6sy9adhb","category_id":"cm3d099g9000ne1mj983f9rpy","_id":"cm3d099ge001be1mje8v0chm3"}],"PostTag":[{"post_id":"cm3d099fq0001e1mj00pa5rcm","tag_id":"cm3d099fy0005e1mj9la5ggk6","_id":"cm3d099g5000ee1mj8iz795yp"},{"post_id":"cm3d099fv0003e1mj53exf0pw","tag_id":"cm3d099fy0005e1mj9la5ggk6","_id":"cm3d099g8000je1mjc6in8ftu"},{"post_id":"cm3d099g00007e1mj6sy9adhb","tag_id":"cm3d099fy0005e1mj9la5ggk6","_id":"cm3d099g9000me1mj3edwc1gt"},{"post_id":"cm3d099g10009e1mjdzknedle","tag_id":"cm3d099g8000le1mjgslbdoo9","_id":"cm3d099g9000pe1mj6vtu608b"},{"post_id":"cm3d099g3000be1mj0dwmf8gr","tag_id":"cm3d099g8000le1mjgslbdoo9","_id":"cm3d099ga000te1mj7v0sfqy7"},{"post_id":"cm3d099g5000fe1mjcc8x8bu3","tag_id":"cm3d099ga000re1mj9oq1g1em","_id":"cm3d099gb000xe1mj4u2wfp7g"},{"post_id":"cm3d099g6000ge1mj0itw2ry3","tag_id":"cm3d099g8000le1mjgslbdoo9","_id":"cm3d099gd0014e1mj1ctfb5jr"},{"post_id":"cm3d099g6000ge1mj0itw2ry3","tag_id":"cm3d099gc0010e1mj66yfbp57","_id":"cm3d099gd0015e1mj0htw6344"}],"Tag":[{"name":"Golang","_id":"cm3d099fy0005e1mj9la5ggk6"},{"name":"Bigdata","_id":"cm3d099g8000le1mjgslbdoo9"},{"name":"Mysql","_id":"cm3d099ga000re1mj9oq1g1em"},{"name":"Docker","_id":"cm3d099gc0010e1mj66yfbp57"}]}}